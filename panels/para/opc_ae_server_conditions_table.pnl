V 13
4
LANG:10001 48 Server condition assignment to master datapoints
LANG:10004 32 分配到主DP的服务器条件
LANG:10000 50 Server Conditions Zuweisung auf Master-Datenpunkte
LANG:10027 89 Привязка состояний сервера мастер-точкам данных
PANEL,-1 -1 945 398 N "_3DFace" 1
"$server"
"main()
{
init();
}

" 0
 E E E E 1 -1 -1 0  10 12
""0  1
E "// panel global:
dyn_string dsConditionName, dsMasterNameFromCondition,dsMasterNameChanged, dsAdditionalConditionName ;
bool gFirst;

setEventcategories()
{
  string server = $server;
  int i, max = items.lineCount, pos;
  dyn_string dstempConditionName, dstempMasterNameFromCondition,dstempMasterNameChanged ;
  dyn_dyn_string ddsMasterNameFromCondition;
  
  items.enabled = FALSE;
  for (i=1; i<= max; i++)
  {
     dyn_anytype da;
     da = items.getLineN(i-1); 
     dstempConditionName[i] = da[1];
     dstempMasterNameFromCondition[i] = da[2];
     dstempMasterNameChanged[i] = da[3];
  }
  items.enabled = TRUE;;

  if (TRUE)  // dynlen( dstempConditionName) != dynlen(dsConditionName))   // merge necessary
  {
    for ( i= 1; i<= dynlen( dstempConditionName); i++)
    {
      pos = dynContains(  dsConditionName, dstempConditionName[i]);
      dsMasterNameChanged[pos] = dstempMasterNameChanged[i];
    }
  }

  dpSet(server+\".ConditionIdentification.ConditionName:_original.._value\", dsConditionName,
        server+\".ConditionIdentification.MasterNameFromCondition:_original.._value\", dsMasterNameFromCondition,
        server+\".ConditionIdentification.MasterNameChanged:_original.._value\",dsMasterNameChanged);


}

init()
{
  string server = $server;
  int i;
  dyn_string dstempConditionName, dstempMasterNameFromCondition,dstempMasterNameChanged ;
  dyn_dyn_string ddsMasterNameFromCondition;

  gFirst = TRUE;

  dpGet(server+\".ConditionIdentification.ConditionName:_online.._value\", dsConditionName,
        server+\".ConditionIdentification.MasterNameFromCondition:_online.._value\", dsMasterNameFromCondition,
        server+\".ConditionIdentification.MasterNameChanged:_online.._value\",dsMasterNameChanged);
  

  for ( i= 1; i<=dynlen(dsConditionName); i++)
  {

    if ( dsMasterNameChanged[i] != \"\")
    {
       dynAppend(dstempConditionName, dsConditionName[i]);
       dynAppend(dstempMasterNameFromCondition, dsMasterNameFromCondition[i]);
       dynAppend(dstempMasterNameChanged, dsMasterNameChanged[i]);
    }
  }

  if ( dynlen( dstempConditionName) > 0)
  {
     //CheckButton1.state(0) = TRUE;   
     buFilter.visible  = TRUE;
  }
  else
  {
    dstempConditionName= dsConditionName;
    dstempMasterNameFromCondition=dsMasterNameFromCondition;
    dstempMasterNameChanged =dsMasterNameChanged;
  }

  for ( i= 1; i<=dynlen(dstempMasterNameFromCondition); i++)
  {
   if ( !dpExists( dstempMasterNameFromCondition[i]) &&  dstempMasterNameChanged[i] == \"\")
     ddsMasterNameFromCondition[dynlen(ddsMasterNameFromCondition)+1] = makeDynString(dstempMasterNameFromCondition[i], \"STD_dp_not_existing\", \"_3DText\");
   else 
     ddsMasterNameFromCondition[dynlen(ddsMasterNameFromCondition)+1] = makeDynString(dstempMasterNameFromCondition[i], \"\", \"_3DText\");

  }



  items.appendLines(dynlen(dstempConditionName), \"ConditionName\", dstempConditionName, \"MasterNameFromCondition\", ddsMasterNameFromCondition, \"MasterNameChanged\", dstempMasterNameChanged);

}
" 0
 3
"CBRef" "1"
"EClose" "main()
{
  PanelOff();
}
" 0

"dpi" "96"
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
4
LANG:10001 6 Layer1
LANG:10004 6 Layer1
LANG:10000 6 Layer1
LANG:10027 6 Layer1
25 1
"items"
""
1 -143 -361.7010309278351 E E E 1 E 1 E N "_3DText" E N "_Window" E E
 E E
2 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  8 13 932 307
E"main(int row, string column, string value)
{
  dyn_string ds;
  dyn_float df;
  string dp, ret;

  if ( column != \"MasterNameChanged\")
    value = items.cellValueRC(row, \"MasterNameChanged\");


  dp = items.cellValueRC(row, \"MasterNameFromCondition\");

  if ( value == \"\")
    value = dp;

  if (items.cellBackColRC(row, \"MasterNameFromCondition\") != \"STD_dp_not_existing\")
  {
    ChildPanelOnCentralModal(\"vision/MessageWarning\", getCatStr(\"general\", \"warning\"), makeDynString(getCatStr(\"ac\", \"dpexists\")));
    return;
  }


  ChildPanelOnCentralModalReturn(\"para/opc_ae_server_condition_select.pnl\", getCatStr(\"para\", \"inputmasterdp\"), makeDynString(\"$dp:\"+value),df, ds );

  if ( dynlen( df) > 0  && df[1] > 0)
  {
   if (ds[1] == \"_mp_\" || ds[1] == dp)
     ds[1] = \"\";
  
   if ( items.cellValueRC(row, \"MasterNameFromCondition\") != ds[1])
     items.cellValueRC(row, \"MasterNameChanged\") = ds[1];
  }
}" 0
 1 0 1 3 1 "ConditionName" 26 1 0 "s" 4
LANG:10001 17 Server conditions
LANG:10004 15 服务器条件
LANG:10000 17 Server Conditions
LANG:10027 33 Серверные условия
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

300 "MasterNameFromCondition" 26 1 0 "s" 4
LANG:10001 22 Automatical master DPs
LANG:10004 14 自动DP主点
LANG:10000 23 Automatische Master-DPs
LANG:10027 65 Автоматические мастер-точки данных
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

300 "MasterNameChanged" 26 1 0 "s" 4
LANG:10001 30 Over-configured master DPs ...
LANG:10004 20 在DP主点配置...
LANG:10000 33 Überparametrierte Master-DPs ...
LANG:10027 69 Переопределенные мастер-точки данных
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

300 
22 22 "" 1 4
LANG:10001 2 #3
LANG:10004 2 #3
LANG:10000 2 #3
LANG:10027 2 #3
8 88
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 0 2 1 1 7
1 0
13 2
"help"
""
1 489.0000000000001 786 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 112 0
E E E
0
4
LANG:10001 16 Open online help
LANG:10004 18 打开在线帮助
LANG:10000 20 Online Hilfe öffnen
LANG:10027 14 Справка

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  8 363 111 391

T 
4
LANG:10001 4 Help
LANG:10004 6 帮助
LANG:10000 5 Hilfe
LANG:10027 14 Справка
"main()
{
  std_help( \"opc_ae_server_conditions_table\" );
}" 0
 E E E
13 3
"modify"
""
1 725 363 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
4 0 0 0 0 0
E E E
0
4
LANG:10001 14 Accept changes
LANG:10004 12 接受更改
LANG:10000 23 Änderungen übernehmen
LANG:10027 37 Применить изменения

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  724 363 827 391

T 
4
LANG:10001 5 Apply
LANG:10004 6 应用
LANG:10000 11 Übernehmen
LANG:10027 18 Применить
"main()
{

  if ( !getUserPermission(4) )
  {
    ChildPanelOnCentralModal(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),
      makeDynString(getCatStr(\"general\",\"permission\")));
    return;
  }
setEventcategories();
}
" 0
 E E E
13 4
"cancel"
""
1 831 363 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
5 0 0 0 27 0
E E E
0
4
LANG:10001 31 Discard changes and close panel
LANG:10004 27 放弃更改并关闭面板
LANG:10000 42 Änderungen verwerfen und Panel schließen
LANG:10027 66 Отменить изменения и закрыть панель

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  829 363 932 391

T 
4
LANG:10001 6 Cancel
LANG:10004 6 取消
LANG:10000 9 Abbrechen
LANG:10027 16 Отменить
"main()
{
  PanelOff();
}
" 0
 E E E
13 5
"ok"
""
1 621 363 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
6 0 0 0 16777221 0
E E E
0
4
LANG:10001 30 Accept changes and close panel
LANG:10004 15 保存并关闭
LANG:10000 44 Änderungen übernehmen und Panel schließen
LANG:10027 64 Принять изменения и закрыть панель

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  619 363 722 391

T 
4
LANG:10001 2 OK
LANG:10004 6 确定
LANG:10000 2 OK
LANG:10027 2 OK
"main()
{

  if ( !getUserPermission(4) )
  {
    ChildPanelOnCentralModal(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),
      makeDynString(getCatStr(\"general\",\"permission\")));
    return;
  }
setEventcategories();
PanelOff();
}" 0
 E E E
20 6
"chkFilter"
""
1 10 352 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
7 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  8 315 251 339
1
T 
4
LANG:10001 30 Filter for manual input values
LANG:10004 21 过滤手动输入值
LANG:10000 36 Filter auf manuell zugewiesene Werte
LANG:10027 56 Фильтр.знач.,введенные вручную

0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E E
0 0 0 0 0
1
E E
E"main(int button, bool state)
{
  dyn_string dstempConditionName, dstempMasterNameFromCondition,dstempMasterNameChanged ;
  int i, pos;
  int max=items.lineCount;
  

  if (state)
  {

    items.enabled = FALSE;

    for (i=1; i<= max; i++)
    {
       dyn_anytype da;
       da = items.getLineN(i-1); 
       dstempConditionName[i] = da[1];
       dstempMasterNameFromCondition[i] = da[2];
       dstempMasterNameChanged[i] = da[3];
    }
    items.enabled = TRUE;;

    for ( i= 1; i<= dynlen( dstempConditionName); i++)
    {
      pos = dynContains(  dsConditionName, dstempConditionName[i]);
      dsMasterNameChanged[pos] = dstempMasterNameChanged[i];
    }

    dynClear(dstempConditionName);
    dynClear(dstempMasterNameFromCondition);
    dynClear(dstempMasterNameChanged);

     
    for ( i= 1; i<=dynlen(dsConditionName); i++)
    {
  
      if ( dsMasterNameChanged[i] != \"\"  || dynContains(dsAdditionalConditionName, dsConditionName[i])> 0 )
      {
         dynAppend(dstempConditionName, dsConditionName[i]);
         dynAppend(dstempMasterNameFromCondition, dsMasterNameFromCondition[i]);
         dynAppend(dstempMasterNameChanged, dsMasterNameChanged[i]);
      }
    }
  

/*
    if ( !dynlen( dstempConditionName) > 0)
    {
      CheckButton1.state(0) = FALSE;   
      dstempConditionName= dsConditionName;
      dstempMasterNameFromCondition=dsMasterNameFromCondition;
      dstempMasterNameChanged =dsMasterNameChanged;
      buFilter.visible  = FALSE;
    }
    else
*/
          buFilter.visible  = TRUE;


  }
  else
  {

    buFilter.visible  = FALSE;

    
    dstempConditionName= dsConditionName;
    dstempMasterNameFromCondition=dsMasterNameFromCondition;
    dstempMasterNameChanged =dsMasterNameChanged;
  }

  items.deleteAllLines();

  items.appendLines(dynlen(dstempConditionName), \"ConditionName\", dstempConditionName, \"MasterNameFromCondition\", dstempMasterNameFromCondition, \"MasterNameChanged\", dstempMasterNameChanged);

  

}" 0
13 7
"buGenerate"
""
1 906 313 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
7 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  904 313 932 341

T 
4
LANG:10001 3 ...
LANG:10004 3 ...
LANG:10000 3 ...
LANG:10027 3 ...
"main()
{
   int i, j, k;
   int max = items.lineCount;
   dyn_string dsConditionName, dsMasterNameFromCondition,dsMasterNameChanged ;
   string server = $server, sMasterDP, sMasterDPType, sPrefix;
  dyn_dyn_int ddiType;
  dyn_dyn_string ddsElement;
  int iType;
  dyn_string dsFloatAlerts, dsBoolAlerts, dsAlertText;
  dyn_int diRange;
  dyn_string dsAlert, dsAlertType, ds;
  dyn_int  dsType;
  int pos;
  dyn_string dsDpTypes = dpTypes();
  dyn_anytype da;
  bool bOK;
  int iError;
  dyn_float df;
  int maxPrior;
  dyn_string dsdummy1, dsdummy2, dsPriority;              // sort alertclass ascending of _prior !!!!
  dyn_int didummy; 
  dyn_string dsAlertLangText;
  int iGoodRange;
  int min;
  dyn_int diAlertValues;


  if ( !getUserPermission(4) )
  {
    ChildPanelOnCentralModal(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),
      makeDynString(getCatStr(\"general\",\"permission\")));
    return;
  }
 
  items.enabled = FALSE;

	buFilter.enabled	= FALSE;
	ok.enabled	= FALSE;
	cancel.enabled	= FALSE;
	modify.enabled	= FALSE;
	buGenerate.enabled	= FALSE;
  chkFilter.enabled	= FALSE;
  
  if (gFirst)
  ChildPanelOnCentralModalReturn(\"para/opc_ae_severity_table.pnl\",  
                             getCatStr(\"STD_Symbols\", \"Übersicht\"),  
                             makeDynString(\"$server:\"+server), df, ds);  
 
  gFirst = FALSE;  
  
  generateAlertClass(server,  dsAlertType, dsType);  //dsAlertType = Namen der Conditions
                                                     //dsType      = zugehörige Typen (VT_FLOAT usw.)

  make_Prefix_SimpleEventNotifications(server, dsDpTypes);
  
  dpGet(   server + \".Prefix:_online.._value\", sPrefix);
  
   for (i=1; i<= max; i++)                  //alle Zeile durchlaufen
   {
      da = items.getLineN(i-1);             //da[1]=Wert aus Spalte 1, da[2]=Wert aus Spalte 2, usw.
      dsConditionName[i]           = da[1];
      dsMasterNameFromCondition[i] = da[2];
      dsMasterNameChanged[i]       = da[3];
   }
   items.enabled = TRUE;;

   
   for (k=1; k<= max; k++)    //loop nur für conditions (und nicht für simple events)
   {//#90
      //Nimm den überparametrierten Wert, falls es den gibt
      if (dsMasterNameChanged[k] == \"\")   
         sMasterDP = dsMasterNameFromCondition[k];
      else
         sMasterDP = dsMasterNameChanged[k];
    

    if (!dpExists(sMasterDP))  // generate _AE type and masterdp
    {//#100
      sMasterDPType = sMasterDP;

      pos = dynContains( dsAlertType, dsConditionName[k]);
      if (pos > 0)
        iType = dsType[pos];
      else  
        iType = DPEL_FLOAT;
      

      strreplace(sMasterDPType, \"_mp_\", \"\");
      ddsElement[1][1]= sMasterDPType;
      ddiType[1][1] = iType;
      
      
      if (dynContains( dsDpTypes,  sMasterDPType) <= 0)      // create only if not exists !!
          dpTypeCreate( ddsElement, ddiType);
      dpCreate(sMasterDP, sMasterDPType);
      dpCreate(\"_dt_\"+sMasterDPType, \"_DynamicDatapoints\");
      dpSet(\"_dt_\"+sMasterDPType+\".DynamicAttribute:_original.._value\", makeDynString(\"_da_none\"),  //fixed Powerconfig
            \"_dt_\"+sMasterDPType+\".Leaf:_original.._value\",makeDynString(sMasterDP+\".:_alert_hdl\"));

 
      dynClear(dsAlertText);
      dynClear(dsAlertLangText);
      dynClear(diRange);
      dynClear(dsPriority);
      dynClear(dsAlert);
      dynClear(dsdummy2);
      dynClear(didummy);
      dynClear(da);

      if (  iType == DPEL_BOOL )
      {//#110
   
           getSubconditionNames( server, dsConditionName[k], dsAlertLangText, FALSE);
           getSubconditionNames( server, dsConditionName[k], dsAlertText);
                     
           generateAlert(sMasterDP+\".\", makeDynString(\"\",dsAlertLangText[1]), makeDynFloat(), makeDynString(sPrefix+dsAlertText[1]+\".\"));
      }   
      else
      {//#110 else
           getSubconditionNames( server, dsConditionName[k], dsAlertLangText, FALSE);
           getSubconditionNames( server, dsConditionName[k], dsAlertText);


        // check if alerts are in correct order    
        for ( j= 1; j<= dynlen (    dsAlertText) ; j++)
        {      
           dsAlert[j] = sPrefix+dsAlertText[j] +\".:_online.._value\";
        }
        dpGet(dsAlert, da);
        diAlertValues = da;
   
        
        for ( j= 1; j<= dynlen (    dsAlertText) ; j++)
        {      
           dsAlert[j] = sPrefix+dsAlertText[j] +\".:_alert_class.._prior\";
        }
        dpGet(dsAlert, da);
        didummy = da;                                           // char -> int


        for ( i= 1; i<= dynlen( didummy); i++)                  // int -> 000, 001, 002,.
        {
          if ( diAlertValues[i] == 2)
             didummy[i] = -didummy[i];
  
          sprintf(dsPriority[i], \"%04d\", didummy[i]);
          dsdummy2[i] = \" \";                                    // dummy because umDynDynSort uses 5 dyns
        }


        umDynDynSort_CompatibilityFor2_12_1(dsPriority, dsAlert, dsAlertLangText, dsAlertText, dsdummy2);  // sort

//        DebugN( didummy, dsPriority, dsAlert, dsAlertLangText, dsAlertText);


        didummy = dsPriority;                                   //  000 -> 0
        //da = didummy;                                           // int -> char
        
         
        maxPrior = didummy[1];
        for ( j= 2; j<= dynlen (    dsAlertText) ; j++)
        {      
            if ( didummy[j] <= maxPrior)
            {
  
              string sTemp;
              int iClass;
              string errorText =  getCatStr(\"para\", \"erroropcaeserverity\");
                    
              for ( i= 1; i<= dynlen( dsAlert ); i++)
              {
                iClass = didummy[i];
                sTemp += iClass+\" - \"+sPrefix+dsAlertText[i];
                if ( i < dynlen( dsAlert))
                  sTemp += \"|\";
              }
              
              strreplace(errorText, \"§\", sMasterDP);
              ChildPanelOnCentralModal( \"vision/MessageInfoList\",
                                      getCatStr( \"para\", \"information\"),
                                      makeDynString(errorText, sTemp, getCatStr( \"para\", \"OK\" )  ));
              
              dpDelete(sMasterDP);
              gFirst = TRUE;
              
              	buFilter.enabled	= TRUE;
							  ok.enabled	= TRUE;
								cancel.enabled	= TRUE;
								modify.enabled	= TRUE;
								buGenerate.enabled	= TRUE;
                chkFilter.enabled	= TRUE;
             
              return;
              
               
            }
         }
        

 
        iGoodRange = -1;
        for ( j= 1; j<= dynlen (    dsAlertText) ; j++)
        {      
           if ( didummy[j] > 0 && iGoodRange < 0)
              iGoodRange = j;
           dsAlert[j] = sPrefix+dsAlertText[j] +\".\";
           diRange[j] = j-1;  
                
        }
        dynInsertAt(dsAlertLangText, \"\", iGoodRange);
        dynInsertAt(dsAlert, \"\", iGoodRange);
        dynAppend( diRange, dynlen( diRange)+1);
        min = diRange[1];
        dynInsertAt(diRange, (min -1),1);
                

        // set range from - to 0 to max
        i = 1;  // start with 1
        for ( j= iGoodRange+1; j<= dynlen (    diRange) ; j++)
        {      
            diRange[j] = i;        
            i++;        
        }
        i= -1;
        for ( j= iGoodRange; j>0; j--)
        {      
            diRange[j] = i;        
            i--;
        }



         
        generateAlert(sMasterDP+\".\",dsAlertLangText, diRange, dsAlert);


        ds = dpNames(\"*\", sMasterDPType);
        
        
        
        dpCopyBufferClear();
        
        for (j= 1; j<= dynlen( ds); j++)
        {
          if ( dpSubStr(ds[j], DPSUB_SYS_DP) ==  dpSubStr(sMasterDP, DPSUB_SYS_DP))
            continue;
        
          dpDeactivateAlert(ds[j]+\".\", bOK);
          dpCopyConfig(sMasterDP+\".\", ds[j]+\".\", makeDynString(\"_alert_hdl\"), iError);
        }
     }//#110 else
   }//#100          
 }//#90 for
 
 	buFilter.enabled   = TRUE;
        ok.enabled	   = TRUE;
	cancel.enabled	   = TRUE;
	modify.enabled	   = TRUE;
	buGenerate.enabled = TRUE;
        chkFilter.enabled  = TRUE;

 
 items.deleteAllLines();
 init();
 
}

getSubconditionNames(string server, string condition, dyn_string &subcondition, bool bWithOutSpace = TRUE)
{
  dyn_string dsConditionNames, dsSubConditionNames, dsGeneratedAlertClasses, ds;
  int i;
  dyn_bool db;
  dpGet( server + \".Subconditions.ConditionNames:_online.._value\", dsConditionNames,
         server + \".Subconditions.SubConditionNames:_online.._value\", dsSubConditionNames);
  db= patternMatch(condition, dsConditionNames);
  for ( i= dynlen(db); i>0; i--)  // add revert
    if (db[i])
      dynAppend( ds, dsSubConditionNames[i]);

 if (bWithOutSpace)
	 for ( i= 1; i<= dynlen(ds); i++)   // IM 54972
	 {
	    strreplace(ds[i], \" \", \"_\");
	 }

  dynUnique(ds);


  for ( i= dynlen(ds); i>0; i--)
       dynAppend( subcondition, ds[i]);
       

}
//-----------------------------------------------------------------------------
//Erzeuge für jede Subcondition eine _alert_class.
//[IN]  server ... z.B. PVSS
//[OUT] dsAlerts ... Namen der Conditions
//[OUT] dsType   ... korrespondierende Typen in dsAlerts
//Für alle simpleEvents wird eine _alert_class erzeugt, und zwar
//prefix+\"SimpleEventNotification\"
//-----------------------------------------------------------------------------
generateAlertClass(string server, dyn_string &dsAlerts, dyn_int &dsType)
{
  dyn_string dsConditionNames, dsSubConditionNames, dsGeneratedAlertClasses;
  dyn_string dsSubEventCategoryNames, dsEventCategoryNames, dsEventAttributeTypes;
 
  int i, pos;
  string sSearch;
  string sPrefix;
  char c;
  int answer;
  string sType;
 
   
 
 
  dpGet( server + \".Subconditions.ConditionNames:_online.._value\", dsConditionNames,
         server + \".Subconditions.SubConditionNames:_online.._value\", dsSubConditionNames,
         server + \".Prefix:_online.._value\", sPrefix,
         server + \".Subconditions.EventCategoryNames:_online.._value\", dsSubEventCategoryNames,
         // ->
         server + \".EventAttributes.EventCategoryNames:_online.._value\",  dsEventCategoryNames,
         server + \".EventAttributes.EventAttributeTypes:_online.._value\", dsEventAttributeTypes);
 
  dynUnique( dsConditionNames );      //redundante Namen entfernen
  dynUnique( dsSubConditionNames );

  for (  i = 1; i<= dynlen(dsConditionNames); i++)
  {
     answer = DPEL_FLOAT;
     pos = dynContains (dsEventCategoryNames, dsSubEventCategoryNames[i]);
     if ( pos > 0)
     {
        if ( dynlen(dsEventAttributeTypes) >= pos)
          sType = dsEventAttributeTypes[pos];
        else
          sType = \"\";
        
        switch (sType)
        {
              case \"VT_I2\":   answer = DPEL_INT  ; break; // short
              case \"VT_I4\":   answer = DPEL_INT  ; break; // long
              case \"VT_R4\":   answer = DPEL_FLOAT; break; // float
              case \"VT_R8\":   answer = DPEL_FLOAT; break; // double
              case \"VT_BOOL\": answer = DPEL_BOOL ; break; // bool
              case \"VT_UI2\":  answer = DPEL_UINT ; break; // unsigned short
              case \"VT_UI4\":  answer = DPEL_UINT ; break; // unsigned long
              default:        answer = DPEL_FLOAT; break; // other
       }
     }
    dsType[i]   = answer;
    dsAlerts[i] = dsConditionNames[i];

  }

  for ( i= 1; i<= dynlen(dsSubConditionNames); i++)
  {
     strreplace(dsSubConditionNames[i], \" \", \"_\");
     dsSubConditionNames[i] = sPrefix + dsSubConditionNames[i];
  }

  for ( i= 1; i<= dynlen( dsSubConditionNames); i++)
  {
    c ++;
    if (c == \"\\250\")
      c == \"\\001\";
    sSearch = dsSubConditionNames[i];
    if (!dpExists(sSearch))
    {
      dpCreate(sSearch, \"_AlertClass\");
      dpSet(sSearch+\".:_alert_class.._type\", DPCONFIG_ALERT_CLASS,
            sSearch+\".:_alert_class.._prior\",  c);
      
      dynAppend( dsGeneratedAlertClasses, sSearch);

    }
  }


}






generateAlert(string dpe, dyn_langString alertText, dyn_float range, dyn_string alertClass)
{
  int iType;
  dyn_string dsAttribute; 
  dyn_anytype daValues;
  int i;
  dyn_string dsDPE; 
  dyn_anytype da;
  dyn_langString dsalertText = alertText;
  dyn_string dsalertClass = alertClass;
  dyn_int di;
  int pos;
  dyn_errClass err;   
  int emptyPos;
  string sTemp;
  int max;
    
    //  DebugN( \"generateAlert\",dpe, alertText,range ,alertClass);
  

  // sort alertClasses
/*  
  for ( i= 1; i<= dynlen(alertClass); i++)
  {
    sTemp = alertClass[i];
    if ( alertClass[i] != \"\")
      dynAppend( dsDPE ,sTemp+\":_alert_class.._prior\");
    else
      emptyPos = i;
  }
  dpGet(dsDPE, da);
    
  di = da;
  
  if ( emptyPos > 0)
      dynInsertAt(di,-1,emptyPos);        // dummy Element  
    
  for ( i= dynlen ( di);i>0;  i--)
  {  
   max = dynMax(di);
   pos = dynContains(di,max);
   dsalertClass[i] = alertClass[pos];
   dsalertText[i] = alertText[pos];
   dynRemove(alertClass  , pos);
   dynRemove(alertText , pos);
   dynRemove(di, pos);
  }

  alertText = dsalertText;
  alertClass = dsalertClass;
*/  
  // sort end

  iType = dpElementType(dpe);
  if (iType == DPEL_BOOL)
  {
     dpSetWait(dpe + \":_alert_hdl.._type\",12);
     dpSetWait(dpe + \":_alert_hdl.._class\",alertClass[1],
                dpe + \":_alert_hdl.._text0\",alertText[1],
                dpe + \":_alert_hdl.._text1\",alertText[2],
                dpe + \":_alert_hdl.._orig_hdl\",TRUE,
                dpe + \":_alert_hdl.._active\",TRUE);
    err = getLastError();
    if (dynlen(err) != 0)
    {
      throwError(err);
      errorDialog(err);
       
    }

    return;
  }
  else if (iType == DPEL_FLOAT || iType == DPEL_INT)
  {
     dpSetWait(dpe + \":_alert_hdl.._type\",13);

     dynAppend( dsAttribute, dpe + \":_alert_hdl.._orig_hdl\");       dynAppend( daValues, TRUE);

     for (i=1; i<= dynlen(alertText); i++)
     {
       dynAppend( dsAttribute, dpe + \":_alert_hdl.\"+i+\"._type\");       dynAppend( daValues, 4);
      if ( i == dynlen(alertText) )   // maximum       
      {
        dynAppend( dsAttribute, dpe + \":_alert_hdl.\"+i+\"._l_limit\");     dynAppend(daValues, range[i]);
        dynAppend( dsAttribute, dpe + \":_alert_hdl.\"+i+\"._l_incl\");       dynAppend(daValues, FALSE);
       }
       else
      {
        dynAppend( dsAttribute, dpe + \":_alert_hdl.\"+i+\"._u_limit\");    dynAppend(daValues, range[i+1]);
        dynAppend( dsAttribute, dpe + \":_alert_hdl.\"+i+\"._l_limit\");    dynAppend(daValues, range[i]);
        dynAppend( dsAttribute, dpe + \":_alert_hdl.\"+i+\"._l_incl\");       dynAppend(daValues, FALSE);
        dynAppend( dsAttribute, dpe + \":_alert_hdl.\"+i+\"._u_incl\");       dynAppend(daValues, TRUE);
       }
       dynAppend( dsAttribute, dpe + \":_alert_hdl.\"+i+\"._text\");           dynAppend( daValues, alertText[i]);
        dynAppend( dsAttribute, dpe + \":_alert_hdl.\"+i+\"._class\");         dynAppend( daValues, alertClass[i]);         
     }
    dynAppend( dsAttribute, dpe + \":_alert_hdl.._orig_hdl\");         dynAppend( daValues, 0);         
    dynAppend( dsAttribute, dpe + \":_alert_hdl.._active\");           dynAppend( daValues, TRUE);         
 
    
//for ( i= 1; i<= dynlen( dsAttribute); i++)
//  DebugN(i, dsAttribute[i], daValues[i]);

    dpSetWait(dsAttribute, daValues);
//    dpSetWait(  dpe + \":_alert_hdl.._active\",TRUE);

    err = getLastError();
    if (dynlen(err) != 0)
    {
      throwError(err);
      errorDialog(err);
       
    }
  }
}


///////////////////////////////////////////////////////////////////////////
// sorting dyn_strings parallel
///////////////////////////////////////////////////////////////////////////
umDynDynSort_CompatibilityFor2_12_1(dyn_string &ds1, dyn_string &ds2, dyn_string &ds3,
             dyn_string &ds4, dyn_string &ds5)
{
  int        i;
  dyn_string dsSort, dsSplit;

  if ( dynlen(ds1) < 1 )
  {
    return;
  }

  for ( i = 1; i <= dynlen(ds1); i++ )
  {
    dsSort[i] = ds1[i]+\"§\"+ds2[i]+\"§\"+ds3[i]+\"§\"+ds4[i]+\"§\"+ds5[i];
  }
  dynSortAsc(dsSort);

  for ( i = 1; i <= dynlen(dsSort); i++ )
  {
     if (substr(dsSort[i],0,1) == \"-\")    // revert because negative
     {
       string sTemp = dsSort[i];         // get pos
       dynRemove( dsSort, i);            // delete
       dynInsertAt(dsSort, sTemp, 1);    // add at first position
     }
  }

  for ( i = 1; i <= dynlen(dsSort); i++ )
  {
    dsSplit = strsplit(dsSort[i],\"§\");
    ds1[i] = dsSplit[1];
    ds2[i] = dsSplit[2];
    ds3[i] = dsSplit[3];
    ds4[i] = dsSplit[4];
    ds5[i] = dsSplit[5];
  }
}

//-----------------------------------------------------------------------------
//wvlasitz: WI81498, Übernahme GASUNIE -> Head
//Für den Fall, dass im Konfigfile kein Datenpunkt für simpleEvents eingetragen
//ist, wird jener Datenpunkt verwendet, der hier erzeugt wird.
//Dieser Defaultdatenpunkttyp ist hard coded und lautet
//AE_SimpleEventNotifications
//-----------------------------------------------------------------------------
make_Prefix_SimpleEventNotifications(string server, dyn_string dsDpTypes)
{
  string         sPrefix;        //z.B. AE_
  string         sMasterDPType;  //z.B. _mp_AE_SimpleEventsDp
  string         sMasterDP;      //z.B. AE_SimpleEventsDp
  dyn_string     dsAlertText;
  dyn_string     dsAlertLangText; 
  dyn_int        diRange; 
  dyn_string     dsPriority;     // sort alertclass ascending of _prior !!!!    
  dyn_string     dsAlert;  
  dyn_string     dsdummy2;       // sort alertclass ascending of _prior !!!!
  dyn_int        didummy;
  dyn_anytype    da;  
  int            iType;
  dyn_dyn_string ddsElement;
  dyn_dyn_int    ddiType;
      
  dpGet(   server + \".Prefix:_online.._value\", sPrefix);

  sMasterDP = \"_mp_\" + sPrefix + \"SimpleEventNotification\";  //sMasterDP;  
  sMasterDPType = sPrefix + \"SimpleEventNotification\";
    
  if (!dpExists(sMasterDP))
  {
      iType = DPEL_STRING;  //alle simple events sind strings

      ddsElement[1][1]= sMasterDPType;
      ddiType[1][1]   = iType;

      if (dynContains( dsDpTypes,  sMasterDPType) <= 0)      // create it only if not exists !!
      {
          dpTypeCreate( ddsElement, ddiType);
      }

/***********      
      dpCreate(sMasterDP, sMasterDPType);
      
      dpCreate(\"_dt_\" + sMasterDPType,  \"_DynamicDatapoints\");
      dpSet(   \"_dt_\" + sMasterDPType + \".DynamicAttribute:_original.._value\", makeDynString(\"_da_none\"),  //fixed Powerconfig
               \"_dt_\" + sMasterDPType + \".Leaf:_original.._value\",             makeDynString(sMasterDP + \".:_alert_hdl\"));

      dynClear(dsAlertText);
      dynClear(dsAlertLangText);
      dynClear(diRange);
      dynClear(dsPriority);
      dynClear(dsAlert);
      dynClear(dsdummy2);
      dynClear(didummy);
      dynClear(da);

      dsAlertLangText = \"SimpleEventNotification\";
      dsAlertText     = dsAlertLangText;
      generateAlert(sMasterDP+\".\", makeDynString(\"\",dsAlertLangText[1]), makeDynFloat(), makeDynString(sPrefix+dsAlertText[1]+\".\"));
************/      
     
  }

}
     
" 0
 E E E
13 10
"buFilter"
""
1 110 313 E E E 1 E 0 E N "_ButtonText" E N "_Button" E E
 E E
9 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  258 313 361 341

T 
4
LANG:10001 7 Add DPs
LANG:10004 8 添加DP
LANG:10000 15 DPs hinzufügen
LANG:10027 19 Добавить DP
"main()
{
  dyn_string ds;
  dyn_float df;
  dyn_string dsValues;
  int i, max;
  dyn_string dstempConditionName, dstempMasterNameFromCondition,dstempMasterNameChanged ;
  string s, s2;
  

  items.enabled = FALSE;
  for (i=1; i<= max; i++)
  {
     dyn_anytype da;
     da = items.getLineN(i-1); 
     dstempConditionName[i] = da[1];
     dstempMasterNameChanged[i] = da[3];
     
  }
  items.enabled = TRUE;
  
  dsValues = dsConditionName;
  
  for ( i= 1; i<= dynlen( dstempConditionName); i++)
  {
    pos = dynContains(  dsValues, dstempConditionName[i]);
    if ( pos > 0 && dstempMasterNameChanged[i] != \"\")
       dynRemove(dsValues, pos);
  }

  // only empty element not in table
    
  s = dsValues;   
  s2 = dsAdditionalConditionName;




  ChildPanelOnCentralModalReturn(\"para/opc_ae_server_condition_append.pnl\",  
                             getCatStr(\"para\", \"Attribute_name\"),  
                             makeDynString(\"$server:\"+$server, \"$value:\"+s, \"$append:\"+s2), df, ds);  


  if ( dynlen( df) > 0 && df[1] == 1)
  {
    dsAdditionalConditionName = ds;
     
    for ( i= 1; i<=dynlen(dsConditionName); i++)
    {
      if ( dsMasterNameChanged[i] != \"\"  || dynContains(dsAdditionalConditionName, dsConditionName[i])> 0 )
      {
         dynAppend(dstempConditionName, dsConditionName[i]);
         dynAppend(dstempMasterNameFromCondition, dsMasterNameFromCondition[i]);
         dynAppend(dstempMasterNameChanged, dsMasterNameChanged[i]);
      }
    }
    items.deleteAllLines();
    items.appendLines(dynlen(dstempConditionName), \"ConditionName\", dstempConditionName, \"MasterNameFromCondition\", dstempMasterNameFromCondition, \"MasterNameChanged\", dstempMasterNameChanged);
  }
}

" 0
 E E E
1 13 0 "" 0
0
0
LAYER, 1 
4
LANG:10001 6 Layer2
LANG:10004 6 Layer2
LANG:10000 6 Layer2
LANG:10027 6 Layer2
0
LAYER, 2 
4
LANG:10001 6 Layer3
LANG:10004 6 Layer3
LANG:10000 6 Layer3
LANG:10027 6 Layer3
2 12
"PRIMITIVE_TEXT2"
""
1 893 318 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
11 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"sizePolicy" "Fixed Fixed"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 622 318 893 333
0 2 2 "0s" 0 0 0 194 0 0  893 318 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 4
LANG:10001 25 Generate shown master DPs
LANG:10004 20 生成显示的主DP
LANG:10000 31 Generiere angezeigte Master-DPs
LANG:10027 76 Создать показываемые мастер-точки данных
0
LAYER, 3 
4
LANG:10001 6 Layer4
LANG:10004 6 Layer4
LANG:10000 6 Layer4
LANG:10027 6 Layer4
0
LAYER, 4 
4
LANG:10001 6 Layer5
LANG:10004 6 Layer5
LANG:10000 6 Layer5
LANG:10027 6 Layer5
0
LAYER, 5 
4
LANG:10001 6 Layer6
LANG:10004 6 Layer6
LANG:10000 6 Layer6
LANG:10027 6 Layer6
0
LAYER, 6 
4
LANG:10001 6 Layer7
LANG:10004 6 Layer7
LANG:10000 6 Layer7
LANG:10027 6 Layer7
0
LAYER, 7 
4
LANG:10001 6 Layer8
LANG:10004 6 Layer8
LANG:10000 6 Layer8
LANG:10027 6 Layer8
0
3 0 "PANEL_REF0" -1
"" ""
"objects_parts/STD_OBJECTS/ButtonBarBackground.pnl" 0 425 T 12 1.913827655310621 0 1 -10 -70
0
0

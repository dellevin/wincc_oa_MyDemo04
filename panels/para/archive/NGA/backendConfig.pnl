V 14
4
LANG:10001 23 Backends configurations
LANG:10004 13 Backend配置
LANG:10000 23 Backends configurations
LANG:10027 23 Backends configurations
PANEL,-1 -1 1233 553 N "_3DFace" 0
"void initializeEventSinks()
{
  for (int i = 0; i < PagesTab.registerCount; i++)
  {
    // this event needed on all tabs
    if ( uiConnect(\"event_setPanelDirty_Callback\", PagesTab.panelAt(i), \"event_setPanelDirty\") != 0 )
      throwError(makeError(\"\", PRIO_SEVERE, ERR_CONTROL, 0, \"uiConnect failed for panel \" + PagesTab.panelAt(i)));

    if ( i == 0 )
    {
      // these events only needed on first tab
      if ( uiConnect(\"event_activateBackend_Callback\", PagesTab.panelAt(i), \"event_activateBackend\") != 0 )
        throwError(makeError(\"\", PRIO_SEVERE, ERR_CONTROL, 0, \"uiConnect failed for panel \" + PagesTab.panelAt(i)));

      if ( uiConnect(\"event_setBackendDisplayName_Callback\", PagesTab.panelAt(i), \"event_setBackendDisplayName\") != 0 )
        throwError(makeError(\"\", PRIO_SEVERE, ERR_CONTROL, 0, \"uiConnect failed for panel \" + PagesTab.panelAt(i)));

      if ( uiConnect(\"event_passwordChangedCallback\", PagesTab.panelAt(i), \"event_passwordChanged\") != 0 )
        throwError(makeError(\"\", PRIO_SEVERE, ERR_CONTROL, 0, \"uiConnect failed for panel \" + PagesTab.panelAt(i)));

      if ( uiConnect(\"event_changeProfile_Callback\", PagesTab.panelAt(i), \"event_changeProfile\") != 0 )
        throwError(makeError(\"\", PRIO_SEVERE, ERR_CONTROL, 0, \"uiConnect failed for panel \" + PagesTab.panelAt(i)));

      if ( uiConnect(\"event_backendProcessControl_Callback\", PagesTab.panelAt(i), \"event_backendProcessControl\") != 0 )
        throwError(makeError(\"\", PRIO_SEVERE, ERR_CONTROL, 0, \"uiConnect failed for panel \" + PagesTab.panelAt(i)));

      if ( uiConnect(\"event_databaseProcessControl_Callback\", PagesTab.panelAt(i), \"event_databaseProcessControl\") != 0 )
        throwError(makeError(\"\", PRIO_SEVERE, ERR_CONTROL, 0, \"uiConnect failed for panel \" + PagesTab.panelAt(i)));
    }
    else if ( i == 1 )
    {
      // this event only needed on second tab
      if ( uiConnect(\"event_databaseProcessManagement_Callback\", PagesTab.panelAt(i), \"event_databaseProcessManagement\") != 0 )
        throwError(makeError(\"\", PRIO_SEVERE, ERR_CONTROL, 0, \"uiConnect failed for panel \" + PagesTab.panelAt(i)));

      if ( uiConnect(\"event_databaseDeleteSpecificCfg_Callback\", PagesTab.panelAt(i), \"event_databaseDeleteSpecificCfg\") != 0 )
        throwError(makeError(\"\", PRIO_SEVERE, ERR_CONTROL, 0, \"uiConnect failed for panel \" + PagesTab.panelAt(i)));
    }
  }
}

initializeStatusUpdater()
{
  dpQueryConnectSingle(\"statusMonitorCB\",true, \"\", \"SELECT '_online.._value' FROM '\" + backends_IDpNamePrefix + \"*.monitor.*'\");
  dpQueryConnectSingle(\"statusAllCB\", true, \"\", \"SELECT '_online.._value' FROM '\" + backends_IDpNamePrefix + \"*'\");
  dpConnect(\"frontendStateCB\", nga_getINTLPrefix() + \"Connections.Data.ManNums\",
                               nga_getINTLPrefix() + \"Connections_2.Data.ManNums\");

  refreshBackendTable();
  refreshMonitor();
}

void initializeShapes()
{
  PagesTab.styleSheet(\"QTabBar::tab { font-size:10pt; height: 26px }\");
}

void initializeDebuggingShapes()
{
  bool debugMode = isDbgFlag(NGAPANEL);
  DumpAllBackendsButton.visible = debugMode;
  DumpCurrentBackendButton.visible = debugMode;

  // part of DP name as our ID ... - display it for debugging purposes
  BackendsTable.namedColumnVisibility(\"BackendNameColumn\", debugMode);

  if (debugMode)
  {
    int idColumnWdith = BackendsTable.namedColumnWidth(\"BackendNameColumn\");
    int nameColumnWidth = BackendsTable.namedColumnWidth(\"BackendDisplayNameColumn\");

    BackendsTable.namedColumnWidth(\"BackendDisplayNameColumn\", nameColumnWidth - idColumnWdith);
  }
}

void initializeBackendsTable()
{
  BackendsTable.alternatingRowColors(makeDynString(\"WF_TableAlternatingRowColor_1\", \"WF_TableAlternatingRowColor_2\"));
  BackendsTable.tableMode(TABLE_SELECT_BROWSE);
  BackendsTable.selectByClick(TABLE_SELECT_LINE);
  BackendsTable.selectColors(\"SiemensNaturalBlueLight\", \"_Window\");
  BackendsTable.columnStretchable(2, TRUE);
  BackendsTable.styleSheet(\"TableQT QHeaderView {qproperty-highlightSections: 'FALSE';} QTableView QHeaderView::section{height: 32px;}\");
  for (int i = 0; i < BackendsTable.columnCount; ++i)
      BackendsTable.columnHeaderAlignment(i, \"AlignVCenter\");
}

void initializeDatabaseSpecificConfigurationsTable()
{
  DatabaseSpecificConfigurationsTable.alternatingRowColors(makeDynString(\"WF_TableAlternatingRowColor_1\", \"WF_TableAlternatingRowColor_2\"));
  DatabaseSpecificConfigurationsTable.tableMode(TABLE_SELECT_BROWSE);
  DatabaseSpecificConfigurationsTable.selectByClick(TABLE_SELECT_LINE);
  DatabaseSpecificConfigurationsTable.selectColors(\"SiemensNaturalBlueLight\", \"_Window\");
  DatabaseSpecificConfigurationsTable.styleSheet(\"TableQT QHeaderView {qproperty-highlightSections: 'FALSE';}\");
}

void initializeDistributedPartnersTabel()
{
  distributedPartnersTabel.alternatingRowColors(makeDynString(\"WF_TableAlternatingRowColor_1\", \"WF_TableAlternatingRowColor_2\"));
  distributedPartnersTabel.tableMode(TABLE_SELECT_BROWSE);
  distributedPartnersTabel.selectByClick(TABLE_SELECT_LINE);
  distributedPartnersTabel.selectColors(\"SiemensNaturalBlueLight\", \"_Window\");
  distributedPartnersTabel.styleSheet(\"TableQT QHeaderView {qproperty-highlightSections: 'FALSE';} QTableView QHeaderView::section{height: 32px;}\");
  distributedPartnersTabel.columnStretchable(2, TRUE);
  for (int i = 0; i < distributedPartnersTabel.columnCount; ++i)
      distributedPartnersTabel.columnHeaderAlignment(i, \"AlignVCenter\");
}

main()
{
  registerDbgFlag(NGAPANEL, \"NGA Panel Trace output\");

  initializeEventSinks();
  initializeStatusUpdater();

  initializeShapes();
  initializeDebuggingShapes();
  initializeBackendsTable();
  initializeDatabaseSpecificConfigurationsTable();
  initializeDistributedPartnersTabel();

  populateProfilesComboBox();
  populateExecutableComboBox();

  populateBackendsTable(NgaBackendConfigProvider::selectedBackendName);
  startThread(\"refreshManager\");  // should be started after backend table is initialized
}
" 0
 E E E E 1 -1 -1 0  640 280
""0  1
E "#uses \"classes/nga/NgaSegmentConfigProvider\"
#uses \"classes/text/StringUtility\"
#uses \"classes/nga/NgaBackendConfigProvider\"
#uses \"classes/nga/NgaProcessControl\"

shared_ptr<NgaBackendConfigProvider> g_backendConfigProvider = new NgaBackendConfigProvider();
bool g_isDirty = false;
mapping profileNames;
bool initCompleted = FALSE;
string selectedBackenName;
public int gTcpFileDescriptor2;  // needed for pmon functionality
public string gTcpFifo;  // needed for pmon functionality
public dyn_string gParams;  // needed for pmon functionality
public int backendLineSelection = 0;

int panelSave()
{
  string errorMessage = g_backendConfigProvider.save();
  NgaBackendInfo backendInfo = g_backendConfigProvider.getBackendByName(getSelectedBackendName());

  if (errorMessage == \"\")
  {
    notificationBar_newMsg(
        \"NGA\",
        \"backend_saved\",
        NOTIFICATION_BAR_PRIO_INFO,
        \"\",
        makeDynAnytype(),
        false,
        notificationBar_getUserDpName(),
        true);

    startThread(\"enableShapes\");
    setPanelDirty(false, false);
    g_backendConfigProvider = new NgaBackendConfigProvider();  // refresh backend data
    populateBackendsTable(selectedBackenName);
    _refreshBackendTable();
    refreshBackendStatusDiagram(backendInfo.zmqAddress);  // refresh status diagram
    return WF_PANEL_SAVE_SAVED;
  }

  // save failed - display error in a message box since notificationBar_newMsg()
  // requires msg catalog and also the error text maybe too long
  dyn_string strings;
  dyn_float floats;
  wf_dialogs_open(WF_DIALOGS_PANEL_TYPE_OK, \"Info\", errorMessage, strings, floats);

  return WF_PANEL_SAVE_NOTHING_SAVE;
}

int isPanelChanged()
{
  if (g_isDirty)
    return WF_PANEL_CHANGED;

  return WF_PANEL_NO_CHANGE;
}

bool getPanelDirty()
{
  return g_isDirty;
}

event_activateBackend_Callback(bool activate)
{
  setPanelDirty(true);
}

event_setPanelDirty_Callback(bool dirty, bool force = FALSE)
{
  if ( !initCompleted )
    return;

  const string name = NgaBackendConfigProvider::selectedBackendName;
  if ( !force && (name.endsWith(\"_2\") || name.endsWith(\"_R\")) )
  {
    dyn_string strings;
    dyn_float floats;
    string displayName = name;
    if ( displayName.endsWith(\"_R\") ||  displayName.endsWith(\"_R_2\") )
      displayName.remove(name.lastIndexOf(\"_R\"), name.length());
    else
      displayName.remove(name.lastIndexOf(\"_2\"), name.length());

    NgaBackendInfo backendMsgInfo = getSelectedBackendByName(displayName);
    wf_dialogs_open(WF_DIALOGS_PANEL_TYPE_OK, \"Info\", \"The setting can be changed only from non-redundant Backend: \" + backendMsgInfo.displayName, strings, floats);
    return;
  }

  setPanelDirty(dirty, true, name);
}

event_setBackendDisplayName_Callback()
{
  string name = getSelectedBackendName();

  NgaBackendInfo backendInfo = getSelectedBackendByName(name);

  langString originalValue = backendInfo.displayName;
  langString backendDisplayName = backendInfo.displayName;

  if (langEditor(backendDisplayName) == 0)
  {
    bool changed = StringUtility::compareLangString(originalValue, backendDisplayName) != 0;

    if (changed)
    {
      backendInfo.displayName = backendDisplayName;
      g_backendConfigProvider.update(name, backendInfo);

      BackendDisplayNameTextBox.text = (string)backendInfo.displayName;
      BackendsTable.cellValueRC(BackendsTable.selectLineN, \"BackendDisplayNameColumn\", (string)backendInfo.displayName);

      setPanelDirty(true);
    }
  }
}

//--------------------------------------------------------------------------------
/**
 * @brief The function which sets the database logging password, public and private keys.
**/
event_passwordChangedCallback()
{
  NgaBackendInfo backendInfo = getSelectedBackendByName();
  dyn_float returnFloat;
  dyn_string returnString;
  ChildPanelOnCentralModalReturn(\"para/archive/NGA/objects/passwordSettings.pnl\",
                                 getCatStr(\"NGA\", \"changePassword\"),
                                 makeDynString(\"$label:\" + getCatStr(\"NGA\", \"changePasswordLabel\"),
                                               \"$backend:\" + backendInfo.name,
                                               \"$publicKey:\" + backendInfo.dbPublicKey,
                                               \"$privateKey:\" + backendInfo.dbPrivateKey),
                                 returnFloat, returnString);

  if ( dynlen(returnString) < 3 )
    return;

  backendInfo.dbUserPasswordClearText = returnString[1];
  backendInfo.dbPublicKey = returnString[2];
  backendInfo.dbPrivateKey = returnString[3];
  g_backendConfigProvider.updateDatabasePassword(backendInfo.name, backendInfo);
  DatabaseUserPasswordTextBox.text(\"********\");
  setPanelDirty(true);
}

event_databaseProcessManagement_Callback(int button, int state)
{
  NgaBackendInfo backendInfo = getSelectedBackendByName();

  // took code from original panel and adjusted a bit
  bool isReduRemote = patternMatch(\"*_R\", backendInfo.name) || patternMatch(\"*_R_2\", backendInfo.name);

  if (! isReduRemote)
  {
    bool dbProcMgmt = backendInfo.dbProcMgmt;

    if (! nga_toggleSwitchConfirmationWf(\"switch_db_ctrl\", \"backend\", backendInfo.name, dbProcMgmt))
    {
      // restore old state
      DatabaseProcessManagementCheckBox.state(button, !state);
      return;
    }

    backendInfo.dbProcMgmt = !dbProcMgmt;
    setPanelDirty(true);
  }
}

event_backendProcessControl_Callback()
{
  NgaBackendInfo backendInfo = getSelectedBackendByName();
  bool isReduRemote = patternMatch(\"*_R\", backendInfo.name) || patternMatch(\"*_R_2\", backendInfo.name);
  if (isReduRemote)
    return;

  NgaProcessControl procCtrl = new NgaProcessControl(backendInfo.name);
  bool backendProcCtrl = procCtrl.IsBackendProcessControlStarted();

  if (nga_toggleSwitchConfirmationWf(\"switch_backend_ctrl\", \"backend\", backendInfo.name, backendProcCtrl))
  {
    // execute action for main backend
    if ( backendProcCtrl )
      procCtrl.StopBackendProcessControl();
    else
      procCtrl.StartBackendProcessControl();

    string reduBackendName = backendInfo.name;
    if ( reduBackendName.endsWith(\"_2\") )
    {
      reduBackendName.remove(reduBackendName.lastIndexOf(\"_2\"), reduBackendName.length());
      reduBackendName = reduBackendName + \"_R\";
    }
    else
    {
      reduBackendName = reduBackendName + \"_R_2\";
    }

    if ( dpExists(backends_IDpNamePrefix + reduBackendName) )  // some backends might not have \"_R\" DPEs, e.g. PostgreSQL
    {
      NgaProcessControl procCtrl_redu = new NgaProcessControl(reduBackendName);
      backendProcCtrl = procCtrl_redu.IsBackendProcessControlStarted();

      // execute action for redu backend
      if ( backendProcCtrl )
        procCtrl_redu.StopBackendProcessControl();
      else
        procCtrl_redu.StartBackendProcessControl();
    }

    enableShapes();
  }
}

event_databaseProcessControl_Callback()
{
  NgaBackendInfo backendInfo = getSelectedBackendByName();
  NgaProcessControl procCtrl = new NgaProcessControl(backendInfo.name);
  bool databaseProcCtrl = procCtrl.IsDatabaseProcessControlStarted();

  if (nga_toggleSwitchConfirmationWf(\"switch_db_ctrl\", \"backend\", backendInfo.name, databaseProcCtrl))
  {
    if (databaseProcCtrl)
      procCtrl.StopDatabaseProcessControl();
    else
      procCtrl.StartDatabaseProcessControl();

    enableShapes();
  }
}

bool askUserBeforeChangingProfile()
{
  dyn_string resultStrings;
  dyn_float resultFloats;

  wf_dialogs_open(
      WF_DIALOGS_PANEL_TYPE_YES_NO,
      getCatStr(\"general\", \"warning\"),
      getCatStr(\"NGA\", \"backend_changeProfile_msg\"),
      resultStrings,
      resultFloats);

  if (dynlen(resultFloats) != 1) // user clicked [x], see also TFS 79321
    return false;

  return (bool)resultFloats[1];
}

bool g_event_changeProfile_Callback_Running = false;

event_changeProfile_Callback(string newProfileName)
{
  if (g_event_changeProfile_Callback_Running)
    return;

  g_event_changeProfile_Callback_Running = true;
  string profileDBname = profileNames[newProfileName];

  NgaBackendInfo backendInfo = getSelectedBackendByName();
  string previousProfileName = backendInfo.profileName;

  if (previousProfileName == profileDBname)
  {
    g_event_changeProfile_Callback_Running = false;
    return;
  }

  if (askUserBeforeChangingProfile())
  {
    applyProfileData(backendInfo, profileDBname);
    setPanelDirty(true);
    invokeMethod(PagesTab.panelAt(1), \"initSpecificData\");
  }
  else
  {
    // restore previous profile name
    string displayProfileName;
    for (int i = 1; i <= mappinglen(profileNames); i++)
    {
      displayProfileName = mappingGetKey(profileNames, i);
      if ( profileNames[displayProfileName] == previousProfileName )
        break;
    }

    selectTextInComboBox(getShape(\"ProfilesComboBox\"), displayProfileName);
  }

  g_event_changeProfile_Callback_Running = false;
}

bool setPanelDirty(bool isDirty, bool refresh = true, string name = getSelectedBackendName())
{
  g_isDirty = isDirty;

  if (refresh)
  {
    NgaBackendInfo backendInfo = getBackendDataFromShapes(name);
    g_backendConfigProvider.update(backendInfo.name, backendInfo);
    loadBackendData(backendInfo);

    enableShapes();
    updateShapes(backendInfo);
    wf_bottomBar_reload();
  }

  refreshBackendTable();

  return true;
}

string getSelectedBackendName()
{
  return (BackendsTable.selectLineN != -1)
      ? (string)BackendsTable.cellValueRC(BackendsTable.selectLineN, \"BackendNameColumn\")
      : \"\";
}

NgaBackendInfo getSelectedBackendByName(string name = getSelectedBackendName())
{
  if (name != \"\")
    return g_backendConfigProvider.getBackendByName(name);

  throwError(makeError(\"\", PRIO_SEVERE, ERR_CONTROL, 0, \"Backend id not set\"));
  NgaBackendInfo nullBackend;
  return nullBackend;
}

void enableShapes()
{
  string theSelectedBackend = getSelectedBackendName();

  // set text of \"process control\" buttons acording to state
  NgaProcessControl procCtrl = new NgaProcessControl(theSelectedBackend);
  StartOrStopBackendProcessControlButton.text(getCatStr(\"NGA\", procCtrl.IsBackendProcessControlStarted() ? \"backend_stopProcessControl\" : \"backend_startProcessControl\"));
  StartOrStopDatabaseProcessControlButton.text(getCatStr(\"NGA\", procCtrl.IsDatabaseProcessControlStarted() ? \"database_stopProcessControl\" : \"database_startProcessControl\"));

  // backend process control only for out-of-proc (or custom, if customer defines it that way)
  NgaBackendInfo backendInfo = getSelectedBackendByName(theSelectedBackend);
  string address = backendInfo.zmqAddress;
  bool inproc = (strpos(address, \"inproc://\") == 0) ? true : false;
  StartOrStopBackendProcessControlButton.enabled = !inproc;
  ProfilesComboBox.enabled(!nga_backendExists(backendInfo.name));

  // TODO/TBD: pos - 1: we should NOT do it this way
  ngaBackendExecutionType executionType = (ngaBackendExecutionType)(ExecutionTypeComboBox.selectedPos - 1);


  // comm
  if (executionType != ngaBackendExecutionType::BET_IN_PROC)
  {
    RequestedZmqAddressTextBox.editable = true;
    string tooltip = RequestedZmqAddressTextBox.toolTipText;
    if ( !tooltip.endsWith(getCatStr(\"NGA\", \"backendAddressTooltip\")) )
      RequestedZmqAddressTextBox.toolTipText(tooltip + \"<br>\" + getCatStr(\"NGA\", \"backendAddressTooltip\"));
  }
  else
  {
    RequestedZmqAddressTextBox.editable = false;
    string tooltip = RequestedZmqAddressTextBox.toolTipText;
    if ( tooltip.endsWith(getCatStr(\"NGA\", \"backendAddressTooltip\")) )
    {
      tooltip.replace(\"<br>\" + getCatStr(\"NGA\", \"backendAddressTooltip\"), \"\");
      RequestedZmqAddressTextBox.toolTipText(tooltip);
    }
  }

  // buffering level
  ngaBufferingLevel bufferingLevel = (ngaBufferingLevel)(BufferingLevelComboBox.selectedPos - 1);

  bool buffering = (bufferingLevel != ngaBufferingLevel::BUL_DONT_SAVE_BLOCKS);
  bool memoryBuffering = (bufferingLevel == ngaBufferingLevel::BUL_MEMORY_AND_DISK || bufferingLevel == ngaBufferingLevel::BUL_ONLY_TO_MEMORY);
  bool diskBuffering = (bufferingLevel == ngaBufferingLevel::BUL_MEMORY_AND_DISK || bufferingLevel == ngaBufferingLevel::BUL_ONLY_TO_DISK);

  // memory buffering
  BufferingTimeoutTextBox.enabled = buffering && memoryBuffering;
  BufferingBlockSizeTextBox.enabled = buffering && memoryBuffering;
  BufferingMaxTimeTextBox.enabled = buffering && memoryBuffering;
  BufferingMemorySizeTextBox.enabled = buffering && memoryBuffering;

  // disk buffering
  BufferingProcessOldBlocksAtStartupCheckBox.enabled = buffering && diskBuffering;
  BufferingFileLocationSelectionButton.enabled = buffering && diskBuffering;
  BufferingFileLocationTextBox.enabled = buffering && diskBuffering;
  BufferingFilePrefixTextBox.enabled = buffering && diskBuffering;

  // profile options
  if ( !theSelectedBackend.endsWith(\"_R\") && !theSelectedBackend.endsWith(\"_R_2\") )
  {
    bool allowDbControl = false;
    if ( dpExists(profiles_IDpNamePrefix + backendInfo.profileName + \".startStopDBProcess\") )  // sanity check
      dpGet(profiles_IDpNamePrefix + backendInfo.profileName + \".startStopDBProcess\", allowDbControl);

    StartOrStopDatabaseProcessControlButton.enabled(allowDbControl);
  }
}

void updateShapes(const NgaBackendInfo &backendInfo)
{
  // display dirty flag in backend list
  //string name = (string)BackendsTable.cellValueRC(BackendsTable.selectLineN, \"BackendNameColumn\");

  // do not display dirty flag for the moment (#82855)
  //BackendsTable.cellValueRC(BackendsTable.selectLineN, \"BackendNameColumn\", StringUtility::getNameWithDirtyFlag(name, backendInfo.isDirty));

  refreshMonitor();
}

void selectTextInComboBox(shape comboBox, string text)
{
  for (int i = 1; i <= comboBox.itemCount; i++)
  {
    string entry = comboBox.items[i];
    if (entry == text)
    {
      comboBox.selectedPos(i);
      break;
    }
  }
}

void populateBackendsTable(string backendNameToSelect = \"\", bool reloadFromDP = false)
{
  BackendsTable.deleteAllLines();
  dyn_string backendNames = g_backendConfigProvider.getNames();
  int selectIndex = -1;

  for (int i = 1; i <= dynlen(backendNames); i++)
  {
    string name = backendNames[i];
    NgaBackendInfo backendInfo = g_backendConfigProvider.getBackendByName(name);

    BackendsTable.appendLine(
        \"BackendNameColumn\", name,
        \"BackendDisplayNameColumn\", backendInfo.displayName);

    if (name == backendNameToSelect)
      selectIndex = i - 1;
  }

  if (selectIndex != -1)
    BackendsTable.selectLineN(selectIndex);
  else if (dynlen(backendNames) > 0)
    BackendsTable.selectLineN(0);
}

void populateProfilesComboBox()
{
  dyn_string allProfiles = nga_getAllProfiles();
  dyn_string allProfileNames;
  mappingClear(profileNames);
  for (int i = 1; i <= dynlen(allProfiles); ++i)
  {
    langString names;
    if ( !dpExists(profiles_IDpNamePrefix + allProfiles[i] + \".displayName\") )
      continue;

    dpGet(profiles_IDpNamePrefix + allProfiles[i] + \".displayName\", names);
    dynAppend(allProfileNames, names);
    profileNames[allProfileNames[i]] = allProfiles[i];
  }

  ProfilesComboBox.items = allProfileNames;
}

// avoid race-condition
synchronized void backendTable_SelectionChanged(int index)
{
  if ( index == -1 )
    return;

  int tabNumber;
  getValue(\"PagesTab\", \"registerCount\", tabNumber);
  --tabNumber;  // exclude last tab
  for (int i = 0; i < tabNumber; ++i)
  {
    invokeMethod(PagesTab.panelAt(i), \"cleanup\");
    if ( i == 1 )
      invokeMethod(PagesTab.panelAt(i), \"initSpecificData\");
  }

  selectedBackenName = getSelectedBackendName();
  if ( selectedBackenName.endsWith(\"_R\") || selectedBackenName.endsWith(\"_2\") )
    btnDelete.enabled(FALSE);
  else
    btnDelete.enabled(TRUE);

  NgaBackendInfo backendInfo = g_backendConfigProvider.getBackendByName(selectedBackenName);
  invokeMethod(PagesTab.panelAt(0), \"updateOverview\", backendInfo.displayName);
  string mainBackend;
  if ( selectedBackenName.endsWith(\"_R\") )
  {
    mainBackend = backendInfo.displayName;
    mainBackend.remove(mainBackend.lastIndexOf(\"_R\"), mainBackend.length());
    mainBackend += \"_2\";
  }
  else if ( selectedBackenName.endsWith(\"_R_2\") )
  {
    mainBackend = backendInfo.displayName;
    mainBackend.remove(mainBackend.lastIndexOf(\"_R_2\"), mainBackend.length());
  }

  if ( mainBackend.isEmpty() )
  {
    ExecutionTypeComboBox.enabled(TRUE);
    ExecutableFileNameTextBox.enabled(TRUE);
    DatabaseProcessManagementCheckBox.enabled(TRUE);
    StartOrStopBackendProcessControlButton.enabled(TRUE);
    StartOrStopDatabaseProcessControlButton.enabled(TRUE);
    reduBackendInfo.visible(FALSE);
  }

  loadBackendData(backendInfo);
  enableShapes();
  refreshBackendStatusDiagram(backendInfo.zmqAddress);
  NgaBackendConfigProvider::selectedBackendName = selectedBackenName;

  if ( !mainBackend.isEmpty() )
  {
    ExecutionTypeComboBox.enabled(FALSE);
    ExecutableFileNameTextBox.enabled(FALSE);
    DatabaseProcessManagementCheckBox.enabled(FALSE);
    StartOrStopBackendProcessControlButton.enabled(FALSE);
    StartOrStopDatabaseProcessControlButton.enabled(FALSE);
    reduBackendInfo.visible(TRUE);
    string msg = getCatStr(\"NGA\", \"reduBackendNoAction\");
    msg.replace(\"$1\", mainBackend);
    reduBackendInfo.text(msg);
  }
}

void populateExecutableComboBox()
{
  dyn_string files = getFileNames(PVSS_BIN_PATH, \"NGA*\");
  for (int i = 1 ; i <= dynlen(files); i++)
  {
    dyn_string split = strsplit(files[i], \".\");
    files[i] = split[1];
    for (int j = 2; j < dynlen(split); j++)
    {
      files[i] += \".\" + split[j];
    }
  }

  for (int i = 1 ; i <= dynlen(files); i++)
  {
    if ( substr(files[i], strlen(files[i]) - 6) == \"Plugin\" )
    {
      files[i] = substr(files[i], 0, strlen(files[i]) - 6);
    }
  }

  dynUnique(files);
  dynInsertAt(files, \"\", 1);
  ExecutableFileNameTextBox.items = files;
}

void applyProfileData(NgaBackendInfo &backendInfo, string profileName)
{
  NgaBackendConfigProvider::applyProfile(backendInfo, profileName);
  loadBackendData(backendInfo);
}

void loadBackendData(const NgaBackendInfo &backendInfo)
{
  updateShapes(backendInfo);

  // general
  IsBackendActiveCheckBox.state(0, backendInfo.isActive);
  BackendDisplayNameTextBox.text = backendInfo.displayName;
  string displayProfileName;
  for (int i = 1; i <= mappinglen(profileNames); i++)
  {
    displayProfileName = mappingGetKey(profileNames, i);
    if ( profileNames[displayProfileName] == backendInfo.profileName )
      break;
  }

  selectTextInComboBox(getShape(\"ProfilesComboBox\"), displayProfileName);

  ExecutionTypeComboBox.currentIndex((int)backendInfo.executionType);
  ExecutableFileNameTextBox.text = backendInfo.pluginName;
  ReadOnlyWriteOnlyRadioButton.number = (int)NgaBackendConfigProvider::getDatabaseType(backendInfo); // TBD/TODO: This is NOT the way we should do it

  // database
  DatabaseProcessManagementCheckBox.state(0, backendInfo.dbProcMgmt);
  DatabaseConnectionStringTextBox.text = backendInfo.dbConnectionString;
  DatabaseUserNameTextBox.text = backendInfo.dbUserName;
  DatabaseUserPasswordTextBox.text = backendInfo.dbUserPasswordClearText;

  DatabaseSpecificConfigurationsTable.deleteAllLines();
  for (int i = 1; i <= dynlen(backendInfo.dbSpecificConfigurations); i++)
  {
    DatabaseSpecificConfigurationsTable.appendLine(
        \"ConfigSettingNameColumn\", StringUtility::nameAndValue_getName(backendInfo.dbSpecificConfigurations[i]),
        \"ConfigSettingValueColumn\", StringUtility::nameAndValue_getValue(backendInfo.dbSpecificConfigurations[i]));
  }

  for (int i = 1; i <= distributedPartnersTabel.lineCount(); ++i)
  {
    string systemName = distributedPartnersTabel.cellValueRC(i - 1, \"system\");
    string partner = distributedPartnersTabel.cellValueRC(i - 1, \"partner\");
    distributedPartnersTabel.cellValueRC(i - 1, \"activ\", (bool)dynContains(backendInfo.distPartenrs, systemName + \":\" + backends_IDpNamePrefix + partner));
  }

  invokeMethod(PagesTab.panelAt(1), \"initSpecificData\");

  // comm
  RequestedZmqAddressTextBox.text = backendInfo.zmqAddress;
  SendDpeWithNameCheckBox.state(0, backendInfo.sendDpeWithName);
  SendDpeWithIDCheckBox.state(0, backendInfo.sendDpeWithId);
  SendDpeWithAliasCheckBox.state(0, backendInfo.sendDpeWithAlias);
  SplitSizeTextBox.text = backendInfo.splitSize;

  // buffering
  BufferingLevelComboBox.selectedPos(1 + (uint)backendInfo.bufferingLevel); // TBD/TODO: This is NOT the way we should do it
  BufferingTimeoutTextBox.text = backendInfo.bufferingTimeout;
  BufferingBlockSizeTextBox.text = backendInfo.bufferingBlockSize;
  BufferingMaxTimeTextBox.text = backendInfo.bufferingMaxBufferTime;
  BufferingMemorySizeTextBox.text = backendInfo.bufferingMemoryBufferSize;
  BufferingProcessOldBlocksAtStartupCheckBox.state(0, backendInfo.bufferingProcessOldBlocksAtStartup);

  string bufferPath = backendInfo.bufferingFilesLocation;
  if ( bufferPath.isEmpty() )  // show default buffer dir - db/wincc_oa/nga/
  {
    BufferingFileLocationTextBox.text(\"db/wincc_oa/nga\");
    BufferingFileLocationTextBox.foreCol(\"grey\");
  }
  else
  {
    BufferingFileLocationTextBox.text(bufferPath);
    BufferingFileLocationTextBox.foreCol(\"\");
  }

  BufferingFilePrefixTextBox.text = backendInfo.bufferingFilesPrefix;

  // actual
  ActualZmqAddressTextBox.text = backendInfo.actualZmQaddress;

  // timing
  TimingSendTimeOutTextBox.text = backendInfo.timingSendTimeoutMs;
  TimingWaitForDbWriteTextBox.text = backendInfo.timingWaitForDbWriteMs;
  TimingTimeToWaitAsyncOpTextBox.text = backendInfo.timingTimeToWaitForFinishingAsyncOpMs;
}

NgaBackendInfo getBackendDataFromShapes(string name = getSelectedBackendName())
{
  NgaBackendInfo backendInfo = getSelectedBackendByName(name);

  // general
  backendInfo.isActive = IsBackendActiveCheckBox.state(0);
  backendInfo.displayName = BackendDisplayNameTextBox.text;
  string displayProfileName = ProfilesComboBox.selectedText;
  backendInfo.profileName = profileNames[displayProfileName];

  backendInfo.executionType = (ngaBackendExecutionType)(ExecutionTypeComboBox.currentIndex);

  backendInfo.pluginName = ExecutableFileNameTextBox.text;
  NgaBackendConfigProvider::setDatabaseType(backendInfo, (ngaDatabaseType)ReadOnlyWriteOnlyRadioButton.number);

  // database
  backendInfo.dbProcMgmt = DatabaseProcessManagementCheckBox.state(0);
  backendInfo.dbConnectionString = DatabaseConnectionStringTextBox.text;
  backendInfo.dbUserName = DatabaseUserNameTextBox.text;
  backendInfo.dbUserPasswordClearText = DatabaseUserPasswordTextBox.text;

  dynClear(backendInfo.dbSpecificConfigurations);
  for (int i = 1; i <= DatabaseSpecificConfigurationsTable.lineCount(); i++)
  {
    string name = DatabaseSpecificConfigurationsTable.cellValueRC(i - 1, \"ConfigSettingNameColumn\");
    string value = DatabaseSpecificConfigurationsTable.cellValueRC(i - 1, \"ConfigSettingValueColumn\");
    dynAppend(backendInfo.dbSpecificConfigurations, name + \"=\" + value);
  }

  for (int i = 1; i <= distributedPartnersTabel.lineCount(); i++)
  {
    bool activ = distributedPartnersTabel.cellValueRC(i - 1, \"activ\");
    string systemName = distributedPartnersTabel.cellValueRC(i - 1, \"system\");
    string partner = distributedPartnersTabel.cellValueRC(i - 1, \"partner\");
    string partnerName = systemName + \":\" + backends_IDpNamePrefix + partner;
    if ( activ && !dynContains(backendInfo.distPartenrs, partnerName) )
      dynAppend(backendInfo.distPartenrs, partnerName);
    else if ( !activ && dynContains(backendInfo.distPartenrs, partnerName) )
      dynRemove(backendInfo.distPartenrs, dynContains(backendInfo.distPartenrs, partnerName));
  }

  // comm
  backendInfo.zmqAddress = RequestedZmqAddressTextBox.text;
  backendInfo.sendDpeWithName = SendDpeWithNameCheckBox.state(0);
  backendInfo.sendDpeWithId = SendDpeWithIDCheckBox.state(0);
  backendInfo.sendDpeWithAlias = SendDpeWithAliasCheckBox.state(0);
  backendInfo.splitSize = SplitSizeTextBox.text;

  // buffering
  backendInfo.bufferingLevel = (uint)BufferingLevelComboBox.selectedPos - 1; // TBD/TODO: This is NOT the way we should do it
  backendInfo.bufferingTimeout = BufferingTimeoutTextBox.text;
  backendInfo.bufferingBlockSize = BufferingBlockSizeTextBox.text;
  backendInfo.bufferingMaxBufferTime = BufferingMaxTimeTextBox.text;
  backendInfo.bufferingMemoryBufferSize = BufferingMemorySizeTextBox.text;
  backendInfo.bufferingProcessOldBlocksAtStartup = BufferingProcessOldBlocksAtStartupCheckBox.state(0);

  // if the foreCol is greay, the dafault value is in use, don't change it
  if ( BufferingFileLocationTextBox.foreCol != \"grey\" )
    backendInfo.bufferingFilesLocation = BufferingFileLocationTextBox.text;

  backendInfo.bufferingFilesPrefix = BufferingFilePrefixTextBox.text;

  // actual
  backendInfo.actualZmQaddress = ActualZmqAddressTextBox.text;

  // timing
  backendInfo.timingSendTimeoutMs = TimingSendTimeOutTextBox.text;
  backendInfo.timingWaitForDbWriteMs = TimingWaitForDbWriteTextBox.text;
  backendInfo.timingTimeToWaitForFinishingAsyncOpMs = TimingTimeToWaitAsyncOpTextBox.text;

  return backendInfo;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   Health status
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int selectedTableLine = -1;
int mutex;
bool g_shouldRefreshBackendTable = true;

void refreshManager()
{
  int countForceUpdates = 0;
  while (true)
  {
    ++countForceUpdates;
    if ( countForceUpdates > 25 )  // force update every 5 seconds
    {
      g_shouldRefreshBackendTable = TRUE;
      countForceUpdates = 0;
    }

    _refreshBackendTable();
    initCompleted = TRUE;
    delay(0, 200);
  }
}

void statusAllCB(string dpe1, dyn_dyn_anytype val) synchronized(selectedTableLine)
{
  for (int i = 1; i <= dynlen(val); i++)
  {
    string dpName = val[i][1];
    dpName = dpSubStr(dpName, DPSUB_DP_EL);

    if (patternMatch(\"*database.dbProcControl\", dpName) || patternMatch(\"*general.backendProcCtrl\", dpName) ||
        patternMatch(\"*monitor.backendConnectedToFrontend\", dpName) || patternMatch(\"*monitor.backendConnectedToDB\", dpName) ||
        patternMatch(\"*general.active\", dpName) || patternMatch(\"*comm.zmqAddress\", dpName))
    {
      refreshBackendTable();
    }
  }
}

dyn_anytype getAllColumnValues(shape table, string columnName)
{
  for (int columnIndex = 0;  columnIndex < table.columnCount; columnIndex++)
  {
    string name = table.columnToName(columnIndex);

    if (name == columnName)
    {
      return table.getColumnN(columnIndex);
    }
  }

  return makeDynAnytype();
}

string getNgaSymbol(string fileName)
{
  return \"[pattern,[center,any,\" + \"NGA/\" + fileName + \"]]\";
}

void refreshBackendTable() synchronized(mutex)
{
  g_shouldRefreshBackendTable = true;
}

void _refreshBackendTable() synchronized(mutex)
{
  if(! g_shouldRefreshBackendTable)
    return;

  g_shouldRefreshBackendTable = false;

  dyn_string backendNames = getAllColumnValues(getShape(\"BackendsTable\"), \"BackendNameColumn\");
  mapping allStates;

  for(int i = 1; i <= dynlen(backendNames); i++)
  {
    string backendName = backendNames[i];

    if (! nga_backendExists(backendName))
      continue;

    bool ngaManagerRunning = TRUE;
    dyn_bool frontendStates = NgaSegmentConfigProvider::isFrontendAlive;
    if ( (backendName.endsWith(\"_2\") && !frontendStates[2]) ||
       (!backendName.endsWith(\"_2\") && !frontendStates[1]) )
      ngaManagerRunning = FALSE;


    bool active, connectedToFrontend, connectedToDatabase, licensed;
    int currentMemoryBufferSize, currentDiskBufferSize;
    dpGet(backends_IDpNamePrefix + backendName + \".general.active\", active,
          backends_IDpNamePrefix + backendName + \".monitor.backendConnectedToFrontend\", connectedToFrontend,
          backends_IDpNamePrefix + backendName + \".monitor.backendConnectedToDB\", connectedToDatabase,
          backends_IDpNamePrefix + backendName + \".general.isLicensed\", licensed,
          backends_IDpNamePrefix + backendName + \".monitor.currentMemoryBufferSize\", currentMemoryBufferSize,
          backends_IDpNamePrefix + backendName + \".monitor.currentDiskBufferSize\", currentDiskBufferSize);

    NgaBackendInfo backendInfo = getSelectedBackendByName(backendName);
    mapping backendData;
    backendData[\"frontend\"] = ngaManagerRunning;
    backendData[\"active\"] = active;
    backendData[\"isInProc\"] = backendInfo.isInProc;
    backendData[\"connectedToFrontend\"] = connectedToFrontend;
    backendData[\"connectedToDatabase\"] = connectedToDatabase;
    backendData[\"buffer\"] = currentMemoryBufferSize + \"/\" + currentDiskBufferSize;
    allStates[(string)backendInfo.displayName] = backendData;

    if ( active && licensed && ngaManagerRunning )
      BackendsTable.cellFillRC(i - 1, \"LICENSED\", \"[pattern,[fit,any,projAdmin/get_hwcode.svg]]\");
    else
       BackendsTable.cellFillRC(i - 1, \"LICENSED\", \"\");

    ngaBackendHealthStatusType healthStatus = nga_calcHealthStatus(active, ngaManagerRunning, connectedToFrontend, connectedToDatabase);

    string imageFileName;

    switch (healthStatus)
    {
      case ngaBackendHealthStatusType::BHS_ACTIVE_AND_HEALTHY:
        imageFileName = \"plugged-in_green_20.png\";
        break;

      case ngaBackendHealthStatusType::BHS_ACTIVE_NGARUNNING_ERRORS_FRONTEND:
      case ngaBackendHealthStatusType::BHS_ACTIVE_NGARUNNING_ERRORS_DATABASE:
      case ngaBackendHealthStatusType::BHS_ACTIVE_NGARUNNING_ERRORS_BOTH:
        imageFileName = \"plugged-in_yellow_20.png\";
        break;

      case ngaBackendHealthStatusType::BHS_ACTIVE_NGASTOPPED_ERRORS_NONE:
      case ngaBackendHealthStatusType::BHS_ACTIVE_NGASTOPPED_ERRORS_FRONTEND:
      case ngaBackendHealthStatusType::BHS_ACTIVE_NGASTOPPED_ERRORS_DATABASE:
      case ngaBackendHealthStatusType::BHS_ACTIVE_NGASTOPPED_ERRORS_BOTH:
        imageFileName = \"plugged-in_red_20.png\";
        break;

      case ngaBackendHealthStatusType::BHS_INACTIVE_BUT_HEALTHY:
        imageFileName = \"unplugged_green_20.png\";
        break;

      case ngaBackendHealthStatusType::BHS_INACTIVE_NGARUNNING_ERRORS_FRONTEND:
      case ngaBackendHealthStatusType::BHS_INACTIVE_NGARUNNING_ERRORS_DATABASE:
      case ngaBackendHealthStatusType::BHS_INACTIVE_NGARUNNING_ERRORS_BOTH:
        imageFileName = \"unplugged_yellow_20.png\";
        break;

      case ngaBackendHealthStatusType::BHS_INACTIVE_NGASTOPPED_ERRORS_NONE:
      case ngaBackendHealthStatusType::BHS_INACTIVE_NGASTOPPED_ERRORS_FRONTEND:
      case ngaBackendHealthStatusType::BHS_INACTIVE_NGASTOPPED_ERRORS_DATABASE:
      case ngaBackendHealthStatusType::BHS_INACTIVE_NGASTOPPED_ERRORS_BOTH:
        imageFileName = \"unplugged_red_20.png\";
        break;
    }

    // display health status
    BackendsTable.cellFillRC(i - 1, \"BackendHealthStatusColumn\", getNgaSymbol(imageFileName));
  }

  // set text of \"process control\" buttons acording to state
  NgaProcessControl procCtrl = new NgaProcessControl(getSelectedBackendName());
  StartOrStopBackendProcessControlButton.text(getCatStr(\"NGA\", procCtrl.IsBackendProcessControlStarted() ? \"backend_stopProcessControl\" : \"backend_startProcessControl\"));
  StartOrStopDatabaseProcessControlButton.text(getCatStr(\"NGA\", procCtrl.IsDatabaseProcessControlStarted() ? \"database_stopProcessControl\" : \"database_startProcessControl\"));

  invokeMethod(PagesTab.panelAt(0), \"updateStates\", allStates);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   Monitor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void statusMonitorCB(string dpe1, dyn_dyn_anytype val) synchronized(selectedTableLine)
{
  refreshMonitor();
}

synchronized void refreshMonitor()
{
  string backendName = getSelectedBackendName();

  if (backendName == \"\" || (backendName != \"\" && !nga_backendExists(backendName)))
  {
    BUFFER_COUNT_TEXT.enabled = false;
    BUFFER_COUNT_TEXT.text = \"\";

    BUFFERS_ON_DISK_TEXT.enabled = false;
    BUFFERS_ON_DISK_TEXT.text = \"\";

    BUFFERS_IN_MEMORY_TEXT.enabled = false;
    BUFFERS_IN_MEMORY_TEXT.text = \"\";

    BLOCK_WRITE_DURATION_TEXT.enabled = false;
    BLOCK_WRITE_DURATION_TEXT.text = \"\";

    // health status
    ConnectedToFrontendIndicator.color = \"black\";
    ConnectedToBackendIndicator.color = \"black\";
  }
  else
  {
    string errorCode, lastError;
    time errorTimestamp;
    int currentMemoryBufferSize, currentDiskBufferSize, bufferGrowthIndicator, blockWriteDuration;
    bool connectedToFrontend, connectedToDatabase;

    dpGet(backends_IDpNamePrefix + backendName + \".monitor.lastError\", errorCode,
          backends_IDpNamePrefix + backendName + \".monitor.lastError:_online.._stime\", errorTimestamp,
          backends_IDpNamePrefix + backendName + \".monitor.lastErrorMsg\", lastError,
          backends_IDpNamePrefix + backendName + \".monitor.currentMemoryBufferSize\", currentMemoryBufferSize,
          backends_IDpNamePrefix + backendName + \".monitor.currentDiskBufferSize\", currentDiskBufferSize,
          backends_IDpNamePrefix + backendName + \".monitor.bufferGrowthIndicator\", bufferGrowthIndicator,
          backends_IDpNamePrefix + backendName + \".monitor.blockWriteDuration\", blockWriteDuration,
          backends_IDpNamePrefix + backendName + \".monitor.backendConnectedToFrontend\", connectedToFrontend,
          backends_IDpNamePrefix + backendName + \".monitor.backendConnectedToDB\", connectedToDatabase);

    BUFFER_COUNT_TEXT.enabled = true;

    if(bufferGrowthIndicator < 0)
    {
      BUFFER_COUNT_TEXT.text = getCatStr(\"NGA\", \"buffer_indicator_-\"); // \"Decreasing\"
    }
    else if(bufferGrowthIndicator == 0)
    {
      BUFFER_COUNT_TEXT.text = getCatStr(\"NGA\", \"buffer_indicator_0\"); // \"Not Changing\"
    }
    else
    {
      BUFFER_COUNT_TEXT.text = getCatStr(\"NGA\", \"buffer_indicator_+\"); // \"Increasing\"
    }

    BUFFERS_IN_MEMORY_TEXT.enabled = true;
    BUFFERS_IN_MEMORY_TEXT.text = currentMemoryBufferSize;

    BUFFERS_ON_DISK_TEXT.enabled = true;
    BUFFERS_ON_DISK_TEXT.text = currentDiskBufferSize;

    BLOCK_WRITE_DURATION_TEXT.enabled = true;
    BLOCK_WRITE_DURATION_TEXT.text = blockWriteDuration;

    // health status
    ConnectedToFrontendIndicator.color = connectedToFrontend ? \"STD_valve_open\" : \"SiemensWebFunctionalRed\";
    ConnectedToBackendIndicator.color = connectedToDatabase ? \"STD_valve_open\" : \"SiemensWebFunctionalRed\";
  }
}

//--------------------------------------------------------------------------------
/**
 * @brief Change Backend status diagram depending on the address type.
 * @param address the given address of the backend.
**/
void refreshBackendStatusDiagram(const string &address)
{
  if ( NgaBackendConfigProvider::isAdressInProc(address) )
  {
    ConnectedToFrontendIndicator.visible(FALSE);
  }
  else
  {
    ConnectedToFrontendIndicator.visible(TRUE);
  }
  return;
}

//--------------------------------------------------------------------------------
/**
 * @brief Delete the given database specific config.
 * @param configIndex the given config index.
 * @return showWarning TRUE when warning message should be shown, otherwise FALSE.
**/
event_databaseDeleteSpecificCfg_Callback(const int &configIndex, bool showWarning = FALSE)
{
  NgaBackendInfo backendInfo = g_backendConfigProvider.getBackendByName(getSelectedBackendName());
  if ( dynlen(backendInfo.dbSpecificConfigurations) <= configIndex )
  {
    if ( showWarning )
    {
      dyn_float resultFloat;
      dyn_string resultString;
      wf_dialogs_open(WF_DIALOGS_PANEL_TYPE_OK,
                      getCatStr(\"general\",\"information\"),
                      getCatStr(\"NGA\",\"failedDeleteSpecificSetting_2\"),
                      resultString, resultFloat);
    }

    return;
  }

  dyn_string dbSpecific;
  string profileName = profiles_IDpNamePrefix + backendInfo.profileName;
  dpGet(profileName + \".dbSpecific\", dbSpecific);
  for (int i = 1; i <= dynlen(dbSpecific); i++)
  {
    if ( dbSpecific[i] == StringUtility::nameAndValue_getName(backendInfo.dbSpecificConfigurations[configIndex + 1]) )  // configIndex starts from 0
    {
      if ( showWarning )
      {
        dyn_float resultFloat;
        dyn_string resultString;
        wf_dialogs_open(WF_DIALOGS_PANEL_TYPE_OK,
                        getCatStr(\"general\",\"information\"),
                        getCatStr(\"NGA\",\"failedDeleteSpecificSetting_1\"),
                        resultString, resultFloat);
      }

      return;
    }
  }

  DatabaseSpecificConfigurationsTable.deleteLineN(configIndex);
  setPanelDirty(TRUE);
  return;
}

//------------------------------------------------------------------------------
/**
 * @brief The call-back function which monitors and sets the Frontend status.
 * @param dp, val The frontend connection DPE and its value.
**/
void frontendStateCB(string dp, dyn_int val,
                     string dp_2, dyn_int val_2)
{
  dyn_bool oldVals = NgaSegmentConfigProvider::isFrontendAlive;

  // 120 - NGA_Manager index in the Console
  NgaSegmentConfigProvider::isFrontendAlive = makeDynBool(dynContains(val, 120), dynContains(val_2, 120));
  if ( oldVals != NgaSegmentConfigProvider::isFrontendAlive ) // only do this if NGA isn't there any more
  {
    refreshBackendTable();
    BackendsTable.selectLineN(backendLineSelection);
  }
}
" 0
 4
"CBRef" "1"
"EClose" E
"dpi" "96"
"pdpi" "96"
2 1 0 0 0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
28 87
"PagesTab"
"WF"
1 43.27474747475388 188.6666666666655 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
86 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"sizePolicy" "Expanding Preferred"
"layoutAlignment" "AlignNone"
"showBackground" "0"
4
LANG:10001 35 Arial,-1,19,5,50,0,0,0,0,0,Standard
LANG:10004 35 Arial,-1,19,5,50,0,0,0,0,0,Standard
LANG:10000 35 Arial,-1,19,5,50,0,0,0,0,0,Standard
LANG:10027 35 Arial,-1,19,5,50,0,0,0,0,0,Standard
0  288 80 1313.999999999974 595.9999999999942
"main()
{
  this.activeRegister(0);
  this.registerVisible(2, FALSE); // hide distributed settings -> #120560
}" 0
3 "GenerelSettingsTab" 4
LANG:10001 16 General Settings
LANG:10004 12 常规设定
LANG:10000 24 Allgemeine Einstellungen
LANG:10027 29 Общие настройки
1 "para/archive/NGA/backendConfig_basics.pnl" 3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0

"ExtendedSettings" 4
LANG:10001 17 Extended Settings
LANG:10004 12 扩展设置
LANG:10000 24 Erweiterte Einstellungen
LANG:10027 41 Расширенные настройки
1 "para/archive/NGA/backendConfig_ext.pnl" 3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0

"distributedCfg" 4
LANG:10001 27 Distributed System Settings
LANG:10004 21 分布式系统设定
LANG:10000 36 Einstellungen für verteilte Systeme
LANG:10027 62 Настройки распределенной системы
1 "para/archive/NGA/backendConfig_distributed.pnl" 3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0


13 6
"btnCreate"
"WF_Transparent"
1 1 570.3200000000001 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
5 0 0 0 0 0
E E E
1
4
LANG:10001 15 Add new backend
LANG:10004 16 添加新backend
LANG:10000 25 Neues Backend hinzufügen
LANG:10027 40 Добавить новый Бэкенд

4
"minimumSize" "27 27"
"maximumSize" "27 27"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignTrailing|AlignVCenter"
4
LANG:10001 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10004 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10000 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10027 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0  -1 560 29 590

P 
4294967295
"pictures/wf/buttons/add.png"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main(mapping event)
{
  string newBackendName = g_backendConfigProvider.addBackend();

  if (newBackendName != \"\")
  {
    NgaBackendInfo backendInfo = g_backendConfigProvider.getBackendByName(newBackendName);
    loadBackendData(backendInfo);

    populateBackendsTable(newBackendName);
    setPanelDirty(true);
    wf_bottomBar_reload();
    event_setBackendDisplayName_Callback();
  }
}" 0
 E E "main()
{
  this.buttonType(BT_PIXMAP);
  this.buttonUpPixmap = \"wf/buttons/add.png\";
  this.buttonDownPixmap = \"wf/buttons/add_pressed.png\";
}
" 0

13 7
"btnDelete"
"WF_Transparent"
1 33.00000000000001 570.3200000000001 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
6 0 0 0 0 0
E E E
1
4
LANG:10001 67 Remove selected backend (will be deleted when saving configuration)
LANG:10004 55 删除选定的backedn（保存配置时会被删除）
LANG:10000 67 Backend entfernen (wird beim Speichern der Konfiguration gelöscht)
LANG:10027 125 Удалить выбранный Бэкэнд (будет удален при сохранении конфигурации)

4
"minimumSize" "27 27"
"maximumSize" "27 27"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignLeading|AlignVCenter"
4
LANG:10001 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10004 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10000 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10027 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0  31 560 61.00000000000001 590

P 
4294967295
"pictures/wf/buttons/delete.png"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main(mapping event)
{
  dyn_float resultFloat;
  dyn_string resultString;
  wf_dialogs_open(WF_DIALOGS_PANEL_TYPE_YES_NO,
                  getCatStr(\"general\",\"information\"),
                  getCatStr(\"NGA\",\"backend_deletion_msg\"),
                  resultString, resultFloat);

  if ( !dynlen(resultString) || !resultString[1] )
    return;

  if (g_backendConfigProvider.removeBackend(getSelectedBackendName()))
  {
    BackendsTable.deleteAllLines();
    dyn_string backendNames = g_backendConfigProvider.getNames();

    for (int i = 1; i <= dynlen(backendNames); i++)
    {
      NgaBackendInfo backendInfo = g_backendConfigProvider.getBackendByName(backendNames[i]);
      bool licensed = FALSE;
      if ( dpExists(backends_IDpNamePrefix + backendNames[i] + \".general.isLicensed\") )
        dpGet(backends_IDpNamePrefix + backendNames[i] + \".general.isLicensed\", licensed);

      BackendsTable.appendLine(
          \"BackendNameColumn\", backendNames[i],
          \"BackendDisplayNameColumn\", backendInfo.displayName);

      if ( licensed )
        BackendsTable.cellFillRC(i - 1, \"LICENSED\", \"[pattern,[fit,any,projAdmin/get_hwcode.svg]]\");
    }

    int newIndex = 0;
    BackendsTable.selectLineN(newIndex);
    backendTable_SelectionChanged(newIndex);
    refreshBackendTable();
  }
}" 0
 E E "main()
{
  this.buttonType(BT_PIXMAP);
  this.buttonUpPixmap = \"wf/buttons/delete.png\";
  this.buttonDownPixmap = \"wf/buttons/delete_pressed.png\";
}
" 0

25 35
"BackendsTable"
"WF"
1 -563.9932936979608 122.3163017031631 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
34 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

8
"shadowOffset" "[9,8]"
"shadowColor" "_Transparent"
"shadowRadius" "18"
"minimumSize" "290 -1"
"maximumSize" "290 -1"
"sizePolicy" "Preferred Expanding"
"layoutAlignment" "AlignNone"
"selectionChangedCB" "main()
{
  backendLineSelection = this.selectLineN;
  backendTable_SelectionChanged(this.selectLineN);
}"
4
LANG:10001 35 Arial,-1,13,5,50,0,0,0,0,0,Standard
LANG:10004 35 Arial,-1,13,5,50,0,0,0,0,0,Standard
LANG:10000 35 Arial,-1,13,5,50,0,0,0,0,0,Standard
LANG:10027 35 Arial,-1,13,5,50,0,0,0,0,0,Standard
0  -2 115 290.999999999991 556.0000000000167
EE 1 0 1 4 0 "BackendHealthStatusColumn" 1 1 0 "[0s,,,AlignLeft|AlignVCenter]" 3
LANG:10000 1  
LANG:10001 1  
LANG:10027 1  
E
4
LANG:10001 21 Status of the backend
LANG:10004 13 Backend状态
LANG:10000 19 Status des Backends
LANG:10027 27 Статус Бэкенда

24 "BackendNameColumn" 8 1 0 "[0s,,,AlignLeft|AlignVCenter]" 4
LANG:10001 7 ID/Name
LANG:10004 7 ID/Name
LANG:10000 7 ID/Name
LANG:10027 9 ID/Имя
E
4
LANG:10001 10 ID as Name
LANG:10004 10 ID as Name
LANG:10000 10 ID as Name
LANG:10027 16 ID как Имя

99 "BackendDisplayNameColumn" 21 1 0 "[0s,,,AlignLeft|AlignVCenter]" 4
LANG:10001 4 Name
LANG:10004 4 Name
LANG:10000 4 Name
LANG:10027 6 Имя
E
4
LANG:10001 27 Display Name of the Backend
LANG:10004 22 Backend的显示名称
LANG:10000 24 Anzeigename des Backends
LANG:10027 46 Отображаемое имя Бэкенда

240 "LICENSED" 6 1 0 "[0s,,,AlignLeft|AlignVCenter]" 3
LANG:10000 1  
LANG:10001 1  
LANG:10027 1  
E
4
LANG:10001 40 The licensed groups have a license icon.
LANG:10004 33 许可组具有许可证图标。
LANG:10000 49 Die lizenzierten Gruppen haben ein Lizenzsymbol. 
LANG:10027 94 Лицензированные группы отмечены значком лицензии. 

24 
26 26 10 0
4
LANG:10001 35 Arial,-1,13,5,50,0,0,0,0,0,Standard
LANG:10004 35 Arial,-1,13,5,50,0,0,0,0,0,Standard
LANG:10000 35 Arial,-1,13,5,50,0,0,0,0,0,Standard
LANG:10027 35 Arial,-1,13,5,50,0,0,0,0,0,Standard
0 0 2 1 1 7
1 0
13 88
"DumpAllBackendsButton"
""
1 1030 500 E E E 1 E 1 E N "red" E N "_Button" E E
 E E
87 0 0 0 0 0
E E E
8
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignNone"
4
LANG:10001 31 Arial,-1,13,5,75,0,0,0,0,0,Fett
LANG:10004 31 Arial,-1,13,5,75,0,0,0,0,0,Fett
LANG:10000 31 Arial,-1,13,5,75,0,0,0,0,0,Fett
LANG:10027 31 Arial,-1,13,5,75,0,0,0,0,0,Fett
0  1028 493.8461538461538 1102 521.7307692307693

T 
4
LANG:10001 8 dump all
LANG:10004 11 dump 全部
LANG:10000 8 dump all
LANG:10027 8 dump all
"main(mapping event)
{
  g_backendConfigProvider.dumpAllBackends();
}" 0
 E E E
13 89
"DumpCurrentBackendButton"
""
1 1110 500 E E E 1 E 1 E N "red" E N "_Button" E E
 E E
88 0 0 0 0 0
E E E
8
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignNone"
4
LANG:10001 31 Arial,-1,13,5,75,0,0,0,0,0,Fett
LANG:10004 31 Arial,-1,13,5,75,0,0,0,0,0,Fett
LANG:10000 31 Arial,-1,13,5,75,0,0,0,0,0,Fett
LANG:10027 31 Arial,-1,13,5,75,0,0,0,0,0,Fett
0  1108 494 1182 521

T 
4
LANG:10001 10 dump curr.
LANG:10004 10 dump当前
LANG:10000 10 dump curr.
LANG:10027 10 dump curr.
"main(mapping event)
{
  NgaBackendInfo backend = getSelectedBackendByName();

  DebugTN(
      \"getPanelDirty()\", getPanelDirty(),
      \"isPanelChanged()\", isPanelChanged());

  DebugTN(\"backend\", backend);
}
" 0
 E E E
14 99
"wf_txtF_answer"
""
1 1210 20 E E E 1 E 0 E N "_WindowText" E N "red" E E
 E E
98 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignNone"
4
LANG:10001 30 Noto Sans,-1,16,5,50,0,0,0,0,0
LANG:10004 30 Noto Sans,-1,16,5,50,0,0,0,0,0
LANG:10000 30 Noto Sans,-1,16,5,50,0,0,0,0,0
LANG:10027 30 Noto Sans,-1,16,5,50,0,0,0,0,0
0  1208 12 1230 37
3 "0s" 0 0 0 0 0 -1  E E E
14 100
"wf_txtF_cmd"
""
1 1220 30 E E E 1 E 0 E N "_WindowText" E N "red" E E
 E E
99 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"layoutAlignment" "AlignNone"
"textChangedCB" "main(string newText)
{
  wf_panel_cmdChanged(newText);
}"
4
LANG:10001 30 Noto Sans,-1,16,5,50,0,0,0,0,0
LANG:10004 30 Noto Sans,-1,16,5,50,0,0,0,0,0
LANG:10000 30 Noto Sans,-1,16,5,50,0,0,0,0,0
LANG:10027 30 Noto Sans,-1,16,5,50,0,0,0,0,0
0  1206.367346938775 42 1229.367346938775 67
3 "0s" 0 0 0 0 0 -1  E "main()
{
  this.text = \"\";
}" 0
 E
1 106 0 "" 1
0
32 102
"SPACER1"
""
1 66 555 E E E 1 E 1 E N {0,0,0} E N {255,255,255} E E
 E E
101 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

5
"transparentForMouse" ""
"minimumSize" "211 -1"
"maximumSize" "211 -1"
"sizePolicy" "Preferred Ignored"
"layoutAlignment" "AlignNone"
 66 555 276.0000000000001 594 1
29 103
"backendsTitle"
""
1 0 82 E E E 1 E 1 E N "WF_CardInactive" E N "WF_CardActive" E E
 E E
102 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

6
"frameShape" "enum 0"
"text" "string Backend list"
"indent" "int 15"
"minimumSize" "290 35"
"maximumSize" "290 35"
"layoutAlignment" "AlignNone"
4
LANG:10001 31 Arial,-1,13,5,75,0,0,0,0,0,Fett
LANG:10004 31 Arial,-1,13,5,75,0,0,0,0,0,Fett
LANG:10000 31 Arial,-1,13,5,75,0,0,0,0,0,Fett
LANG:10027 31 Arial,-1,13,5,75,0,0,0,0,0,Fett
0  0 82 288.9999999999882 116.0000000000014
5 Label
0
"main()
{
  this.text(getCatStr(\"NGA\", this.name));
}" 0
29 104
"backendCommandLabel"
""
1 0 0 E E E 1 E 1 E N "_3DText" E N "white" E E
 E E
103 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

5
"frameShape" "enum 0"
"text" "string "
"styleSheet" "string "
"minimumSize" "-1 80"
"layoutAlignment" "AlignNone"
4
LANG:10001 35 Arial,-1,13,5,50,0,0,0,0,0,Standard
LANG:10004 35 Arial,-1,13,5,50,0,0,0,0,0,Standard
LANG:10000 35 Arial,-1,13,5,50,0,0,0,0,0,Standard
LANG:10027 35 Arial,-1,13,5,50,0,0,0,0,0,Standard
0  0 0 1312.000000000035 78.99999999999623
5 Label
0
"main()
{
  this.styleSheet(\"margin-top: 5px; margin-left: 15px; margin-right: 15px; margin-bottom: 5px; border-bottom: 1px black;\");
  this.text(getCatStr(\"NGA\", this.name));
}
" 0
4 105
"LINE2"
""
1 1312.00000000004 81 E E E 1 E 1 E N "WF_RefDiffLineDark" E N {255,255,255} E E
 E E
104 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 3 2 1 E  1312.00000000004 81 0 81
0
LAYER, 1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 2 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 3 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 4 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 5 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 6 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 7 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
3 0 "recht_buttonBar" 2
"minimumSize" "290 40"
"maximumSize" "290 40"
"layoutAlignment" "AlignLeft|AlignLeading"
"" ""
"para/archive/NGA/objects/background.pnl" 134.5323741007194 535.5441154462474 T 100 1.0358422939068 0 1.2221196471 -130.0317423480558 -88.4999085517495
0
4 1 "LAYOUT_GROUP1" 2
3 0 
102 7 6 

"S 102" "2 0 1 1"
"S 7" "1 0 1 1"
"S 6" "0 0 1 1"
"" ""
0 1 0 0
4 2 "LAYOUT_GROUP2" 3
0 2 

0 1 
"G 0" "0 0 1 2"
"G 1" "0 0 1 1"
"" ""
0 3 0 0
4 3 "LAYOUT_GROUP3" 5
2 1 
35 103 
2 
"S 35" "1 0 1 1"
"S 103" "0 0 1 1"
"G 2" "2 0 1 1"
"" ""
0 2 0 1 0
4 4 "LAYOUT_GROUP4" 6
2 0 
105 104 

"S 105" "1 0 1 1"
"S 104" "0 0 1 1"
"" ""
0 2 0 1 1
4 5 "LAYOUT_GROUP5" 6
1 1 
87 
3 
"S 87" "1 0 1 1"
"G 3" "0 0 1 1"
"" ""
0 1 0 1 0
4 6 "LAYOUT_GROUP6" -1
0 2 

4 5 
"G 4" "0 0 1 1"
"G 5" "1 0 1 1"
"" ""
0 2 0 1 0
0

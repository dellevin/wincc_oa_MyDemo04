V 13
4
LANG:10001 8 CS-ASCII
LANG:10004 8 CS-ASCII
LANG:10000 8 CS-ASCII
LANG:10027 8 CS-ASCII
PANEL,-1 -1 419 295 N "_3DFace" 0
"// Bitte bei InOut Meldung nachsehen
// erstellt von Peter Meidl am 2.2.1999
main()
{
  initHosts();
}" 0
 E E E E 1 -1 -1 0  40 51
""0  1
E "#uses \"CtrlPv2Admin\"
#uses \"CtrlRDBCompr\"
string sgUsername;
string sgPassword;


enableSystems(bool active)
{
  Systems.enabled = active;
}" 0
 3
"CBRef" "0"
"EClose" E
"dpi" "96"
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
4
LANG:10001 6 Layer1
LANG:10004 6 Layer1
LANG:10000 6 Layer1
LANG:10027 6 Layer1
6 80
"rout2"
""
1 25 319 E E E 1 E 1 E N {255,255,255} E N "_Transparent" E E
 E E
68 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E 1 0 0.3317307692307692 0 94.22596153846155 0 E 13 141 293 349
6 78
"Border5"
""
1 25 137 E E E 1 E 1 E N {255,255,255} E N "_Transparent" E E
 E E
66 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E U  0 E 13 71 293 126
6 77
"Border4"
""
1 25 31 E E E 1 E 1 E N {255,255,255} E N "_Transparent" E E
 E E
65 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E 0.5925373134328358 0 1 5.297014925373135 0 0 E 13 11 683 61
6 26
"Border1"
""
1 12 70 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
46 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E U  0 E 12 70 292 125
6 27
"rout1"
""
1 12 140 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
47 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E 1 0 0.3365384615384616 0 92.88461538461539 0 E 12 140 292 348
2 36
"Filter"
""
1 28 133 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
52 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"sizePolicy" "Fixed Fixed"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E U  1 E 28 133 73 148
0 2 2 "0s" 0 0 0 192 0 0  28 133 1
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 6 Filter
LANG:10004 6 过滤
LANG:10000 6 Filter
LANG:10027 12 Фильтр
6 41
"Border2"
""
1 12 10 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
54 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E 0.5925373134328358 0 1 5.889552238805949 0 0 E 12 10 682 60
2 43
"lblFile"
""
1 29 2 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
55 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"sizePolicy" "Fixed Fixed"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E U  1 E 31 2 100 17
0 2 2 "0s" 0 0 0 192 0 0  31 2 1
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 10 ASCII file
LANG:10004 11 ASCII文件
LANG:10000 11 ASCII-Datei
LANG:10027 14 ASCII-файл
14 8
"Datei"
""
1 27.92460317460317 24 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
1 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  27 23 302 50
3 "0s" 0 0 0 0 0 -1  E E E
13 12
"FileSelect"
""
1 318 18 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
2 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  318 18 358 48

P 
4294967295
"pictures/file_opened_en.gif"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()
{
  string datei;
  bool isExport = (InOut.number == 0);

  fileSelector(datei, getPath(DPLIST_REL_PATH), false, \"\", isExport);
  if (datei!=\"\");
    setValue(\"Datei\",\"text\",datei);
}" 0
 E E E
13 15
"cmdNotepad"
""
1 358 18 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  358 18 398 48

P 
12303291
"pictures/edit_en.gif"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()
{
  string datei;
  int i;

  getValue(\"Datei\",\"text\",datei);

  if (datei == \"\")
  {
   ChildPanelOnCentralModal(\"vision/MessageWarning\",\"\",makeDynString(getCatStr(\"general\",\"file\")));
  }
  else
  {
    if ((strpos(datei,\"/\") < 0) && (strpos(datei,\"\\\\\") < 0))
      datei = getPath(DPLIST_REL_PATH, datei);
    if (datei == \"\")
    {
      ChildPanelOnCentralModal(\"vision/MessageWarning\",\"\",makeDynString(getCatStr(\"general\",\"file\")));
      return;
    }
    if (strpos(datei, '.') <= 0)
    {
      datei += \".dpc\";
      Datei.text = datei;
    }
  
    fileEditor(datei, false);
  }
}" 0
 E E E
19 19
"InOut"
""
1 22.46376811594203 73 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
5 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  28 71 292 123
2
T 
4
LANG:10001 6 Import
LANG:10004 6 导入
LANG:10000 6 Import
LANG:10027 12 Импорт

0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E E
0 0 0 0 0
T 
4
LANG:10001 6 Export
LANG:10004 6 导出
LANG:10000 6 Export
LANG:10027 14 Экспорт

1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E E
0 0 0 0 0
1
"main()
{
  //select Export as default  
  this.number(1);
  enableSystems(this.number == 0);  
}" 0
 "main()
{
  enableSystems(this.number == 0);
}" 0

13 9
"run"
""
1 182 263 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
41 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  8 261 79 291

T 
4
LANG:10001 5 Start
LANG:10004 6 开始
LANG:10000 7 Starten
LANG:10027 12 Начать
"main()
{
  //LogFile
  string logFileName;
  logFileName = getPath(LOG_REL_PATH) + WINCCOA_COMPONENT_PREFIX + \"csascii_log.log\";
  
//   if (logFileName == \"\")
//     logFileName = getPath(LOG_REL_PATH) + PLATFORM_COMPONENT_PREFIX + \"csascii_log.log\";
  
  if(_WIN32)
  {
    strreplace(logFileName, \"/\", \"\\\\\");
  }  

  file logFile = fopen(logFileName, \"w\");
  int logErr = ferror(logFile);
  if (logErr != 0)
    DebugN(\"Failure open file \",err, logFileName);
  
  string fileName = Datei.text;
  if (strpos(fileName, '.') <= 0)
  {
    fileName += \".dpc\";
    Datei.text = fileName;
  }

  //21.03.2012 rheiss IM107493: set default Export directory 
  if (strpos(fileName, '/') == -1 && strpos(fileName, '\\\\') == -1)
  {
    string dpListPath = getPath(DPLIST_REL_PATH);
    fileName = dpListPath + fileName;
  }
    
  if (InOut.number ==1)
  {
    if (Datei.text == \"\")
      writeLog(logFile, \"no Exportfile given\");
    else
    //export   
    exportFile(fileName, logFile, FilterOptionen.state(0), FilterOptionen.state(1));
  }
  else
  {
    if (Datei.text == \"\")
      writeLog(logFile, \"no Importfile given\");
    else
    importFile(fileName, logFile, getSystemId(Systems.selectedText()+\":\"), FilterOptionen.state(0), FilterOptionen.state(1));
  }
 
  fclose(logFile);
  fileEditor(logFileName, TRUE);
//   Datei.text	= Datei.text + sAddedDPT;
}


int exportFile(anytype filename, file logFile, int expIntervalStep, int expCalculation)
{
  string fileName = (string) filename;
  file ascii_out = fopen(fileName, \"w\");  
  int err = ferror(ascii_out); // Fehler auslesen
  string Table;
  string sqlText;

  writeLog(logFile, \"start export at: \" + (string)getCurrentTime());    
  
  if (ascii_out && err == 0)
  {
    
    if (expIntervalStep == 1)
    { 
      Table = \"CSINTERVAL\";
      sqlText = \"SELECT LENGTH || '|' || \"
                       \"'\\\"' ||UNIT_CODE || '\\\"' ||'|' || \" + 
                       \"to_char(STARTTIME, 'YYYY.MM.DD HH24:MI:SS') || '|' || \" +
                       \"JOBDELAY || '|' || \" +
                       \"ACTIVE || '|' || \" +
                       \"CASE WHEN DESCRIPTION is null then '\\\"<NULL>\\\"' else '\\\"' || DESCRIPTION || '\\\"' end || '|' FROM CSINTERVAL\";    
         
    
      writeFile(ascii_out, logFile, Table, sqlText);
      Table = \"CSSTEP\";
      sqlText = \"SELECT STEP_ID || '|' || \" +
                           \"'\\\"' || NAME || '\\\"' || '|' || \" +
                           \"ACTIVE || '|' || \" + 
                           \"INTERVAL_ID || '|' || \" +
                           \"FUNCTION_ID || '|' FROM CSSTEP\";
       
      writeFile(ascii_out, logFile, Table, sqlText);       
    }
    
    if (expCalculation == 1)
    { 
      Table = \"CSCALCULATION\";
      sqlText = \"SELECT CS.ELEMENT_ID || '|' || \" + 
                      \" CS.STEP_ID || '|' || \" + 
                      \" CS.CSBASE_ID || '|' || \" + 
                      \" '\\\"' || EL.ELEMENT_NAME || '\\\"' || '|' || \" + 
                      \" CS.ACTIVE || '|' || INTER.SIZE_ORDER || '|' \" + 
                      \" FROM CSCALCULATION CS, ELEMENTS EL, CSINTERVAL INTER, CSSTEP STEP \" + 
                      \" WHERE EL.ELEMENT_ID = CSBASE_ID AND CS.STEP_ID = STEP.STEP_ID and \" + 
                      \" STEP.INTERVAL_ID = INTER.INTERVAL_ID\" + 
                      \" ORDER BY INTER.SIZE_ORDER\";
      writeFile(ascii_out, logFile, Table, sqlText);
    }
  }
  else
    DebugN(\"Fehler Nr. \",err,\" beim Öffnen der Datei \", fileName, \" aufgetreten\");

  fclose(ascii_out); 
 
  writeLog(logFile, \"finish export at: \" + (string)getCurrentTime());     
}

//Parameter: 
//ascii_out - Dest. file
//Table - table to export
//sqlText - sqlText for runRealSQLQuery
int writeFile(file ascii_out, file logFile, string Table, string sqlText)
{
  
  dyn_dyn_anytype state;
  writeLog(logFile, \"table: \" + (string) Table);  
  
  if (runRealSQLQuery(sqlText, state) == 0)
  {
    int retCode = fprintf(ascii_out, \"#%s\\n\", Table);
    int i = 1, goodCount = 0, badCount = 0;  
    while(i <= dynlen(state))
    {
      retCode = fprintf(ascii_out, \"%s\\n\", (string)state[i]);
      if (retCode)
        goodCount ++;
      else
        badCount ++;      
      
      i++;
    }  
    writeLog(logFile, (string) goodCount + \" from \" + (string) (i-1) + \" exported (\" + (string) badCount + \" failed)\");
    fprintf(ascii_out, \"#end\\n\\n\");
  }
  else
  {
    writeLog(logFile, \"Failure runRealSQLQuery \" + (string) sqlText); 
  }  
}


int importFile(string filename, file logFile, int SystemId, int impIntervalStep, int impCalculation)
{
  
  string fileName = filename;
  file ascii_in = fopen(fileName, \"r\");  
  int err = ferror(ascii_in); // Fehler auslesen
  writeLog(logFile, \"start import at: \" + (string)getCurrentTime());  
  
  if (ascii_in && err == 0)
  {  
    string tableName;
    bool found = false;
    //search for Table-Entry #TableName    
    while (!found && feof(ascii_in) == 0)    
    {
      tableName = \"\";      
      int retCode = fscanf(ascii_in, \"%s\", tableName);
      if (retCode > 0 && tableName != \"\" && (char)tableName[0] == '#' && tableName != \"#end\")
      {
        found = TRUE;
      }
      
      //read entries for CSINTERVAL      
      if (found && tableName == \"#CSINTERVAL\")
      {
        if (impIntervalStep == 1)        
        {
          readCSIntervals(ascii_in, logFile);
        }
        found = false;
      }
      //read entries for CSSTEP
      else if (found && tableName == \"#CSSTEP\")
      {
        if (impIntervalStep == 1)        
        {
          readCSSteps(ascii_in, logFile);
        }
        found = false;
      }
      //read entries for CSCALCULATION      
      else if (found && tableName == \"#CSCALCULATION\")
      {
        if (impCalculation == 1)        
        {
          readCSCalculation(ascii_in, logFile, SystemId);
        }
        found = false;
      }
      else
      {  
        if (tableName[0] == \"#\" && tableName != \"#end\")        
        {
          writeLog(logFile, \"table is not supported: \" + tableName);     
        }
      }
    }
  }
  else
  {
    DebugN(\"Failure open file \",err, fileName);
    //writeLog(logFile, \"Failure open file, errorNr: \" + (string)err + \" \" +  fileName);     
  }

  writeLog(logFile, \"finished Import at: \" + (string)getCurrentTime());  
  
  fclose(ascii_in);  
  //fileEditor(logFile, true);
}

//e.g.: line: ELEMENT_ID|BASE_ID|... -> values[1] = ELEMENT_ID; values[2] = BASE_ID
int doParseLine(string line, dyn_anytype &values)
{
  int i = 1;
  while (strlen(line) > 1)
  {                
    values[i] = substr(line, 0, strpos(line, '|'));
    line = substr(line, strpos(line, '|') + 1, strlen(line)-strpos(line, '|'));
    int ret = 0;    
    
    do
    {    
      ret = strreplace(values[i], \"\\\"\", \"\");
    }while (ret > 0);

    i ++;
  }
}


//read CSInterval: ASCII-File Entry: LENGTH | UNIT_CODE | STARTTIME | JOBDELAY | ACTIVE | DESCRIPTION
int readCSIntervals(file ascii_in, file logFile)
{
  int LENGTH = 1, UNIT_CODE = 2, STARTTIME = 3, JOBDELAY = 4, ACTIVE = 5, DESCRIPTION =6;
  dyn_string values;
  string line;
  int lineRecCode = 1;
  int importCount = 0, updateCount = 0, badCount = 0;
  
  while (line != \"#end\")
  {
    lineRecCode = fgets(line, 500, ascii_in);
    strreplace(line, \"\\n\", \"\");
    
      
    if (lineRecCode > 0 && line != \"#end\" && line != \"\")
    {
      doParseLine(line, values);
      
      /*addCompressionInterval(IntegerVar *piLength,
                             TextVar* piUnit,
                             TimeVar* piStartTime,
                             IntegerVar* piJobDelay,
                             BitVar* piActive,
                             TextVar* piDescription,
                             TextVar* poNewInterval,
                             TextVar* poNewGroup);
      */          
      string lInterval, newGroup;
      bool showErrorDup = 0;
      int retCode = addCompressionInterval((int) values[LENGTH], 
                             (string) values[UNIT_CODE], 
                             (time) values[STARTTIME], 
                             (int) values[JOBDELAY], 
                             (bool) values[ACTIVE], 
                             (string) values[DESCRIPTION], 
                             lInterval, 
                             newGroup, 
                             (bool) showErrorDup);
      
      if (retCode >= 0)
      {
        importCount ++;        
      }  
      else      
      {
        retCode = updateCompressionInterval((int) lInterval, 
                                            (time) myStringToTime(values[STARTTIME]), 
                                            (int) values[JOBDELAY], 
                                            (bool) values[ACTIVE], 
                                            (string) values[DESCRIPTION]);
        if (retCode < 0)        
        {
          badCount++;          
          writeLog(logFile, \"Failure add/update Interval \" + (string) values[DESCRIPTION]);
        }
        else
          updateCount++;
      }
    }
        
    if (line == \"#end\")
    {
      writeLog(logFile, \"finished Intervals - added lines: \" + (string)importCount + 
                       \", updated lines: \" + (string) updateCount +  
                       \", failed:\" + (string) badCount);
      break;
    }
        
  }
}

//read CSSteps: ASCII-File Entry: STEP_ID | NAME | ACTIVE | INTERVAL_ID | FUNCTION_ID 
void readCSSteps(file ascii_in, file logFile)
{
  int STEP_ID = 1, NAME = 2, ACTIVE = 3, INTERVAL_ID = 4, FUNCTION_ID = 5;  
  dyn_string values;
  string line;
  int lineRecCode = 1;
  int retCode; 
  int importCount = 0, updateCount = 0, badCount = 0;
  
  while (line != \"#end\")
  {
    lineRecCode = fgets(line, 500, ascii_in);
    strreplace(line, \"\\n\", \"\");
    
    if (lineRecCode > 0 && line != \"#end\" && line != \"\")
    {
      doParseLine(line, values);
      
      /*addCompressionStep(const TextVar* piInterval, 
                           const TextVar* piFunction, 
                           const TextVar* piName, 
                           const BitVar* piActive,
                           TextVar* poNewStep);
      */          
      string lStep;
      bool showErrorDup = 0;
      int retCode = addCompressionStep((string) values[INTERVAL_ID], 
                             (string) values[FUNCTION_ID], 
                             (string) values[NAME], 
                             (bool) values[ACTIVE], 
                             lStep, 
                             (bool) showErrorDup);
      
      if (retCode >= 0)
      {
        importCount ++;        
      }  
      else      
      {
        retCode = setCompressionStepState(lStep, (bool) values[ACTIVE]);
        if (retCode < 0)        
        {
          writeLog(logFile, \"failure add/update Compressionstep\" + (string)values[NAME]);
          badCount++;
        }
        else
          updateCount ++;
      }
    }
        
    if (line == \"#end\")
    {
      writeLog(logFile, \"finished Compressionsteps - added lines: \" + (string)importCount + 
                       \", updated lines: \" + (string) updateCount +  
                       \", failed:\" + (string) badCount);
      break;
    }
        
  }
}
   
//read CSCalculation: ASCII-File Entry: CS-ELEMENT_ID | STEP_ID | CSBASE_ID | EL.ELEMENT_NAME (from CSBASE_ID) | ACTIVE
void readCSCalculation(file ascii_in, file logFile, int SystemId)
{
  
  int CS_ELEMENT_ID = 1, STEP_ID = 2, CSBASE_ID = 3, ELEMENT_NAME = 4, ACTIVE = 5, INTERVAL_SIZEORDER = 6 /*not used for import*/;
  dyn_string values;
  string line;
  int lineRecCode = 1;
  int importCount = 0, updateCount = 0, badCount = 0;

  while (line != \"#end\")
  {
    lineRecCode = fgets(line, 500, ascii_in);
    strreplace(line, \"\\n\", \"\");
    
    if (lineRecCode > 0 && line != \"#end\" && line != \"\")
    {
      doParseLine(line, values);
      //cat Element_name from string
      //SystemName:ExampleDP_Result.:_1min_sum -> element_name = ExampleDP_Resul. for calculating element_id
      string element_name =  values[ELEMENT_NAME];
      int Pos = strpos(element_name, \":\") + 1;
      if (Pos > 0)      
      {
        element_name = substr(element_name, Pos, strlen(element_name) - Pos);
        Pos = strpos(element_name, \":\");
        if (Pos >= 0)        
        {
          element_name = substr(element_name, 0, Pos);
        }
      }
      
      unsigned dpId; 
      int elId;
      dpGetId(element_name, dpId, elId);
      
      //long tSys1 = (PVSSlonglong)  ( (PVSSlonglong) sysID & 0xFF);
      //long tSys2 = (PVSSlonglong) (( (PVSSlonglong) sysID >> 8)  & 0xFFFF);
      ulong tSys1 = SystemId;
      ulong tSys2 = 0;

      ulong elemID =  (((ulong) tSys2) << 56) + 
                      (((ulong) dpId) << 24) + 
                      (((ulong) elId) << 8) +
                        (ulong) tSys1;
      
      string element_id = elemID;
      
      //add the CS-Detail in the Element_id;
      //if csbase_id was already a CS-ElementId, copy the CS-Id to the element_id
      //original csbase_id = 28900000000001234567890
      //     new csbase_id = 28900000000007652987123
      if (strlen(values[3]) > 20)
      {
          string detail = substr(values[CSBASE_ID], 0, strlen(values[CSBASE_ID]) - 19);
          string NullValues = \"00000000000000000000\";
          element_id = detail + substr(NullValues, 0, 19 - strlen(element_id)) + element_id;
      }
      
      /*addCompressionCalculation(const TextVar* piStepId, 
                              const TextVar* piElId, 
                              const BitVar* piActive,
                              TextVar* poNewElId)
      */          
      string lElId;
      bool showErrorDup = 0;
      int retCode = addCompressionCalculation((string) values[STEP_ID], 
                             (string) element_id, 
                             (bool) values[ACTIVE], 
                             lElId, 
                             (bool) showErrorDup);

      if (retCode > 0)
      {
        importCount ++;        
      }  
      else      
      {
        retCode = setCompressionCalculationState(lElId, (bool) values[ACTIVE]);
        if (retCode < 0)
        {
          writeLog(logFile, \"failure add/update Compressions \" + (string) values[ELEMENT_NAME]);        
          badCount++;
        }
        else
          updateCount ++;
      }
    }
        
    if (line == \"#end\")
    {
      writeLog(logFile, \"finished Compressions - added lines: \" + (string)importCount + 
                       \", updated lines: \" + (string) updateCount +  
                       \", failed:\" + (string) badCount);
      break;
    }
  }
}


writeLog(file logFile, string text)
{
  if (logFile)  
    fprintf(logFile, \"%s\\n\", text);
  else
    DebugN(\"writeLog - failed\");
}

//convert string to time
time myStringToTime(string myTime)
{
  unsigned uYear = substr(myTime, 0, 4);
  unsigned uMonth = substr(myTime, 5, 2);
  unsigned uDay = substr(myTime, 8, 2);
  unsigned uHour = substr(myTime, 11, 2);
  unsigned uMinute = substr(myTime, 14, 2);
  unsigned uSecond = substr(myTime, 17, 2);
  return makeTime(uYear, uMonth, uDay, uHour, uMinute, uSecond);
}






" 0
 E E E
13 75
"logEdit"
""
1 79 261 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
42 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  79 261 149 291

T 
4
LANG:10001 7 Logfile
LANG:10004 12 日志文件
LANG:10000 9 Log Datei
LANG:10027 12 Журнал
"main()
{
  string datei;

  datei = getPath(LOG_REL_PATH) + WINCCOA_COMPONENT_PREFIX + \"csascii_log.log\";
  if (datei == \"\")
    datei = getPath(LOG_REL_PATH) + PLATFORM_COMPONENT_PREFIX + \"csascii_log.log\";
  fileEditor(datei, true);
}
" 0
 E E E
13 35
"exit"
""
1 268 261 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
75 0 0 0 27 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  268 261 338 291

T 
4
LANG:10001 5 Close
LANG:10004 6 关闭
LANG:10000 10 Schließen
LANG:10027 14 Закрыть
"main()
{
  PanelOff();
}
" 0
 E E E
13 61
"help"
""
1 344 261 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
95 0 0 0 112 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  338 261 408 291

T 
4
LANG:10001 4 Help
LANG:10004 6 帮助
LANG:10000 5 Hilfe
LANG:10027 14 Справка
"main()
{
  std_help(\"asciimancompr\");
}" 0
 E E E
20 88
"FilterOptionen"
""
1 27.91666666666669 149.468085106383 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
38 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  28 148 282 202
2
T 
4
LANG:10001 27 Intervals, Compressionsteps
LANG:10004 19 间隔,压缩步骤
LANG:10000 30 Intervalle, Verdichtungsstufen
LANG:10027 38 Интервалы, Ур. сжатия

0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E E
0 0 0 0 0
T 
4
LANG:10001 26 Compressions (DP-Elements)
LANG:10004 11 压缩(DPE)
LANG:10000 27 Verdichtungen (DP-Elemente)
LANG:10027 29 Сжатия (эл-тов DP)

0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E E
0 0 0 0 0
7
E E
E E
E E
E E
E E
E E
E E
"main()
{
  this.state(0, true);
  this.state(1, true);
}" 0
E22 109
"Systems"
""
1 70 230 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
39 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10027 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0  68 228 262 255
0

"main()
{
  dyn_string systemNames;
  dyn_uint systemIds;
  getSystemNames(systemNames, systemIds);
  dynSortAsc(systemNames);  
  this.items(systemNames);
  
  string sysName = getSystemName(); 
  //cat \":\" from SystemName  
  sysName = substr(sysName, 0, strpos(sysName, \":\")); 
  this.text(sysName);  
}" 0

E
E
 1 0
2 111
"PRIMITIVE_TEXT1"
""
1 20 234 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
97 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"sizePolicy" "Fixed Fixed"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 20 234 80 254
0 2 2 "0s" 0 0 0 64 0 0  20 234 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,11,5,50,0,0,0,0,0
0 4
LANG:10001 7 System:
LANG:10004 9 系统：
LANG:10000 7 System:
LANG:10027 15 Система:
0
LAYER, 1 
4
LANG:10001 6 Layer2
LANG:10004 6 Layer2
LANG:10000 6 Layer2
LANG:10027 6 Layer2
0
LAYER, 2 
4
LANG:10001 6 Layer3
LANG:10004 6 Layer3
LANG:10000 6 Layer3
LANG:10027 6 Layer3
0
LAYER, 3 
4
LANG:10001 6 Layer4
LANG:10004 6 Layer4
LANG:10000 6 Layer4
LANG:10027 6 Layer4
0
LAYER, 4 
4
LANG:10001 6 Layer5
LANG:10004 6 Layer5
LANG:10000 6 Layer5
LANG:10027 6 Layer5
0
LAYER, 5 
4
LANG:10001 6 Layer6
LANG:10004 6 Layer6
LANG:10000 6 Layer6
LANG:10027 6 Layer6
0
LAYER, 6 
4
LANG:10001 6 Layer7
LANG:10004 6 Layer7
LANG:10000 6 Layer7
LANG:10027 6 Layer7
0
LAYER, 7 
4
LANG:10001 6 Layer8
LANG:10004 6 Layer8
LANG:10000 6 Layer8
LANG:10027 6 Layer8
0
0

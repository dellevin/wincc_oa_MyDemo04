V 14
4
LANG:10001 23 PROFIsafe configuration
LANG:10004 16 PROFIsafe 配置
LANG:10000 23 PROFIsafe Konfiguration
LANG:10027 23 PROFIsafe configuration
PANEL,-1 -1 670 635 N "_3DFace" 0
"main()
{
  sSys              = getSystemName();
  bRedu             = isRedundant();
  t1.editable       = getNoOfLangs() == 1;
  langedit1.visible = getNoOfLangs() != 1;
  mappingClear(mMD);
  bSaveModule = 1;

  string     sPlc1, sPlc2, sOldPlc, sOldPlc1, sOldPlc2;
  dyn_string dsPlc = dpNames(sSys + \"*\", PSPNINTL + PSPNNAME);

  for ( int i = dynlen(dsPlc); i > 0; i-- )
  {
    // do not display redundant datapoints
    if ( i > 0 && isReduDp(dsPlc[i]))
    {
      dynRemove(dsPlc, i);
      continue;
    }

    dsPlc[i] = dpSubStr(dsPlc[i],DPSUB_DP);
    if ( dsPlc[i][0] == PSPNINTL )
      dsPlc[i] = substr(dsPlc[i], 1, strlen(dsPlc[i])-1);
  }

  if ( dynlen(dsPlc) < 1 )
  {
    //setMultiValue(\"groupReduDevice\", \"enabled\", 0,
    //              \"groupReduDetail\", \"enabled\", 0);

    cmbPlc.text = \"\";
    setSettingsEnabled(0);
  }
  else
  {
    cmbPlc.items = dsPlc;
    cmbPlc.text  = dsPlc[1];
    setSettingsEnabled(1);
  }

  if ( cmbPlc.text != \"\" )
    loadDp(sSys	+ PSPNINTL + cmbPlc.text);

  string sStateDrv  = getCatStr(\"profisafe\", \"statedrv\");
  string sStateCard = getCatStr(\"profisafe\", \"statecard\");
  string sStatePlc  = getCatStr(\"profisafe\", \"stateplc\");

  setMultiValue(\"tfStateDrv1\",  \"text\", sStateDrv,
                \"tfStateCard1\", \"text\", sStateCard,
                \"tfStatePlc1\",  \"text\", sStatePlc,

                \"tfStateDrv2\",  \"text\", sStateDrv,
                \"tfStateCard2\", \"text\", sStateCard,
                \"tfStatePlc2\",  \"text\", sStatePlc);

  while ( 1 )
  {
    if ( bRedu )
    {
      //setMultiValue(\"grpStatisticsSingle\", \"enabled\", 0,
      //              \"grpStatisticsRedu\",   \"enabled\", 1);

      sPlc1 = PSPNINTL + cmbPlc.text;
      sPlc2 = PSPNINTL + cmbPlc.text + PSPNREDU;

      if ( sPlc1 != sOldPlc1 && sPlc2 != sOldPlc2 )
      {
        // STATISTICS - REDUNDANT SYSTEM
        if ( sOldPlc1 != \"\" && dpExists(sOldPlc1) && sOldPlc2 != \"\" && dpExists(sOldPlc2) )
        {
          dpDisconnect(\"statistics2\",
                       //-----------------------------------------------
                       sOldPlc1 + sSTASTAT + \"PnReadsPerSec\"  + sONL,
                       sOldPlc1 + sSTASTAT + \"PnWritesPerSec\" + sONL,
                       sOldPlc1 + sSTASTAT + \"PsReadsPerSec\"  + sONL,
                       sOldPlc1 + sSTASTAT + \"PsWritesPerSec\" + sONL,
                       sOldPlc1 + sSTASTAT + \"PsWritesPerSec\" + sOST,
                       sOldPlc1 + sCFG   + \"EnableStatistics\" + sONL,
                       //-----------------------------------------------
                       sOldPlc2 + sSTASTAT + \"PnReadsPerSec\"  + sONL,
                       sOldPlc2 + sSTASTAT + \"PnWritesPerSec\" + sONL,
                       sOldPlc2 + sSTASTAT + \"PsReadsPerSec\"  + sONL,
                       sOldPlc2 + sSTASTAT + \"PsWritesPerSec\" + sONL,
                       sOldPlc2 + sSTASTAT + \"PsWritesPerSec\" + sOST,
                       sOldPlc2 + sCFG   + \"EnableStatistics\" + sONL);
                       //-----------------------------------------------
        }
        if ( sPlc1 != \"\" && dpExists(sPlc1) && sPlc2 != PSPNREDU && dpExists(sPlc2) )
        {
          dpConnect(\"statistics2\",
                    //--------------------------------------------
                    sPlc1 + sSTASTAT + \"PnReadsPerSec\"  + sONL,
                    sPlc1 + sSTASTAT + \"PnWritesPerSec\" + sONL,
                    sPlc1 + sSTASTAT + \"PsReadsPerSec\"  + sONL,
                    sPlc1 + sSTASTAT + \"PsWritesPerSec\" + sONL,
                    sPlc1 + sSTASTAT + \"PsWritesPerSec\" + sOST,
                    sPlc1 + sCFG   + \"EnableStatistics\" + sONL,
                    //--------------------------------------------
                    sPlc2 + sSTASTAT + \"PnReadsPerSec\"  + sONL,
                    sPlc2 + sSTASTAT + \"PnWritesPerSec\" + sONL,
                    sPlc2 + sSTASTAT + \"PsReadsPerSec\"  + sONL,
                    sPlc2 + sSTASTAT + \"PsWritesPerSec\" + sONL,
                    sPlc2 + sSTASTAT + \"PsWritesPerSec\" + sOST,
                    sPlc2 + sCFG   + \"EnableStatistics\" + sONL);
                    //--------------------------------------------
        }

        // STATES - REDUNDANT SYSTEM
        if ( sOldPlc1 != \"\" && dpExists(sOldPlc1) && sOldPlc2 != \"\" && dpExists(sOldPlc2) )
        {
          dpDisconnect(\"states2\",
                       //-----------------------------------------------
                       sOldPlc1 + sSTA + \"ConnState\"   + sONL,
                       sOldPlc1 + sSTA + \"Disabled\"    + sONL,
                       sOldPlc1 + sSTA + \"GeneralInfo\" + sONL,
                       sOldPlc1 + sSTA + \"Profinet\"    + sONL,
                       sOldPlc1 + sSTA + \"Profisafe\"   + sONL,
                       //-----------------------------------------------
                       sOldPlc2 + sSTA + \"ConnState\"   + sONL,
                       sOldPlc2 + sSTA + \"Disabled\"    + sONL,
                       sOldPlc2 + sSTA + \"GeneralInfo\" + sONL,
                       sOldPlc2 + sSTA + \"Profinet\"    + sONL,
                       sOldPlc2 + sSTA + \"Profisafe\"   + sONL);
                       //-----------------------------------------------

        }
        if ( sPlc1 != \"\" && dpExists(sPlc1) && sPlc2 != PSPNREDU && dpExists(sPlc2) )
        {
          dpConnect(\"states2\",
                    //--------------------------------------------
                    sPlc1 + sSTA + \"ConnState\"   + sONL,
                    sPlc1 + sSTA + \"Disabled\"    + sONL,
                    sPlc1 + sSTA + \"GeneralInfo\" + sONL,
                    sPlc1 + sSTA + \"Profinet\"    + sONL,
                    sPlc1 + sSTA + \"Profisafe\"   + sONL,
                    //--------------------------------------------
                    sPlc2 + sSTA + \"ConnState\"   + sONL,
                    sPlc2 + sSTA + \"Disabled\"    + sONL,
                    sPlc2 + sSTA + \"GeneralInfo\" + sONL,
                    sPlc2 + sSTA + \"Profinet\"    + sONL,
                    sPlc2 + sSTA + \"Profisafe\"   + sONL);
                    //--------------------------------------------

          //readDpWritePanel2(sPlc2);
        }

        sOldPlc1 = sPlc1;
        sOldPlc2 = sPlc2;
      }
    }
    else
    {
      //setMultiValue(\"grpStatisticsSingle\", \"enabled\", 1,
      //              \"grpStatisticsRedu\",   \"enabled\", 0);

      sPlc1 = PSPNINTL + cmbPlc.text;

      if ( sPlc1 != sOldPlc1 )
      {
        // STATISTICS - SINGLE SYSTEM
        if ( sOldPlc1 != \"\" && dpExists(sOldPlc1) )
        {
          dpDisconnect(\"statistics1\",
                       //-----------------------------------------------
                       sOldPlc1 + sSTASTAT + \"PnReadsPerSec\"  + sONL,
                       sOldPlc1 + sSTASTAT + \"PnWritesPerSec\" + sONL,
                       sOldPlc1 + sSTASTAT + \"PsReadsPerSec\"  + sONL,
                       sOldPlc1 + sSTASTAT + \"PsWritesPerSec\" + sONL,
                       sOldPlc1 + sSTASTAT + \"PsWritesPerSec\" + sOST,
                       sOldPlc1 + sCFG   + \"EnableStatistics\" + sONL);
                       //-----------------------------------------------
        }
        if ( sPlc1 != \"\" && dpExists(sPlc1) )
        {
          dpConnect(\"statistics1\",
                    //--------------------------------------------
                    sPlc1 + sSTASTAT + \"PnReadsPerSec\"  + sONL,
                    sPlc1 + sSTASTAT + \"PnWritesPerSec\" + sONL,
                    sPlc1 + sSTASTAT + \"PsReadsPerSec\"  + sONL,
                    sPlc1 + sSTASTAT + \"PsWritesPerSec\" + sONL,
                    sPlc1 + sSTASTAT + \"PsWritesPerSec\" + sOST,
                    sPlc1 + sCFG   + \"EnableStatistics\" + sONL);
                    //--------------------------------------------
        }

        // STATES - SINGLE SYSTEM
        if ( sOldPlc1 != \"\" && dpExists(sOldPlc1) )
        {
          dpDisconnect(\"states1\",
                       //-----------------------------------------------
                       sOldPlc1 + sSTA + \"ConnState\"   + sONL,
                       sOldPlc1 + sSTA + \"Disabled\"    + sONL,
                       sOldPlc1 + sSTA + \"GeneralInfo\" + sONL,
                       sOldPlc1 + sSTA + \"Profinet\"    + sONL,
                       sOldPlc1 + sSTA + \"Profisafe\"   + sONL);
                       //-----------------------------------------------
        }
        if ( sPlc1 != \"\" && dpExists(sPlc1) )
        {
          dpConnect(\"states1\",
                    //--------------------------------------------
                    sPlc1 + sSTA + \"ConnState\"   + sONL,
                    sPlc1 + sSTA + \"Disabled\"    + sONL,
                    sPlc1 + sSTA + \"GeneralInfo\" + sONL,
                    sPlc1 + sSTA + \"Profinet\"    + sONL,
                    sPlc1 + sSTA + \"Profisafe\"   + sONL);
                    //--------------------------------------------
        }

        sOldPlc1 = sPlc1;
      }
    }

    delay(1);
  }

}

////////////////////////////////////////////////////////////////////////////////////////////////////

statistics1(// host 1 dp
            string dp11, float fPnReadsPerSec1,
            string dp12, float fPnWritesPerSec1,
            string dp13, float fPsReadsPerSec1,
            string dp14, float fPsWritesPerSec1,
            string dp15, time  tLastUpdateTime1,
            string dp16, bool  bEnableStatistics1)
{
  setMultiValue(\"tfPnReadsPerSec1\",  \"text\", fPnReadsPerSec1,
                \"tfPnWritesPerSec1\", \"text\", fPnWritesPerSec1,
                \"tfPsReadsPerSec1\",  \"text\", fPsReadsPerSec1,
                \"tfPsWritesPerSec1\", \"text\", fPsWritesPerSec1,
                \"tfLastUpdateTime1\", \"text\", bEnableStatistics1 ? tLastUpdateTime1 : getCatStr(\"profisafe\", \"statisticsinactive\"));
}

////////////////////////////////////////////////////////////////////////////////////////////////////

statistics2(// host 1 dp
            string dp11, float fPnReadsPerSec1,
            string dp12, float fPnWritesPerSec1,
            string dp13, float fPsReadsPerSec1,
            string dp14, float fPsWritesPerSec1,
            string dp15, time  tLastUpdateTime1,
            string dp16, bool  bEnableStatistics1,

            // host 2 dp
            string dp21, float fPnReadsPerSec2,
            string dp22, float fPnWritesPerSec2,
            string dp23, float fPsReadsPerSec2,
            string dp24, float fPsWritesPerSec2,
            string dp25, time  tLastUpdateTime2,
            string dp26, bool  bEnableStatistics2)
{
  setMultiValue(\"tfPnReadsPerSec1\",  \"text\", fPnReadsPerSec1,
                \"tfPnWritesPerSec1\", \"text\", fPnWritesPerSec1,
                \"tfPsReadsPerSec1\",  \"text\", fPsReadsPerSec1,
                \"tfPsWritesPerSec1\", \"text\", fPsWritesPerSec1,
                \"tfLastUpdateTime1\", \"text\", bEnableStatistics1 ? tLastUpdateTime1 : getCatStr(\"profisafe\", \"statisticsinactive\"),

                \"tfPnReadsPerSec2\",  \"text\", fPnReadsPerSec2,
                \"tfPnWritesPerSec2\", \"text\", fPnWritesPerSec2,
                \"tfPsReadsPerSec2\",  \"text\", fPsReadsPerSec2,
                \"tfPsWritesPerSec2\", \"text\", fPsWritesPerSec2,
                \"tfLastUpdateTime2\", \"text\", bEnableStatistics2 ? tLastUpdateTime2 : getCatStr(\"profisafe\", \"statisticsinactive\"));
}

////////////////////////////////////////////////////////////////////////////////////////////////////

states1(//host 1
        string dp11, uint uiConnState1,
        string dp13, bool bDisabled1,
        string dp14, string sGeneralInfo1,
        string dp15, uint uiProfinet1,
        string dp16, uint uiProfisafe1)
{
  setConnStateField(uiConnState1, \"tfConnStateHost1\");

  setGeneralInfoField(sGeneralInfo1, makeDynString(\"tfGeneralInfoHostIp1\", \"tfGeneralInfoStation1\"));

  setMultiValue(\"tfProfinet1\",    \"text\", getCatStr(\"profisafe\", \"pnopstate\"+uiProfinet1),
                \"tfProfisafe1\",   \"text\", getCatStr(\"profisafe\", \"psopstate\"+uiProfisafe1));

  setStateDetails(uiConnState1, sGeneralInfo1, uiProfinet1, uiProfisafe1, \"tfProfisafe1\", \"lnDrvCard1\", \"lnCardPlc1\");
}

////////////////////////////////////////////////////////////////////////////////////////////////////

states2(// host 1 dp
        string dp11, uint uiConnState1,
        string dp13, bool bDisabled1,
        string dp14, string sGeneralInfo1,
        string dp15, uint uiProfinet1,
        string dp16, uint uiProfisafe1,

        // host 2 dp
        string dp21, uint uiConnState2,
        string dp23, bool bDisabled2,
        string dp24, string sGeneralInfo2,
        string dp25, uint uiProfinet2,
        string dp26, uint uiProfisafe2)
{
  // state host 1 & host 2
  setConnStateField(uiConnState1, \"tfConnStateHost1\");
  setConnStateField(uiConnState2, \"tfConnStateHost2\");

  setGeneralInfoField(sGeneralInfo1, makeDynString(\"tfGeneralInfoHostIp1\", \"tfGeneralInfoStation1\"));
  setGeneralInfoField(sGeneralInfo2, makeDynString(\"tfGeneralInfoHostIp2\", \"tfGeneralInfoStation2\"));

  setMultiValue(\"tfProfinet1\",    \"text\", getCatStr(\"profisafe\", \"pnopstate\"+uiProfinet1),
                \"tfProfisafe1\",   \"text\", getCatStr(\"profisafe\", \"psopstate\"+uiProfisafe1),

                \"tfProfinet2\",    \"text\", getCatStr(\"profisafe\", \"pnopstate\"+uiProfinet2),
                \"tfProfisafe2\",   \"text\", getCatStr(\"profisafe\", \"psopstate\"+uiProfisafe2));

  setStateDetails(uiConnState1, sGeneralInfo1, uiProfinet1, uiProfisafe1, \"tfProfisafe1\", \"lnDrvCard1\", \"lnCardPlc1\");
  setStateDetails(uiConnState2, sGeneralInfo2, uiProfinet2, uiProfisafe2, \"tfProfisafe2\", \"lnDrvCard2\", \"lnCardPlc2\");
}

////////////////////////////////////////////////////////////////////////////////////////////////////

setStateDetails(uint uiConnState, string sStateGi, uint uiStatePn, uint uiStatePs, string sShapePs, string sLineDrvCard, string sLineCardPlc)
{
  string sDrvCardColor, sDrvCardFC, sPsFC, sPsBC;
  string sCardPlcColor, sCardPlcFC, sPsFC, sPsBC;

  if ( uiConnState > 0 )
  {
    if ( uiStatePn == 2 )
      sDrvCardColor = \"green\";
    else if ( uiStatePn == 1 )
      sDrvCardColor = \"yellow\";
    else if ( uiStatePn == 0 )
      sDrvCardColor = \"darkgrey\";
    else
      sDrvCardColor = \"red\";
  }
  else
    sDrvCardColor = \"darkgrey\";

  sDrvCardFC = sDrvCardColor;

  dyn_string dsGI = getGeneralInfo(sStateGi);
  string sHostIp, sStation;

  if ( dynlen(dsGI) )
  {
    sHostIp = dsGI[1];
    sStation = dsGI[2];
  }

  if ( uiConnState > 0 )
  {
    if ( sHostIp == \"\" || sStation == \"\" )
      sCardPlcColor = \"red\";
    else
      sCardPlcColor = \"green\";
  }
  else
    sCardPlcColor = \"darkgrey\";

  sCardPlcFC = sCardPlcColor;

  if ( uiStatePs > 0 && uiConnState > 0 )
  {
    if ( uiStatePs == 1 || uiStatePs == 2 )
    {
      sPsFC = \"black\";
      sPsBC = \"yellow\";
    }
    else if ( uiStatePs == 3 )
    {
      sPsFC = \"black\";
      sPsBC = \"green\"; //yellow
    }
    else if ( uiStatePs == 4 )
    {
      sPsFC = \"black\";
      sPsBC = \"STD_value_default\"; //= orange
    }
    else
    {
      sPsFC = \"white\";
      sPsBC = \"red\";
    }
  }
  else
  {
    sPsFC = \"white\";
    sPsBC = \"darkgrey\";
  }


  setMultiValue(sLineDrvCard, \"foreCol\", sDrvCardFC,
                sLineCardPlc, \"foreCol\", sCardPlcFC,
                sShapePs,     \"foreCol\", sPsFC,
                sShapePs,     \"backCol\", sPsBC);
}

" 0
 E E E E 1 -1 -1 0  50 40
""0  1
E "////////////////////////////////////////////////////////////////////////////////////////////////////
// PROFIsafe driver
////////////////////////////////////////////////////////////////////////////////////////////////////

#uses \"profisafeDrvPara\"

string sCFG     = \".Config.\";
string sCFGMODS = \".Config.Modules.\";
string sCFGSYMB = \".Config.Symbolic.\";
string sCMD     = \".Command.\";
string sSTA     = \".State.\";
string sSTASTAT = \".State.Statistics.\";

string sORI = \":_original.._value\";
string sONL = \":_online.._value\";
string sOST = \":_online.._stime\";

mapping mMD;
string sSys;
bool bRedu;
bool bMsg;
bool bSaveModule;

////////////////////////////////////////////////////////////////////////////////////////////////////

void createNewEquipment(string sDp)
{
  int iAnswer, iSystem = getSystemId(sSys);
  dyn_errClass dErr;
  string sDp2 = sDp + PSPNREDU;

  isRemoteSystemRedundant(iAnswer, sSys);

  dpCreate(sDp, PSPNINTL + PSPNNAME, iSystem);

  dpSet(sDp + sCFG + \"ReconnectTimeout\"        + sORI, 0,
        sDp + sCFG + \"LifebeatTimeout\"         + sORI, 60,
        sDp + sCFG + \"EstablishmentMode\"       + sORI, 0,
        sDp + sCFG + \"SetInvalidBit\"           + sORI, 1,
        sDp + sCFG + \"AcquireValuesOnConnect\"  + sORI, 1,
        sDp + sCFG + \"EnableStatistics\"        + sORI, 1,
        sDp + sCFG + \"ModeTag\"                 + sORI, \"\",

        sDp + sCFGMODS + \"Slot\"                + sORI, makeDynUInt(),
        sDp + sCFGMODS + \"Area\"                + sORI, makeDynChar(),
        sDp + sCFGMODS + \"Size\"                + sORI, makeDynUInt(),
        sDp + sCFGMODS + \"Sil\"                 + sORI, makeDynUInt(),
        sDp + sCFGMODS + \"FSource\"             + sORI, makeDynUInt(),
        sDp + sCFGMODS + \"FDest\"               + sORI, makeDynUInt(),
        sDp + sCFGMODS + \"FCrcSize\"            + sORI, makeDynUInt(),

        sDp + sCFGSYMB + \"SymAddr\"             + sORI, makeDynString(),
        sDp + sCFGSYMB + \"AbsAddr\"             + sORI, makeDynString(),

        sDp + sCMD + \"Enable\"                  + sORI, 0,
        sDp + sCMD + \"GQ\"                      + sORI, 0,
        sDp + sCMD + \"IGQ\"                     + sORI, 0);

  dErr = getLastError();

  if ( dynlen(dErr) > 0 )
  {
     throwError(dErr);
     errorDialog(dErr);
  }

  if ( bRedu )
  {
    dpCreate(sDp2, PSPNINTL + PSPNNAME, iSystem);

    dpSet(sDp2 + sCFG + \"ReconnectTimeout\"        + sORI, 0,
          sDp2 + sCFG + \"LifebeatTimeout\"         + sORI, 60,
          sDp2 + sCFG + \"EstablishmentMode\"       + sORI, 1,
          sDp2 + sCFG + \"SetInvalidBit\"           + sORI, 1,
          sDp2 + sCFG + \"AcquireValuesOnConnect\"  + sORI, 1,
          sDp2 + sCFG + \"EnableStatistics\"        + sORI, 1,
          sDp2 + sCFG + \"ModeTag\"                 + sORI, \"\",

          sDp2 + sCFGMODS + \"Slot\"                + sORI, makeDynUInt(),
          sDp2 + sCFGMODS + \"Area\"                + sORI, makeDynChar(),
          sDp2 + sCFGMODS + \"Size\"                + sORI, makeDynUInt(),
          sDp2 + sCFGMODS + \"Sil\"                 + sORI, makeDynUInt(),
          sDp2 + sCFGMODS + \"FSource\"             + sORI, makeDynUInt(),
          sDp2 + sCFGMODS + \"FDest\"               + sORI, makeDynUInt(),
          sDp2 + sCFGMODS + \"FCrcSize\"            + sORI, makeDynUInt(),

          sDp2 + sCFGSYMB + \"SymAddr\"             + sORI, makeDynString(),
          sDp2 + sCFGSYMB + \"AbsAddr\"             + sORI, makeDynString(),

          sDp2 + sCMD + \"Enable\"                  + sORI, 1,
          sDp2 + sCMD + \"GQ\"                      + sORI, 0,
          sDp2 + sCMD + \"IGQ\"                     + sORI, 0);

    dErr = getLastError();

    if ( dynlen(dErr) > 0 )
    {
       throwError(dErr);
       errorDialog(dErr);
    }
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void readDpWritePanel(string sDp)
{
  string   sModeTag, sGeneralInfo;
  uint     uiReconnTo, uiLifebeatTo, uiEstMode, uiConnState, uiProfinet, uiProfisafe;
  bool     bDisabled, bInvalidBit, bEnableStats, bAVOC;

  dyn_uint   duiSlot, duiSize, duiSil, duiFSource, duiFDest, duiFCrC;
  dyn_char   dcArea;
  dyn_string dsSymAddr, dsAbsAddr;

  string sDp2 = sDp + PSPNREDU;

  dpGet(sDp + sCFG + \"LifebeatTimeout\"        + sONL, uiLifebeatTo,
        sDp + sCFG + \"ReconnectTimeout\"       + sONL, uiReconnTo,
        sDp + sCFG + \"EstablishmentMode\"      + sONL, uiEstMode,
        sDp + sCFG + \"SetInvalidBit\"          + sONL, bInvalidBit,
        sDp + sCFG + \"AcquireValuesOnConnect\" + sONL, bAVOC,
        sDp + sCFG + \"EnableStatistics\"       + sONL, bEnableStats,
        sDp + sCFG + \"ModeTag\"                + sONL, sModeTag,

        sDp + sCFGMODS + \"Slot\"               + sONL, duiSlot,
        sDp + sCFGMODS + \"Area\"               + sONL, dcArea,
        sDp + sCFGMODS + \"Size\"               + sONL, duiSize,
        sDp + sCFGMODS + \"Sil\"                + sONL, duiSil,
        sDp + sCFGMODS + \"FSource\"            + sONL, duiFSource,
        sDp + sCFGMODS + \"FDest\"              + sONL, duiFDest,
        sDp + sCFGMODS + \"FCrcSize\"           + sONL, duiFCrC,

        sDp + sCFGSYMB + \"SymAddr\"            + sONL, dsSymAddr,
        sDp + sCFGSYMB + \"AbsAddr\"            + sONL, dsAbsAddr,

        sDp + sSTA + \"ConnState\"              + sONL, uiConnState);

  if ( bSaveModule )
    moduleDataSetTable(duiSlot, dcArea, duiSize, duiSil, duiFSource, duiFDest, duiFCrC);

  setConnStateField(uiConnState, \"tfConnStateHost1\");

  cbEstMode.state(0)         = uiEstMode;
  sbLifebeatTimeout.text     = uiLifebeatTo;
  sbReconnectTimeout.text    = uiReconnTo;
  cbInvalidBit.state(0)      = bInvalidBit;
  cbAVOC.state(0)            = bAVOC;
  cbEnableStats.state(0)     = bEnableStats;
  tfModeTag.text             = sModeTag;

  langString lsLangs;
  dyn_string dsList;

  if ( cmbPlc.text == \"\" )
    t1.text = \"\";
  else
  {
    lsLangs = dpGetComment(sDp + \".\");
    t1.text = lsLangs;
    dsList = lsLangs;
    langliste1.items = dsList;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void readDpWritePanel2(string sDp2)
{
  string   sGeneralInfo2;
  uint     uiConnState2, uiProfinet2, uiProfisafe2;
  bool     bDisabled2;

  dyn_uint   duiSlot2, duiSize2, duiSil2, duiFSource2, duiFDest2, duiFCrC2;
  dyn_char   dcArea2;
  dyn_string dsSymAddr2, dsAbsAddr2;

  dpGet(sDp2 + sCFGMODS + \"Slot\"               + sONL, duiSlot2,
        sDp2 + sCFGMODS + \"Area\"               + sONL, dcArea2,
        sDp2 + sCFGMODS + \"Size\"               + sONL, duiSize2,
        sDp2 + sCFGMODS + \"Sil\"                + sONL, duiSil2,
        sDp2 + sCFGMODS + \"FSource\"            + sONL, duiFSource2,
        sDp2 + sCFGMODS + \"FDest\"              + sONL, duiFDest2,
        sDp2 + sCFGMODS + \"FCrcSize\"           + sONL, duiFCrC2,

        sDp2 + sCFGSYMB + \"SymAddr\"            + sONL, dsSymAddr2,
        sDp2 + sCFGSYMB + \"AbsAddr\"            + sONL, dsAbsAddr2,

        sDp2 + sSTA + \"ConnState\"   + sONL, uiConnState2);

  moduleDataSetTable(duiSlot2, dcArea2, duiSize2, duiSil2, duiFSource2, duiFDest2, duiFCrC2, 2);
  setConnStateField(uiConnState2, \"tfConnStateHost2\");
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void loadDp(string sDp)
{
  string sDp2;
  dyn_string dsDp;

  sDp2 = sDp + PSPNREDU;
  dsDp = cmbPlc.items;

  setMultiValue(\"tfConn1\", \"text\", cmbPlc.text,
                \"tfConn3\", \"text\", cmbPlc.text,
                \"tfConn4\", \"text\", cmbPlc.text,
                \"tfConn5\", \"text\", cmbPlc.text);

  if ( shapeExists(\"tfConn2\") )
    setValue(\"tfConn2\", \"text\", cmbPlc.text);

  if ( dynlen(dsDp) > 0 && dpExists(sDp) )
  {
    readDpWritePanel(sDp);

    if ( bRedu && dpExists(sDp2) )
      readDpWritePanel2(sDp2);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

bool setDp()
{
  string   sModeTag;
  uint     uiEstMode, uiReconnTo, uiLifebeatTo, uiConnState;
  bool     bEnable, bInvalidBit, bEnableStats, bAVOC;

  string      sDp, sDp2;
  dyn_string  dsDp = cmbPlc.items, ds;
  langString  ls;

  if ( !getUserPermission(4) )
  {
    ChildPanelOnCentralModal(\"vision/MessageWarning\",
                             getCatStr(\"para\", \"warning\"),
                             makeDynString(getCatStr(\"general\", \"permission\")));
    return 0;
  }

  sDp  = PSPNINTL + cmbPlc.text;
  sDp2 = sDp + PSPNREDU;

  if ( sDp == \"\" || sDp == PSPNINTL )
    return 0;

  if ( !dpExists(sDp) )
  {
    dpCreate(sDp, PSPNINTL + PSPNNAME);

    if ( !dpExists(sDp2) )
      dpCreate(sDp2, PSPNINTL + PSPNNAME);
  }

  uiEstMode     = cbEstMode.state(0);
  uiReconnTo    = sbReconnectTimeout.text;
  uiLifebeatTo  = sbLifebeatTimeout.text;
  bInvalidBit   = cbInvalidBit.state(0);
  bAVOC         = cbAVOC.state(0);
  bEnableStats  = cbEnableStats.state(0);
  sModeTag      = tfModeTag.text;

  bMsg = 0;
  bSaveModule = 1;

  moduleDataSetDp(sDp);
  if ( bRedu )
    moduleDataSetDp(sDp2, 2);

  if ( uiEstMode == 0 )
  {
    dpSetWait(sDp + sCMD + \"Enable\"                + sORI, (bool)uiEstMode);
    delay(0,100);
  }

  dpSetWait(sDp + sCFG + \"ReconnectTimeout\"        + sORI, uiReconnTo,
            sDp + sCFG + \"LifebeatTimeout\"         + sORI, uiLifebeatTo,
            sDp + sCFG + \"EstablishmentMode\"       + sORI, uiEstMode,
            sDp + sCFG + \"SetInvalidBit\"           + sORI, bInvalidBit,
            sDp + sCFG + \"AcquireValuesOnConnect\"  + sORI, bAVOC,
            sDp + sCFG + \"EnableStatistics\"        + sORI, bEnableStats,
            sDp + sCFG + \"ModeTag\"                 + sORI, sModeTag,

            sDp + sCFGSYMB + \"SymAddr\"             + sORI, makeDynString(),
            sDp + sCFGSYMB + \"AbsAddr\"             + sORI, makeDynString());

  if ( uiEstMode == 1 )
  {
    delay(0,100);
    dpSetWait(sDp + sCMD + \"Enable\"                + sORI, (bool)uiEstMode);
  }

  for ( int i = dynlen(dsDp); i > 0; i-- )
  {
    ds = strsplit(dsDp[i], PSPNINTL);

    if ( dynlen(ds) > 4 && ds[5] == \"2\" )
      dynRemove(dsDp,i);
    else
    {
      dsDp[i] = dpSubStr(dsDp[i], DPSUB_DP);
      sDp = dpSubStr(sDp, DPSUB_DP);
    }
  }

  ls = langliste1.items;
  dpSetComment(sSys + sDp + \".\", ls);

  readDpWritePanel(sDp);

  if ( bRedu )
    readDpWritePanel2(sDp2);

  return 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void registerTabs()
{
  dyn_string dsPanels = makeDynString(\"para/profisafe_modules.pnl\",
                                      \"para/profisafe_modules.pnl\",
                                      \"para/profisafe_advanced.pnl\",
                                      \"para/profisafe_states.pnl\",
                                      \"para/profisafe_statistics.pnl\");

  if ( cmbPlc.text == \"\" )
    for ( int i = 1; i <= dynlen(dsPanels); i++ )
      tabMain.namedRegisterPanel(\"#\"+i, dsPanels[i], makeDynString(\"$tab:\"   + i));
  else
    for ( int i = 1; i <= dynlen(dsPanels); i++ )
      tabMain.namedRegisterPanel(\"#\"+i, dsPanels[i], makeDynString(\"$conn:\"  + cmbPlc.text,
                                                                   \"$items:\" + cmbPlc.items,
                                                                   \"$tab:\"   + i));

  if ( !bRedu )
    tabMain.namedRegisterVisible(\"#2\", 0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void moduleDataSetDp(string sDp, int iOpt = 1)
{
  string sShape = \"tableModules\";
  string sMsg;

  if ( iOpt == 2 )
    sShape += \"Redu\";

  int iColumnC;
  getValue(sShape, \"columnCount\", iColumnC);

  for ( int i = 1; i <= iColumnC; i++ )
  {
    string sCol;
    getValue(sShape, \"columnToName\", (i-1), sCol);

    dyn_anytype daMD;
    getValue(sShape, \"getColumnN\", i-1, daMD);

    if ( i == 2 )
      daMD = (dyn_char)daMD;
    else
      daMD = (dyn_uint)daMD;

    mMD[sCol] = daMD;
  }

  dyn_uint duiSize1, duiSil1, duiFSource1, duiFDest1;
  string sShape1 = \"tableModules\";

  bool bCheckSize = 0;
  bool bCheckSil = 0;
  bool bCheckSrc = 0;
  bool bCheckDest = 0;
  bool bCheckFSFD = 0;

  getMultiValue(sShape1, \"getColumnN\", 2, duiSize1,
                sShape1, \"getColumnN\", 3, duiSil1,
                sShape1, \"getColumnN\", 4, duiFSource1,
                sShape1, \"getColumnN\", 5, duiFDest1);

  if ((dynlen(duiSize1) == dynlen(duiSil1)) && (dynlen(duiSize1) == dynlen(duiFSource1)) && (dynlen(duiSize1) == dynlen(duiFDest1)))
  {
    for ( int i = 1; i <= dynlen(duiSil1); i++ )
    {
      if ( duiSize1[i] < 1 || duiSize1[i] > 16384 )
        bCheckSize = 1;
      if ( duiSil1[i] == 0 && ( duiFSource1[i] > 0 || duiFDest1[i] > 0 ) )
        bCheckSil = 1;
      if ( duiFSource1[i] < 0 || duiFSource1[i] > 32767 )
        bCheckSrc = 1;
      if ( duiFDest1[i] < 0 || duiFDest1[i] > 32767 )
        bCheckDest = 1;
    }
  }
  else
    bCheckSize = 1;   // internal error if list sizes differ

  if ( bRedu )
  {
    dyn_uint duiSize2, duiSil2, duiFSource2, duiFDest2;
    string sShape2 = \"tableModulesRedu\";

    getMultiValue(sShape2, \"getColumnN\", 2, duiSize2,
                  sShape2, \"getColumnN\", 3, duiSil2,
                  sShape2, \"getColumnN\", 4, duiFSource2,
                  sShape2, \"getColumnN\", 5, duiFDest2);

    if ((dynlen(duiSize2) == dynlen(duiSil2)) && (dynlen(duiSize2) == dynlen(duiFSource2)) && (dynlen(duiSize2) == dynlen(duiFDest2)))
    {
      for ( int i = 1; i <= dynlen(duiSil2); i++ )
      {
        if ( duiSize2[i] < 1 || duiSize2[i] > 16384 )
          bCheckSize = 1;
        if ( duiSil2[i] == 0 && ( duiFSource2[i] > 0 || duiFDest2[i] > 0 ) )
          bCheckSil = 1;
        if ( duiFSource2[i] < 0 || duiFSource2[i] > 32767 )
          bCheckSrc = 1;
        if ( duiFDest2[i] < 0 || duiFDest2[i] > 32767 )
          bCheckDest = 1;
      }
    }
    else
      bCheckSize = 1;   // internal error if list sizes differ

    if ((dynlen(duiFSource1) == dynlen(duiFSource2)) && (dynlen(duiFSource1) == dynlen(duiFDest1)) && (dynlen(duiFSource1) == dynlen(duiFDest2))
         && (dynlen(duiFSource1) == dynlen(duiSil1)) && (dynlen(duiFSource1) == dynlen(duiSil2)))
    {
      for ( int i = 1; i <= dynlen(duiFSource1); i++ )
      {
        if ( duiSil1[i] != duiSil2[i] )   // inconsistent F-Parameters => invalid
          bCheckFSFD = 1;
        else if ( duiSil1[i] == 0 )    // consistent but not PROFIsafe => skip
          continue;

        if ( duiFSource1[i] == duiFSource2[i] )
          bCheckFSFD = 1;
        if ( duiFDest1[i] == duiFDest2[i] )
          bCheckFSFD = 1;
      }
    }
    else
      bCheckSize = 1;   // internal error if list sizes differ
  }

  moduleErrMsg(sMsg, bCheckSize, \"modulechecksize\");
  moduleErrMsg(sMsg, bCheckSil, \"modulechecksil\");
  moduleErrMsg(sMsg, bCheckSrc, \"modulechecksrc\");
  moduleErrMsg(sMsg, bCheckDest, \"modulecheckdest\");
  moduleErrMsg(sMsg, bCheckFSFD, \"moduleredusame\");

  if ( sMsg != \"\" && !bMsg )
  {
    dyn_float df;
    dyn_string ds;

    ChildPanelOnCentralModalReturn(\"vision/MessageInfoList\",
                                   \"Error on saving module data!\",
                                   makeDynString(getCatStr(\"para\", \"information\"),
                                                 sMsg,
                                                 \"\"),
                                   df, ds);

    bMsg = 1;


    bSaveModule = 0;

    return;
  }

  dyn_uint crcSize;
  for ( int i = 1; i <= dynlen(duiSil1); i++ )
  {
    if (duiSil1[i] == 0)
      dynAppend(crcSize, 0);
    else
      dynAppend(crcSize, 3);    // 3 byte size for SIL3 CRC
  }

  if ( iOpt == 2 )
    dpSetWait(sDp + sCFGMODS + \"Slot\"     + sORI, mMD[\"#1Redu\"],
              sDp + sCFGMODS + \"Area\"     + sORI, mMD[\"#2Redu\"],
              sDp + sCFGMODS + \"Size\"     + sORI, mMD[\"#3Redu\"],
              sDp + sCFGMODS + \"Sil\"      + sORI, mMD[\"#4Redu\"],
              sDp + sCFGMODS + \"FSource\"  + sORI, mMD[\"#5Redu\"],
              sDp + sCFGMODS + \"FDest\"    + sORI, mMD[\"#6Redu\"],
              sDp + sCFGMODS + \"FCrcSize\" + sORI, crcSize);
  else
    dpSetWait(sDp + sCFGMODS + \"Slot\"     + sORI, mMD[\"#1\"],
              sDp + sCFGMODS + \"Area\"     + sORI, mMD[\"#2\"],
              sDp + sCFGMODS + \"Size\"     + sORI, mMD[\"#3\"],
              sDp + sCFGMODS + \"Sil\"      + sORI, mMD[\"#4\"],
              sDp + sCFGMODS + \"FSource\"  + sORI, mMD[\"#5\"],
              sDp + sCFGMODS + \"FDest\"    + sORI, mMD[\"#6\"],
              sDp + sCFGMODS + \"FCrcSize\" + sORI, crcSize);
}



////////////////////////////////////////////////////////////////////////////////////////////////////

void moduleDataSetTable(dyn_uint duiSlot,
                        dyn_char dcArea,
                        dyn_uint duiSize,
                        dyn_uint duiSil,
                        dyn_uint duiFSource,
                        dyn_uint duiFDest,
                        dyn_uint duiFCrC,
                        int iOpt = 1)
{
  string sShape = \"tableModules\";

  if ( iOpt == 2 )
    sShape += \"Redu\";

  setValue(sShape, \"deleteAllLines\");

  dyn_string dsAreaList = makeDynString(\"\", \"Input\", \"Output\", \"Bidirectional\");
  dyn_string dsSilList = makeDynString(\"\", \"0\", \"3\");

  dyn_string dsArea;

  for ( int i = 1; i <= dynlen(dcArea); i++ )
  {
    if ( dcArea[i] == 'I' )
      dsArea[i] = \"Input\";
    if ( dcArea[i] == 'O' )
      dsArea[i] = \"Output\";
    if ( dcArea[i] == 'B' )
      dsArea[i] = \"Bidirectional\";
  }

  string sColRedu = ( iOpt == 2 ) ? \"Redu\" : \"\";

  setValue(sShape, \"appendLines\", dynlen(duiSlot), \"#1\" + sColRedu, duiSlot,
                                                   \"#2\" + sColRedu, dsArea,
                                                   \"#3\" + sColRedu, duiSize,
                                                   \"#4\" + sColRedu, duiSil,
                                                   \"#5\" + sColRedu, duiFSource,
                                                   \"#6\" + sColRedu, duiFDest,
                                                   \"#7\" + sColRedu, duiFCrC);

  for ( int i = 1; i <= dynlen(duiSlot); i++ )
    setMultiValue(sShape, \"cellWidgetRC\", i-1, \"#2\" + sColRedu, \"ComboBox\", dsAreaList,
                  sShape, \"cellWidgetRC\", i-1, \"#4\" + sColRedu, \"ComboBox\", dsSilList);

  int iColumnC;
  getValue(sShape, \"columnCount\", iColumnC);

  for ( int i = 1; i <= iColumnC; i++ )
    setValue(sShape, \"namedColumnEditable\", \"#\" + i + sColRedu, 0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void moduleErrMsg(string &sMsg, bool bCheck, string sText)
{
  if ( bCheck )
  {
    if ( sMsg != \"\" )
      sMsg += \"\\n\" + getCatStr(\"profisafe\", sText);
    else
      sMsg = getCatStr(\"profisafe\", sText);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void setConnStateField(uint uiConnState, string sShape)
{
  string sBackCol, sForeCol;

  if ( uiConnState == 3 )
  {
    sBackCol = \"green\";
    sForeCol = \"black\";
  }
  else if ( uiConnState == 1 || uiConnState == 5 )
  {
    sBackCol = \"red\";
    sForeCol = \"white\";
  }
  else
  {
    sBackCol = \"yellow\";
    sForeCol = \"black\";
  }

  setMultiValue(sShape, \"text\",    getCatStr(\"profisafe\", \"connstate\"+uiConnState),
                sShape, \"backCol\", sBackCol,
                sShape, \"foreCol\", sForeCol);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

dyn_string getGeneralInfo(string sInfo)
{
  dyn_string dsRet;

  if ( sInfo != \"\" )
  {
    anytype aInfo = jsonDecode(sInfo);
    string sHostIp, sStation;

    if ( mappingHasKey(aInfo, \"hostIp\") )
      sHostIp = aInfo[\"hostIp\"];

    if ( mappingHasKey(aInfo, \"station\") )
      sStation = aInfo[\"station\"];

    dsRet = makeDynString(sHostIp, sStation);
  }

  return dsRet;
}

setGeneralInfoField(string sInfo, dyn_string dsShapes)
{
  dyn_string dsGI = getGeneralInfo(sInfo);
  string sHostIp, sStation, sBackCol;

  if ( dynlen(dsGI) )
  {
    sHostIp = dsGI[1];
    sStation = dsGI[2];
  }

  setMultiValue(dsShapes[1], \"text\", sHostIp,
                dsShapes[2], \"text\", sStation);

  //sBackCol = ( sHostIp != \"\" && sStation != \"\" ) ? \"green\" : \"_3DFace\";
  //setMultiValue(dsShapes[1], \"backCol\", sBackCol,
  //              dsShapes[2], \"backCol\", sBackCol);

}

////////////////////////////////////////////////////////////////////////////////////////////////////

void setSettingsEnabled(bool bState)
{
  registerTabs();

  dyn_string dsShapes = makeDynString(\"tabMain\", \"cbAVOC\", \"cbEnableStats\", \"cbEstMode\", \"cbInvalidBit\", \"tfModeTag\",
                                      \"cmbPlc\", \"langedit1\", \"t1\", \"ptEstMode\",
                                      \"cmdApply\", \"cmdGQ\", \"cmdIGQ\", \"cmdOk\", \"cmdRemoveDp\",
//                                       \"cmdEdit\", \"cmdDone\", \"cmdInsert\", \"cmdAdd\",
//                                       \"cmdDeleteAll\", \"cmdDeleteSel\", \"cmdCopy\",
                                      \"tableModules\",
                                      \"ptLifebeatTimeout\", \"sbLifebeatTimeout\", \"ptLifebeatTimeoutSec\",
                                      \"ptReconnectTimeout\",\"sbReconnectTimeout\", \"ptReconnectTimeoutSec\",
                                      \"ptConnStateHost1\", \"tfConnStateHost1\",
                                      \"frmStatesH1\", \"ptGeneralInfoHostIp1\", \"ptGeneralInfoStation1\", \"ptProfisafe1\", \"ptProfinet1\",
                                      \"frmStatisticsH1\", \"ptPnReadsPerSec1\", \"ptPnWritesPerSec1\", \"ptPsReadsPerSec1\", \"ptPsWritesPerSec1\", \"ptLastUpdateTime1\",
                                      \"tfStateDrv1\", \"tfStateCard1\", \"tfStatePlc1\", \"lnDrvCard1\", \"lnCardPlc1\");

  dyn_string dsShapesRedu = makeDynString(\"ptConnStateHost2\", \"tfConnStateHost2\",
                                          \"frmStatesH2\", \"ptGeneralInfoHostIp2\", \"ptGeneralInfoStation2\", \"ptProfisafe2\", \"ptProfinet2\",
                                          \"frmStatisticsH2\", \"ptPnReadsPerSec2\", \"ptPnWritesPerSec2\", \"ptPsReadsPerSec2\", \"ptPsWritesPerSec2\", \"ptLastUpdateTime2\",
                                          \"tfStateDrv2\", \"tfStateCard2\", \"tfStatePlc2\", \"lnDrvCard2\", \"lnCardPlc2\");

  for ( int i = 1; i <= dynlen(dsShapes); i++ )
    setValue(dsShapes[i], \"enabled\", bState);

  for ( int i = 1; i <= dynlen(dsShapesRedu); i++ )
    setValue(dsShapesRedu[i], \"enabled\", bState && bRedu);

}

////////////////////////////////////////////////////////////////////////////////////////////////////

void setLangList()
{
  langString ls;
  dyn_string ds;

  getValue(\"langliste1\", \"items\", ds);
  ls = ds;

  if ( getNoOfLangs() > 1 )
  {
    langEditor(ls);
    ds = ls;
  }
  else
  {
    ds[1] = t1.text;
    ls = ds;
  }

  setMultiValue(\"t1\",         \"text\",  ls,
                \"langliste1\", \"items\", ds);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

" 0
 3
"CBRef" "1"
"EClose" "main()
{
  PanelOff();
}



" 0

"dpi" "96"
0 0 0
""
NC
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
4
LANG:10001 6 Layer1
LANG:10004 6 Layer1
LANG:10000 6 Layer1
LANG:10027 6 Layer1
17 126
"langliste1"
""
1 91.4482758620691 537.9444444444446 E E E 1 E 0 E N "_3DText" E N "_3DFace" E E
 E E
338 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,11,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  513 53 541 81
0

E
E
E

0 0
30 21
"frmConnection"
""
1 10 150 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
63 0 0 0 0 0
E E E
1
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E 1.04823675707848 0 0.8585858585858587 -0.4823675707848014 -37.92929292929293 0 E 10 50 630 150
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0 4
LANG:10001 40 CP1616 connection for PROFIsafe/PROFINET
LANG:10004 39 用于PROFIsafe/PROFINET的CP1616连接
LANG:10000 41 CP1616-Verbindung für PROFIsafe/PROFINET
LANG:10027 53 Соединение CP1616 для PROFIsafe/PROFINET
13 23
"cmdApply"
""
1 485 600 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
333 0 0 0 0 0
E E E
0
4
LANG:10001 14 Accept changes
LANG:10004 12 接受更改
LANG:10000 23 Änderungen übernehmen
LANG:10027 37 Применить изменения

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  483 598 571 626

T 
4
LANG:10001 5 Apply
LANG:10004 6 应用
LANG:10000 11 Übernehmen
LANG:10027 18 Применить
"main()
{
  if ( cmbPlc.text == \"\" )
    return;
  else
    setDp();
}

" 0
 E E E
13 24
"cmdCancel"
""
1 575 600 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
334 0 0 0 27 0
E E E
0
4
LANG:10001 31 Discard changes and close panel
LANG:10004 27 放弃更改并关闭面板
LANG:10000 42 Änderungen verwerfen und Panel schließen
LANG:10027 66 Отменить изменения и закрыть панель

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  573 598 661 626

T 
4
LANG:10001 6 Cancel
LANG:10004 6 取消
LANG:10000 9 Abbrechen
LANG:10027 16 Отменить
"main()
{
  PanelOff();
}


" 0
 E E E
13 25
"cmdHelp"
""
1 10 598 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
331 0 0 0 0 0
E E E
0
4
LANG:10001 16 Open online help
LANG:10004 18 打开在线帮助
LANG:10000 20 Online Hilfe öffnen
LANG:10027 14 Справка

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  8 598 96 626

T 
4
LANG:10001 4 Help
LANG:10004 6 帮助
LANG:10000 5 Hilfe
LANG:10027 14 Справка
"main()
{
  std_help(\"profisafe\");
}




" 0
 E E E
22 26
"cmbPlc"
""
1 25 58 E E E 1 E 1 E N {0,0,0} E N "_Window" E E
 E E
19 0 0 0 0 0
E E E
0
4
LANG:10001 19 Select a connection
LANG:10004 18 选择一个连接
LANG:10000 21 Verbindung auswählen
LANG:10027 33 Выбор подключения

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  23 23 531 49
0

E
"main()
{
  cmbPlc.enabled = 0;
  string sDp = sSys + PSPNINTL + cmbPlc.text;
  loadDp(sDp);
  cmbPlc.enabled = 1;
}







" 0

E
 0 0
13 27
"cmdNewDp"
""
1 555 35 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
98 0 0 0 0 0
E E E
0
4
LANG:10001 45 Create a new connection with default settings
LANG:10004 6 创建
LANG:10000 48 Neue Verbindung mit Grundeinstellungen erstellen
LANG:10027 98 Создать новое подключение с настройками по умолчанию

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  558 23 646 51

T 
4
LANG:10001 6 Create
LANG:10004 6 创建
LANG:10000 9 Erstellen
LANG:10027 14 Создать
"main()
{
  string     sPlc = PSPNINTL + cmbPlc.text, sInput = \"\";
  dyn_string dsPlc = cmbPlc.items, dsDrvNum;

  for ( int i = 1; i <= dynlen(dsPlc); i++ )
    dsDrvNum[i] = substr(dsPlc[i], strlen(PSPNNAME));

  dyn_float  df;
  dyn_string ds;

  // define driver num for dp
  ChildPanelOnCentralModalReturn(\"para/profisafe_input.pnl\",
                                 getCatStr(\"da\", \"createdp\"),
                                 makeDynString(getCatStr(\"profisafe\", \"inputdrvnum\"),
                                               dsDrvNum),
                                 df, ds);

  if ( dynlen(df) < 1 || df[1] == 0 )
    return;

  sPlc = ( dynlen(ds) > 0 ) ? ds[1] : \"\";

  if ( (sPlc == \"\") || (sPlc == \" \") || (sPlc == PSPNINTL) || (sPlc == PSPNINTL + PSPNNAME))
  {
    // dp name empty
    ChildPanelOnCentralModal(\"vision/MessageWarning\",
                             getCatStr(\"para\",\"warning\"),
                             makeDynString(getCatStr(\"s7plus\", \"s7plusDpEmpty\")));
    return;
  }
  else if ( dpExists(sSys	+ sPlc) || dpExists(sSys	+ PSPNINTL + sPlc))
  {
    // dp exists
    ChildPanelOnCentralModal(\"vision/MessageWarning\",
                             getCatStr(\"para\", \"warning\"),
                             makeDynString(getCatStr(\"s7plus\", \"s7plusDpExists\")));
    return;
  }

  if ( strpos(sPlc, PSPNINTL, 0) != -1 )
    sPlc = strltrim(sPlc, PSPNINTL);

  // enable the settings again, because the first PLC has been created
  if ( dynlen(dsPlc) < 1 )
    setSettingsEnabled(1);

  createNewEquipment(PSPNINTL + sPlc);
  tabMain.activeRegister(0);

  cmbPlc.text = sPlc;

  string sDp = sSys + PSPNINTL + cmbPlc.text;
  loadDp(sDp);

  dsPlc = cmbPlc.items;
  dynAppend(dsPlc, sPlc);
  dynSortAsc(dsPlc);
  dynUnique(dsPlc);
  cmbPlc.items = dsPlc;

  cmbPlc.selectedPos = dynContains(dsPlc, sPlc);
}

" 0
 E E E
13 28
"cmdRemoveDp"
""
1 555 65 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
100 0 0 0 0 0
E E E
0
4
LANG:10001 19 Remove a connection
LANG:10004 18 删除一个连接
LANG:10000 20 Verbindung entfernen
LANG:10027 37 Удалить подключение

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  558 53 646 81

T 
4
LANG:10001 6 Remove
LANG:10004 6 删除
LANG:10000 9 Entfernen
LANG:10027 14 Удалить
"main()
{
  int        iPos = cmbPlc.selectedPos;
  string     sPlc = cmbPlc.text;
  dyn_string dsPlc = cmbPlc.items, dsDpe;

  string sDp  = sSys + PSPNINTL + cmbPlc.text,
         sDp2 = sDp + PSPNREDU;

  if ( sPlc == \"\" )
    return;

  dyn_float  df;
  dyn_string ds;

  ChildPanelOnCentralModalReturn(\"vision/MessageInfo\",
                                 getCatStr(\"para\", \"information\"),
                                 makeDynString(getCatStr(\"profisafe\", \"connDelete\"),
                                               getCatStr(\"para\", \"yes\"),
                                               getCatStr(\"para\", \"no\")),
                                 df, ds);

  if ( !df[1] )
    return;



  dynRemove(dsPlc, iPos);
  cmbPlc.items = dsPlc;

  if ( dynlen(dsPlc) < 1 )
  {
    cmbPlc.text = \"\";
    t1.text = \"\";

    // disable settings - no connection in the list
    setSettingsEnabled(0);
  }
  else
  {
    if ( iPos < 1 )
      iPos = 1;

    if ( iPos > dynlen(dsPlc) )
      iPos = dynlen(dsPlc);

    cmbPlc.selectedPos(iPos);
    cmbPlc.text = dsPlc[iPos];

    loadDp(sSys + PSPNINTL + cmbPlc.text);
  }

  delay(0,501);

  if ( dpExists(sDp2) )
    dpDelete(sDp2);

  if ( dpExists(sDp) )
    dpDelete(sDp);
}

" 0
 E E E
13 29
"cmdOk"
""
1 395 600 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
332 0 0 0 0 0
E E E
0
4
LANG:10001 30 Accept changes and close panel
LANG:10004 15 保存并关闭
LANG:10000 44 Änderungen übernehmen und Panel schließen
LANG:10027 64 Принять изменения и закрыть панель

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  393 598 481 626

T 
4
LANG:10001 2 OK
LANG:10004 6 确定
LANG:10000 2 OK
LANG:10027 2 OK
"main()
{
  if ( cmbPlc.text == \"\" )
    PanelOff();
  else
    if ( setDp() )
      PanelOff();
}









" 0
 E E E
1 159 0 "" 0
0
13 55
"cmdIGQ"
""
1 -1 267.6329113924047 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
329 0 0 0 0 0
E E E
0
4
LANG:10001 21 Inverse general query
LANG:10004 18 反向常规查询
LANG:10000 22 Inverse Generalabfrage
LANG:10027 42 Инверсный общий запрос

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  118 543 206 571

T 
4
LANG:10001 10 Inverse GQ
LANG:10004 10 Inverse GQ
LANG:10000 10 Inverse GA
LANG:10027 17 Инверс.ОЗ
"main()
{
  string sDp = sSys + PSPNINTL + cmbPlc.text;

  dyn_float df;
  dyn_string ds;

  ChildPanelOnCentralModalReturn(\"vision/MessageInfo\",
                                 getCatStr(\"para\", \"information\"),
                                 makeDynString(\"$1:\" + getCatStr(\"s7plus\", \"s7plusStartIGQ\"),
                                               \"$2:\" + \"OK\",
                                               \"$3:\" + getCatStr(\"general\", \"cancel\")),
                                 df, ds);

  if ( dynlen(ds) > 0 && df[1] == 1 )
  {
    dpSet(sDp + sCMD + \"IGQ\" + sORI, 1);
    return;
  }
}

" 0
 E E E
13 81
"cmdGQ"
""
1 -119 267.6329113924049 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
327 0 0 0 0 0
E E E
0
4
LANG:10001 13 General query
LANG:10004 13 General query
LANG:10000 14 Generalabfrage
LANG:10027 21 Общий опрос

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  23 543 111 571

T 
4
LANG:10001 2 GQ
LANG:10004 15 总召唤数值
LANG:10000 2 GA
LANG:10027 19 Общ.запрос
"main()
{
  string sDp = sSys + PSPNINTL + cmbPlc.text;
  dpSet(sDp + sCMD + \"GQ\" + sORI, 1);
}




" 0
 E E E
30 87
"frmCommands"
""
1 10 440 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
194 0 0 0 0 0
E E E
1
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E 1.227291579447497 0 0.5483300222626547 -2.272915794474971 338.5677924306974 0 E 10 340 540 440
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0 4
LANG:10001 8 Commands
LANG:10004 6 指令
LANG:10000 7 Befehle
LANG:10027 14 Команды
28 120
"tabMain"
""
1 10 105 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
101 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  8 103 661 466
E5 "#1" 4
LANG:10001 16 Modules (Host 1)
LANG:10004 14 模块(Host 1)
LANG:10000 15 Module (Host 1)
LANG:10027 25 Модули (Хост 1)
0
"#2" 4
LANG:10001 16 Modules (Host 2)
LANG:10004 14 模块(Host 2)
LANG:10000 15 Module (Host 2)
LANG:10027 25 Модули (Хост 2)
0
"#3" 4
LANG:10001 17 Advanced settings
LANG:10004 12 高级设置
LANG:10000 9 Erweitert
LANG:10027 47 Дополнительные настройки
0
"#4" 4
LANG:10001 13 State details
LANG:10004 12 状态细节
LANG:10000 13 Statusdetails
LANG:10027 31 Детали состояния
0
"#5" 4
LANG:10001 10 Statistics
LANG:10004 6 统计
LANG:10000 9 Statistik
LANG:10027 20 Статистики
0

2 123
"ptConnDescription"
""
1 25 55 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
335 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

5
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 0 1 1 0 1 E U  0 E 27 57 180 74
0 2 0 "0s" 0 0 0 64 0 0  27 57 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 4
LANG:10001 12 Description:
LANG:10004 7 描述:
LANG:10000 13 Beschreibung:
LANG:10027 17 Описание:
14 124
"t1"
""
1 150 50 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
336 0 0 0 0 0
E E E
0
4
LANG:10001 38 Description of the selected connection
LANG:10004 24 选择的连接的描述
LANG:10000 38 Beschreibung der gewählten Verbindung
LANG:10027 60 Описание выбранного подключения

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  148 53 501 79
3 "0s" 0 0 0 0 0 -1  "main()
{
  setLangList();
}

" 0
 E E
13 125
"langedit1"
""
1 498 63 E E E 1 E 0 E N "_ButtonText" E N "_Button" E E
 E E
337 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  503 53 531 81

P 
13160660
"pictures/StandardIcons/switch_de_en_20.png"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()
{
  setLangList();
}

" 0
 E E E
30 148
"frmState"
""
1 10 84 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
354 0 0 0 0 0
E E E
1
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E 1.161001788908766 0 0.6808229795223605 -1.610017889087655 463.149852770969 0 E 10 10 570 90
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0 4
LANG:10001 5 State
LANG:10004 6 状态
LANG:10000 6 Status
LANG:10027 18 Состояние
2 149
"ptConnStateHost1"
""
1 60 492.9542013223218 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
355 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 60 492.9542013223218 139 508
0 2 2 "0s" 0 0 0 192 0 0  60 492.9542013223218 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 4
LANG:10001 13 State Host 1:
LANG:10004 16 主机1状态：
LANG:10000 14 Status Host 1:
LANG:10027 23 Сост. хоста 1:
2 150
"ptConnStateHost2"
""
1 370 492.9542013223218 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
356 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  1 E 370 492.9542013223218 449 508
0 2 2 "0s" 0 0 0 192 0 0  370 492.9542013223218 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 4
LANG:10001 13 State Host 2:
LANG:10004 16 主机2状态：
LANG:10000 14 Status Host 2:
LANG:10027 23 Сост. хоста 2:
14 151
"tfConnStateHost1"
""
1 210 494.9542013223218 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
357 0 0 0 0 0
E E E
0
4
LANG:10001 23 Connection state host 1
LANG:10004 23 Connection state host 1
LANG:10000 24 Verbindungsstatus Host 1
LANG:10027 52 Состояние подключения Хост 1

2
"transparentForMouse" ""
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0  163 488 296 513
2 "0s" 0 0 0 1 0 -1  E E E
14 152
"tfConnStateHost2"
""
1 210 494.9542013223218 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
358 0 0 0 0 0
E E E
0
4
LANG:10001 23 Connection state host 2
LANG:10004 23 Connection state host 2
LANG:10000 24 Verbindungsstatus Host 2
LANG:10027 52 Состояние подключения Хост 2

2
"transparentForMouse" ""
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0  463 488 596 513
2 "0s" 0 0 0 1 0 -1  E E E
20 155
"cbEstMode"
""
1 310.6583092488404 211.3779761904761 E E E 0 E 1 E N "_3DText" E N "_3DFace" E E
 E E
359 0 0 0 0 0
E E E
0
4
LANG:10001 49 Establish connection to CP1616 and stay connected
LANG:10004 39 建立到CP1616的连接并保持连接
LANG:10000 53 Verbindung zu CP1616 herstellen und verbunden bleiben
LANG:10027 49 Establish connection to CP1616 and stay connected

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  549.9999999999999 545.6398809523811 637.9999999999999 573.6398809523811
1
T 
4
LANG:10001 6 Active
LANG:10004 6 激活
LANG:10000 5 Aktiv
LANG:10027 14 Активно

1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E E
0 0 0 0 0
0
EE2 158
"ptEstMode"
""
1 -9354 3195.483759427114 E E E 0 E 0 E N "_WindowText" E N "_Window" E E
 E E
360 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E 1 0 0.9761904761904761 339.9999999999999 520.3065476190477 0 E 171 30 210 45
0 2 2 "0s" 0 0 0 194 0 0  210 30 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 4
LANG:10001 7 Active:
LANG:10004 7 激活:
LANG:10000 6 Aktiv:
LANG:10027 15 Активно:
0
LAYER, 1 
4
LANG:10001 6 Layer2
LANG:10004 6 Layer2
LANG:10000 6 Layer2
LANG:10027 6 Layer2
0
LAYER, 2 
4
LANG:10001 6 Layer3
LANG:10004 6 Layer3
LANG:10000 6 Layer3
LANG:10027 6 Layer3
0
LAYER, 3 
4
LANG:10001 6 Layer4
LANG:10004 6 Layer4
LANG:10000 6 Layer4
LANG:10027 6 Layer4
0
LAYER, 4 
4
LANG:10001 6 Layer5
LANG:10004 6 Layer5
LANG:10000 6 Layer5
LANG:10027 6 Layer5
0
LAYER, 5 
4
LANG:10001 6 Layer6
LANG:10004 6 Layer6
LANG:10000 6 Layer6
LANG:10027 6 Layer6
0
LAYER, 6 
4
LANG:10001 6 Layer7
LANG:10004 6 Layer7
LANG:10000 6 Layer7
LANG:10027 6 Layer7
0
LAYER, 7 
4
LANG:10001 6 Layer8
LANG:10004 6 Layer8
LANG:10000 6 Layer8
LANG:10027 6 Layer8
0
3 0 "PANEL_REF0" -1
"layoutAlignment" "AlignCenter"
"" ""
"objects_parts/STD_OBJECTS/ButtonBarBackground.pnl" 0 595 T 103 1.340681362725451 0 1 0 -5
0
0

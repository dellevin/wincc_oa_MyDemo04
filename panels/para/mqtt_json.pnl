V 14
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
PANEL,-1 -1 430 220 N "_3DFace" 0
"main()
{
  dyn_string sJson;
  string sDefaultValue, sDefaultValueTime, sDefaultValueTimeStatus;

  if(!dpExists(sCONF))
  {
    // if we couldn't fine config dp
    dpCreate(sCONF, \"_MqttConfig\");
  }

  dpGet(sCONF + \".JsonProfiles\", sJson);

  if ( sJson == \"\" )
  {
     // no  fill in default values
    dynAppend(sJson, \"{\\\"name\\\": \\\"Value\\\",\\\"\" + sVALUE_KEY + \"\\\":\\\"Value\\\" }\");
    dynAppend(sJson, \"{\\\"name\\\": \\\"Value & Timestamp\\\", \\\"\" + sVALUE_KEY + \"\\\": \\\"Value\\\", \\\"\" + sTIMESTAMP_KEY + \"\\\": \\\"Time\\\"}\");
    dynAppend(sJson, \"{\\\"name\\\": \\\"Value, Timestamp & Status\\\", \\\"\" + sVALUE_KEY + \"\\\": \\\"Value\\\", \\\"\" + sTIMESTAMP_KEY + \"\\\": \\\"Time\\\",\\\"\" + sSTATUS64_KEY + \"\\\": \\\"Status\\\"}\");
    dpSet(sCONF + \".JsonProfiles\", sJson);
  }

  dpGet(sCONF + \".JsonProfiles\", sJson);

  if ( sJson != \"\" )
  {
    mJSONValue = jsonDecode(sJson[uiJSONVALUE]);
    mJSONValueTime = jsonDecode(sJson[uiJSONVALUETIME]);
    mJSONValueTimeStatus = jsonDecode(sJson[uiJSONVALUETIMESTATUS]);

    cmbProfile.appendItem(mJSONValue[\"name\"]);
    cmbProfile.appendItem(mJSONValueTime[\"name\"]);
    cmbProfile.appendItem(mJSONValueTimeStatus[\"name\"]);
    cmbProfile.selectedPos = 1;
    profileChanged(cmbProfile.selectedPos);
  }
}
" 0
 E E E E 1 -1 -1 0  30 31
""0  1
E "// global constants
const string sCONF     = \"_MqttConfig\";

const uint uiJSONVALUE = 1;
const uint uiJSONVALUETIME = 2;
const uint uiJSONVALUETIMESTATUS = 3;

const string sVALUE_KEY = \"_value\";
const string sTIMESTAMP_KEY = \"_stime\";
const string sSTATUS64_KEY = \"_status64\";
const string sSTATUS64_KEY_DISPLAY = \"_userbits32\";   // used to display other text than internally used on Datapoint
// global variables
mapping mJSONValue, mJSONValueTime, mJSONValueTimeStatus;

////////////////////////////////////////////////////////////////////////////////////////////////////

// function sets value to _MqttConfig dp
void setJsonProfiles()
{
  dyn_string dsProfiles;
  uint uiProfile;

  // get selected position, to set the correct json profil
  uiProfile = cmbProfile.selectedPos;

  switch(uiProfile)
  {
    case uiJSONVALUE:
      if ( mappingHasKey(mJSONValue, sVALUE_KEY) )
        mJSONValue[sVALUE_KEY] = tfValue.text;
      if ( mappingHasKey(mJSONValue, sTIMESTAMP_KEY) )
        mJSONValue[sTIMESTAMP_KEY] = tfTimeStamp.text;
      if ( mappingHasKey(mJSONValue, sSTATUS64_KEY) )
        mJSONValue[sSTATUS64_KEY] = tfStatus.text;
      break;
    case uiJSONVALUETIME:
      if ( mappingHasKey(mJSONValueTime, sVALUE_KEY) )
        mJSONValueTime[sVALUE_KEY] = tfValue.text;
      if ( mappingHasKey(mJSONValueTime, sTIMESTAMP_KEY) )
        mJSONValueTime[sTIMESTAMP_KEY] = tfTimeStamp.text;
      if ( mappingHasKey(mJSONValueTime, sSTATUS64_KEY) )
        mJSONValueTime[sSTATUS64_KEY] = tfStatus.text;
      break;
    case uiJSONVALUETIMESTATUS:
      if ( mappingHasKey(mJSONValueTimeStatus, sVALUE_KEY) )
        mJSONValueTimeStatus[sVALUE_KEY] = tfValue.text;
      if ( mappingHasKey(mJSONValueTimeStatus, sTIMESTAMP_KEY) )
        mJSONValueTimeStatus[sTIMESTAMP_KEY] = tfTimeStamp.text;
      if ( mappingHasKey(mJSONValueTimeStatus, sSTATUS64_KEY) )
        mJSONValueTimeStatus[sSTATUS64_KEY] = tfStatus.text;
      break;
    default:
      break;
  }

  dynAppend(dsProfiles, jsonEncode(mJSONValue));
  dynAppend(dsProfiles, jsonEncode(mJSONValueTime));
  dynAppend(dsProfiles, jsonEncode(mJSONValueTimeStatus));

  dpSet(sCONF + \".JsonProfiles\", dsProfiles);
}

////////////////////////////////////////////////////////////////////////////////////////////////////

void profileChanged(uint uiPos)
{
  tfWinCCValueKey.text     = sVALUE_KEY;
  tfWinCCTimeStampKey.text = sTIMESTAMP_KEY;
  tfWinCCStatusKey.text    = sSTATUS64_KEY_DISPLAY;

  switch(uiPos)
  {
    case uiJSONVALUE:
      tfWinCCTimeStampKey.visible = mappingHasKey(mJSONValue, sTIMESTAMP_KEY);
      tfTimeStamp.visible         = mappingHasKey(mJSONValue, sTIMESTAMP_KEY);
      tfWinCCStatusKey.visible    = mappingHasKey(mJSONValue, sSTATUS64_KEY);
      tfStatus.visible            = mappingHasKey(mJSONValue, sSTATUS64_KEY);

      tfValue.text     = mJSONValue[sVALUE_KEY];
      tfTimeStamp.text = ( mappingHasKey(mJSONValue, sTIMESTAMP_KEY) ) ? mJSONValue[sTIMESTAMP_KEY] : \"\";
      tfStatus.text    = ( mappingHasKey(mJSONValue, sSTATUS64_KEY) )  ? mJSONValue[sSTATUS64_KEY]  : \"\";
      break;
    case uiJSONVALUETIME:
      tfWinCCTimeStampKey.visible = mappingHasKey(mJSONValueTime, sTIMESTAMP_KEY);
      tfTimeStamp.visible         = mappingHasKey(mJSONValueTime, sTIMESTAMP_KEY);
      tfWinCCStatusKey.visible    = mappingHasKey(mJSONValueTime, sSTATUS64_KEY);
      tfStatus.visible            = mappingHasKey(mJSONValueTime, sSTATUS64_KEY);

      tfValue.text     = mJSONValueTime[sVALUE_KEY];
      tfTimeStamp.text = ( mappingHasKey(mJSONValueTime, sTIMESTAMP_KEY) ) ? mJSONValueTime[sTIMESTAMP_KEY] : \"\";
      tfStatus.text    = ( mappingHasKey(mJSONValueTime, sSTATUS64_KEY) )  ? mJSONValueTime[sSTATUS64_KEY]  : \"\";
      break;
    case uiJSONVALUETIMESTATUS:
      tfWinCCTimeStampKey.visible = mappingHasKey(mJSONValueTimeStatus, sTIMESTAMP_KEY);
      tfTimeStamp.visible         = mappingHasKey(mJSONValueTimeStatus, sTIMESTAMP_KEY);
      tfWinCCStatusKey.visible    = mappingHasKey(mJSONValueTimeStatus, sSTATUS64_KEY);
      tfStatus.visible            = mappingHasKey(mJSONValueTimeStatus, sSTATUS64_KEY);

      tfValue.text     = mJSONValueTimeStatus[sVALUE_KEY];
      tfTimeStamp.text = ( mappingHasKey(mJSONValueTimeStatus, sTIMESTAMP_KEY) ) ? mJSONValueTimeStatus[sTIMESTAMP_KEY] : \"\";
      tfStatus.text    = ( mappingHasKey(mJSONValueTimeStatus, sSTATUS64_KEY) )  ? mJSONValueTimeStatus[sSTATUS64_KEY]  : \"\";
      break;
  }
}

" 0
 3
"CBRef" "1"
"EClose" E
"dpi" "96"
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
22 2
"cmbProfile"
""
1 146.551724137931 23 E E E 1 E 1 E N {0,0,0} E N "_Window" E E
 E E
1 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 arial,-1,13,5,50,0,0,0,0,0
0  148 23 402 49
0

E
"main()
{
  profileChanged(cmbProfile.selectedPos);
}
" 0

E
 0 1
2 4
"ptDrvNum"
""
1 30.12179487179478 29.5 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
3 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 30.12179487179478 29.5 108 45
0 2 2 "0s" 0 0 0 192 0 0  30.12179487179478 29.5 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 4
LANG:10001 13 JSON profile:
LANG:10004 12 JSON profile
LANG:10000 12 JSON Profil:
LANG:10027 20 Профиль JSON:
14 6
"tfValue"
""
1 76.54125250729834 85 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
5 0 0 0 0 0
E E E
0
4
LANG:10001 68 Path to JSON object node which contains the value, separated by ".".
LANG:10004 59 以 "."为间隔的包含数值的JSON对象节点的路径
LANG:10000 68 Pfad zum JSON Objekt Knoten der den Wert enthält, mit "." getrennt.
LANG:10027 68 Path to JSON object node which contains the value, separated by ".".

1
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0  148 88 402 114
3 "0s" 0 0 0 0 0 -1  E E E
14 8
"tfTimeStamp"
""
1 100.9621132770865 112 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
7 0 0 0 0 0
E E E
0
4
LANG:10001 72 Path to JSON object node which contains the timestamp, separated by ".".
LANG:10004 61 以"."为间隔的包含时间戳的JSON对象节点的路径
LANG:10000 75 Pfad zum JSON Objekt Knoten der den Zeitstempel enthält, mit "." getrennt.
LANG:10027 72 Path to JSON object node which contains the timestamp, separated by ".".

1
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0  148.1886758801094 110 402.1886758801094 136
3 "0s" 0 0 0 0 0 -1  E E E
2 9
"ptTimeStamp"
""
1 29.7734373969772 70 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
8 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 29.7734373969772 70 145 85
0 2 2 "0s" 0 0 0 192 0 0  29.7734373969772 70 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 4
LANG:10001 18 WinCC OA attribute
LANG:10004 15 WinCC OA 属性
LANG:10000 17 WinCC OA Attribut
LANG:10027 25 Атрибуты WinCC OA
14 10
"tfStatus"
""
1 -690.2265626030228 134 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
9 0 0 0 0 0
E E E
0
4
LANG:10001 69 Path to JSON object node which contains the status, separated by ".".
LANG:10004 59 以 "."为间隔的包含状态的JSON对象节点的路径
LANG:10000 70 Pfad zum JSON Objekt Knoten der den Status enthält, mit "." getrennt.
LANG:10027 69 Path to JSON object node which contains the status, separated by ".".

1
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0  148 132 402 158
3 "0s" 0 0 0 0 0 -1  E E E
1 23 0 "" 0
0
13 14
"cmdApply"
""
1 245 40 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
12 0 0 0 0 0
E E E
0
4
LANG:10001 14 Accept changes
LANG:10004 12 接受更改
LANG:10000 23 Änderungen übernehmen
LANG:10027 37 Применить изменения

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  243 183 331 211

T 
4
LANG:10001 5 Apply
LANG:10004 6 应用
LANG:10000 11 Übernehmen
LANG:10027 18 Применить
"main()
{
  setJsonProfiles();
}


" 0
 E E E
13 15
"cmdCancel"
""
1 335 40 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
13 0 0 0 0 0
E E E
0
4
LANG:10001 26 Close panel without action
LANG:10004 12 关闭面板
LANG:10000 46 Panel schließen, ohne eine Aktion auszulösen
LANG:10027 52 Закрыть без выполн. операции

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  333 183 421 211

T 
4
LANG:10001 6 Cancel
LANG:10004 6 取消
LANG:10000 9 Abbrechen
LANG:10027 16 Отменить
"main()
{
  PanelOff();
}" 0
 E E E
13 16
"cmdOk"
""
1 155 40 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
14 0 0 0 0 0
E E E
0
4
LANG:10001 30 Accept changes and close panel
LANG:10004 15 保存并关闭
LANG:10000 44 Änderungen übernehmen und Panel schließen
LANG:10027 64 Принять изменения и закрыть панель

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  153 183 241 211

T 
4
LANG:10001 2 OK
LANG:10004 6 确定
LANG:10000 2 OK
LANG:10027 2 OK
"main()
{
  setJsonProfiles();
  PanelOff();
}






" 0
 E E E
14 19
"tfWinCCValueKey"
""
1 30.00157403339048 90 E E E 0 E 1 E N "_WindowText" E N "_Window" E E
 E E
15 0 0 0 0 0
E E E
0
4
LANG:10001 59 WinCC OA value key to de- and encode JSON Profile (_value).
LANG:10004 69 WinCC OA值键，用于解码和编码JSON配置文件（_value）。
LANG:10000 75 WinCC OA Wert Schlüssel zum de- und encodierung des JSON Profils (_value).
LANG:10027 59 WinCC OA value key to de- and encode JSON Profile (_value).

2
"transparentForMouse" ""
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0  28 88 151 114
3 "0s" 0 0 0 0 0 -1  E E E
2 20
"PRIMITIVE_TEXT1"
""
1 209.7734373969772 70 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
16 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 2 1 E U  0 E 209.7734373969772 70 319 85
0 2 2 "0s" 0 0 0 192 0 0  209.7734373969772 70 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 4
LANG:10001 16 JSON Object node
LANG:10004 16 JSON对象节点
LANG:10000 17 JSON Objektknoten
LANG:10027 28 Узел объекта JSON
14 21
"tfWinCCTimeStampKey"
""
1 99.7734373969772 107 E E E 0 E 1 E N "_WindowText" E N "_Window" E E
 E E
17 0 0 0 0 0
E E E
0
4
LANG:10001 63 WinCC OA timestamp key to de- and encode JSON Profile (_stime).
LANG:10004 78 WinCC OA时间戳密钥，用于解译和编码JSON配置文件（_stime）。
LANG:10000 79 WinCC OA TimeStamp Schlüssel zum de- und encodieren des JSON Profils (_stime).
LANG:10027 63 WinCC OA timestamp key to de- and encode JSON Profile (_stime).

2
"transparentForMouse" ""
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0  28 110 151 136
3 "0s" 0 0 0 0 0 -1  E E E
14 22
"tfWinCCStatusKey"
""
1 99.7734373969772 129 E E E 0 E 1 E N "_WindowText" E N "_Window" E E
 E E
18 0 0 0 0 0
E E E
0
4
LANG:10001 62 WinCC OA status key to de- and encode JSON Profile (_state64).
LANG:10004 49 WinCC OA JSON Profile 状态关键字 (_state64).
LANG:10000 77 WinCC OA Status Schlüssel zum de- und encodieren des JSON Profils (_status).
LANG:10027 62 WinCC OA status key to de- and encode JSON Profile (_state64).

2
"transparentForMouse" ""
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0  28 132 151 158
3 "0s" 0 0 0 0 0 -1  E E E
0
LAYER, 1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 2 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 3 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 4 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 5 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 6 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 7 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
3 0 "PANEL_REF0" -1
"layoutAlignment" "AlignCenter"
"" ""
"objects_parts/STD_OBJECTS/ButtonBarBackground.pnl" 0 650 T 11 0.8597194388777558 0 1 0 -475
0
0

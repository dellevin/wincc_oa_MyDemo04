V 13
4
LANG:10001 17 Server Conditions
LANG:10004 15 服务器条件
LANG:10000 17 Server Conditions
LANG:10027 33 Серверные условия
PANEL,-1 -1 609 414 N "_3DFace" 1
"$EVENT_CATEGORY"
E E E E E 1 -1 -1 0  17 15
""0  1
E "dyn_string CONDITIONS; // panel global variable that includes condition names in the datasource that apply to $EVENT_CATEGORY
bool CHANGES=FALSE; // panel global variable that informs whehter user has made changes (added or deleted conditions) after saving last time" 0
 3
"CBRef" "1"
"EClose" "main()
{
  PanelOff();
}" 0

"dpi" "96"
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
4
LANG:10001 6 Layer1
LANG:10004 6 Layer1
LANG:10000 6 Layer1
LANG:10027 6 Layer1
2 0
"Text1"
""
1 8 15 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
1 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"sizePolicy" "Fixed Fixed"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E U  0 E 10 17 101 34
0 2 0 "0s" 0 0 0 66 0 0  10 17 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 4
LANG:10001 15 Event Category:
LANG:10004 22 正在运行的类别:
LANG:10000 15 Event Category:
LANG:10027 34 Категория событий:
30 2
"Frame1"
""
1 20 360 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
3 0 0 0 0 0
E E E
1
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"dashclr"N "_Transparent"
"antiAliased" "0"
"main()
{
TextField2.text = $EVENT_CATEGORY;
}" 0
 E 0 1 1 0 1 E 1.087198515769944 0 0.9843260188087774 -11.74397031539888 -2.373040752351098 0 E 20 40 560 360
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
25 1
"Table1"
""
1 20 55 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
2 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  18 53 587 307
"main()
{
// initializes the table with condition names that apply to event category name $EVENT_CATEGORY

  dyn_string dpe_table, // condition names as written in the datasource
             category_names; // category names as written in the datasource under conditions in order to sort out conditions that do not apply to present category name ($EVENT_CATEGORY)
  int quantity, // number of event category names / condition names in the datasource under conditions
  	  i=1,j=1;  // indexes	  
  shape table=getShape(\"Table1\");

  // initialize the table
  setValue(\"\",\"tableMode\",TABLE_SELECT_BROWSE,
              \"selectByClick\",TABLE_SELECT_LINE,
              \"columnEditable\",0,FALSE);    
  
  dpGet(\"_AEServer1.Conditions.ConditionNames\",dpe_table); // read condition names from the datasource
  dpGet(\"_AEServer1.Conditions.EventCategoryNames\",category_names); // read event category names from the datasource
  
  quantity=dynlen(dpe_table);
  
  for(i=1;i<=quantity;i++)
      if (category_names[i] == $EVENT_CATEGORY)
        {CONDITIONS[j]=dpe_table[i];j++;}  // CONDITIONS is panel global variable (dyn_string), that defines condition names that apply to $EVENT_CATEGORY  
    
  quantity=dynlen(CONDITIONS);
  
  for(i=1;i<=quantity;i++)
    table.appendLine(\"ConditionNames\",CONDITIONS[i]);
}" 0
E 1 0 1 1 10 "ConditionNames" 48 1 0 "s" 4
LANG:10001 15 Condition Names
LANG:10004 12 条件名称
LANG:10000 15 Condition Namen
LANG:10027 21 Имя условия
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

546 
26 26 "" 1 4
LANG:10001 2 #1
LANG:10004 2 #1
LANG:10000 3 #10
LANG:10027 2 #1
"" 1 4
LANG:10001 2 #2
LANG:10004 2 #2
LANG:10000 2 #9
LANG:10027 2 #2
"" 1 4
LANG:10001 2 #3
LANG:10004 2 #3
LANG:10000 2 #8
LANG:10027 2 #3
"" 1 4
LANG:10001 2 #4
LANG:10004 2 #4
LANG:10000 2 #7
LANG:10027 2 #4
"" 1 4
LANG:10001 2 #5
LANG:10004 2 #5
LANG:10000 2 #6
LANG:10027 2 #5
"" 1 4
LANG:10001 2 #6
LANG:10004 2 #6
LANG:10000 2 #5
LANG:10027 2 #6
"" 1 4
LANG:10001 2 #7
LANG:10004 2 #7
LANG:10000 2 #4
LANG:10027 2 #7
"" 1 4
LANG:10001 2 #8
LANG:10004 2 #8
LANG:10000 2 #3
LANG:10027 2 #8
"" 1 4
LANG:10001 2 #9
LANG:10004 2 #9
LANG:10000 2 #2
LANG:10027 2 #9
"" 1 4
LANG:10001 3 #10
LANG:10004 3 #10
LANG:10000 2 #1
LANG:10027 3 #10
8 30
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 0 1 1 1 7
1 0
13 3
"Button1"
""
1 275 321 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
4 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  273 313 376 341

T 
4
LANG:10001 3 Add
LANG:10004 6 添加
LANG:10000 11 Hinzufügen
LANG:10027 16 Добавить
"main()
{
// adds the text (condition name) given in TextField1 in the table in column ConditionNames

  string new_dpe, // new condition name that user has given
         found, // found is empty besides when new condition name already exists in the datasource
         name; // condition name as it is at the moment in the table
  dyn_string conditions; // includes all conditions that exist in the datasource (CONDITIONS inlcudes only conditions that belong to current Event Category)
  int rows, // number of rows in the table;
      i=0,
      found2; // found2 informs whether given new condition already exists in the datasource
  shape table=getShape(\"Table1\");
  int language=0; // selected language, 0 = German, 1 = English

  if ( !getUserPermission(4) )
  {
    ChildPanelOnCentralModal(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),
      makeDynString(getCatStr(\"general\",\"permission\")));
    return;
  }
 
  language=getActiveLang();    
  
  new_dpe = TextField1.text; // read the given new condition name

  if (new_dpe != \"\") // check whether user gave any input
  {
    found = dynPatternMatch(new_dpe,CONDITIONS); // found is empty when new condition name does not exist in the datasource, otherwise new condition name
												 // CONDITIONS is panel global variable (dyn_string), that defines condition names that apply to $EVENT_CATEGORY
    dpGet(\"_AEServer1.Conditions.ConditionNames\",conditions);
    found2 = dynContains(conditions,new_dpe); // found2 is empty when 
    if ((found == \"\") && (found2 <= 0)) // check whether new condition name already exists in the datasource
    {
      rows=table.lineCount(); // number of rows in the table
      for(i=0;i<rows;i++) // read from the table from each row condition name and compare it to the new condition
      {
        getValue(table, \"cellValueRC\", i, \"ConditionNames\",name); // read condition name
        if (new_dpe == name) // compare new condition name to the one in the table
          break;
      } //for
      if (new_dpe != name) // in case new condition name does not exist in the table (break was used above)
      {
        table.appendLine(\"ConditionNames\", new_dpe); // add new condition name in the table in column ConditionNames
        CHANGES=TRUE; // the added condition name is not yet saved
      }
      else // inform user the given condition name already exists (in the table)
      {
        if (language == 0) // German
          ChildPanelOnCentral(\"vision/MessageWarning\", \"MessageWarning\", makeDynString(\"$1:\" + \"Kondition '\" + new_dpe + \"' existiert bereits\") );
        else
          ChildPanelOnCentral(\"vision/MessageWarning\", \"MessageWarning\", makeDynString(\"$1:\" + \"Condition '\" + new_dpe + \"' already exists\") );        
      } // else
    } //if

    else // inform user the given condition name already exists (in the datasource)
    {
      if (language == 0) // German
        ChildPanelOnCentral(\"vision/MessageWarning\", \"MessageWarning\", makeDynString(\"$1:\" + \"Kondition '\" + new_dpe + \"' existiert bereits\") );
      else
        ChildPanelOnCentral(\"vision/MessageWarning\", \"MessageWarning\", makeDynString(\"$1:\" + \"Condition '\" + new_dpe + \"' already exists\") );
    } // else
    TextField1.text = \"\";  // clean the text field
  } //if

  else // inform user that no condition name was given
  {
    if (language == 0) // German
      ChildPanelOnCentral(\"vision/MessageWarning\", \"MessageWarning\", makeDynString(\"$1:\" + \"Bitte geben Sie einen Namen für die Kondition ein\") );
    else
      ChildPanelOnCentral(\"vision/MessageWarning\", \"MessageWarning\", makeDynString(\"$1:\" + \"Please enter a name for the condition\") );
  } // else
} " 0
 E E E
13 4
"Button2"
""
1 380 321 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
5 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  378 313 481 341

T 
4
LANG:10001 6 Delete
LANG:10004 6 删除
LANG:10000 8 Löschen
LANG:10027 14 Удалить
"main()
{
// delete selected row from the table

  dyn_int row; // selected row  
  shape table=getShape(\"Table1\");
  int language=0; // selected language, 0 = German, 1 = English

  if ( !getUserPermission(4) )
  {
    ChildPanelOnCentralModal(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),
      makeDynString(getCatStr(\"general\",\"permission\")));
    return;
  }
 
  language=getActiveLang();    

  getValue(table,\"getSelectedLines\",row); // read which row was selected

  if (dynlen(row) != 0) // in case a row was selected, delete that row
  {
    setValue(table,\"deleteLineN\",row[1]);
    CHANGES=TRUE;
  } // if

  else // in case no row was selected, inform user to do so
  {
    if (language == 0) // German
      ChildPanelOnCentral(\"vision/MessageWarning\",\"MessageWarning\",makeDynString(\"$1:\" + \"Bitte wählen Sie eine Reihe aus\"));
    else
      ChildPanelOnCentral(\"vision/MessageWarning\",\"MessageWarning\",makeDynString(\"$1:\" + \"Please select a row\"));
  }  

}" 0
 E E E
13 5
"Button3"
""
1 485 321 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
6 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  483 313 586 341

T 
4
LANG:10001 9 Sub Cond.
LANG:10004 9 子条件
LANG:10000 14 Sub Conditions
LANG:10027 20 Подусловия
"main()
{
// opens panel para/opc_ae_srv_sub_conditions.pnl for selected condition

  shape table=getShape(\"Table1\");
  dyn_int row; // selected row
  int language=0; // selected language, 0 = German, 1 = English

  if ( !getUserPermission(4) )
  {
    ChildPanelOnCentralModal(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),
      makeDynString(getCatStr(\"general\",\"permission\")));
    return;
  }
 
  language=getActiveLang();   
  
  if(!CHANGES)
  {
    getValue(table,\"getSelectedLines\",row); // read which row was selected

    if (dynlen(row) != 0) // in case a row was selected, open panel sub_conditions.pnl
      ChildPanelOnCentral(\"para/opc_ae_srv_sub_conditions.pnl\",\"PanelSubConditions\",makeDynString(\"$CONDITION:\" + table.cellValueRC(row[1],\"ConditionNames\"))); // open panel para/opc_ae_srv_sub_conditions.pnl and give selected condition name as an argument

    else // in case no row was selected, inform user to do so
    {
      if (language == 0) // German
        ChildPanelOnCentral(\"vision/MessageWarning\",\"MessageWarning\",makeDynString(\"$1:\" + \"Bitte wählen Sie eine Reihe aus\"));      
      else
        ChildPanelOnCentral(\"vision/MessageWarning\",\"MessageWarning\",makeDynString(\"$1:\" + \"Please select a row\"));            
    } // else
  } // if
  
  else
  {
    if (language == 0) // German
      ChildPanelOnCentral(\"vision/MessageWarning\", \"MessageWarning\", makeDynString(\"$1:\" + \"Diese Funktion ist nur nach dem Speichern der Änderungen verfügbar. Bitte wählen Sie zu erst 'Übernehmen' aus.\"));
    else
      ChildPanelOnCentral(\"vision/MessageWarning\", \"MessageWarning\", makeDynString(\"$1:\" + \"This function is available only in case changes have been saved. Please select 'Save' first.\"));    
  } // else
}" 0
 E E E
14 6
"TextField1"
""
1 32.25 320 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
7 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  18 313 267 339
3 "0s" 0 0 0 0 0 -1  E E E
13 7
"Button4"
""
1 275 380 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
8 0 0 0 16777221 0
E E E
0
4
LANG:10001 30 Accept changes and close panel
LANG:10004 15 保存并关闭
LANG:10000 44 Änderungen übernehmen und Panel schließen
LANG:10027 64 Принять изменения и закрыть панель

0
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  273 378 376 406

T 
4
LANG:10001 2 OK
LANG:10004 6 确定
LANG:10000 2 OK
LANG:10027 2 OK
"main()
{
// Saves condition names from the table to the datasource, sets a new datagroup and filter to OPC_AE, closes the panel
// Notice, that when a new condition name is written to a datasource, also the EventCategoryNames table in datasource under conditions has to be complemented with $EVENT_CATEGORY entries
// Also notice, that the deleted condition names have to be deleted manually from the datasource, because also entries from EventCategoryNames table in datasource under conditions have to be deleted!
// When a condition has been deleted, also its subconditions have to be deleted in case no other condition uses the same subconditions
// Removes items from server items in case condition was deleted and it had entries there

  shape table=getShape(\"Table1\");
  dyn_string condition_names, // Condition Names
   		     category_names, // Event Category Names in the datasource under Conditions
   		     alarm_dps;
  int index, // informs the index of the deleted Condition name in the datasource
      i=0,k=1,j,m=0,exist;
  bool subcondition_removed=FALSE;
  string old_meldebehandlung,meldetext,alertclass; 
  dyn_langString alerttexts;
  dyn_string subconditionnames;  
  unsigned bereiche;  
  int iError=0;  // return value for deleting datagroup
  string str; // name of the condition (for adding a new dp_group)
  string condition_with_prefix; // condition name with prefix \"OPC_AE_\"  
  dyn_string ds_name; // name of the condition (for adding a new dp_group)
  langString ls_name; // name of the condition (for adding a new dp_group)  
  dyn_string dp_group_names,source_items; // server items
  int language=0; // selected language, 0 = German, 1 = English
  int type;
  if ( !getUserPermission(4) )
  {
    ChildPanelOnCentralModal(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),
      makeDynString(getCatStr(\"general\",\"permission\")));
    return;
  }
 
  language=getActiveLang(); 

  dpGet(\"_AEServer1.ServerItems.DpGroupNames\",dp_group_names);
  dpGet(\"_AEServer1.ServerItems.SourceItems\",source_items);     
  dpGet(\"_AEServer1.Conditions.ConditionNames\",condition_names); // initialize variable with the values from datasource
  dpGet(\"_AEServer1.Conditions.EventCategoryNames\",category_names); // initialize variable with the values from datasource
  dpGet(\"_AEServer1.Conditions.AlertDps\",alarm_dps);
  dpGet(\"_AEServer1.SubConditions.AlertRangeTexts\",alerttexts);        
  dpGet(\"_AEServer1.SubConditions.SubConditionNames\",subconditionnames);
  
  if(CHANGES)
  {
    // first all deleted rows will be deleted from the variables condition_names and category_names
    while(i<dynlen(CONDITIONS))  // go through rows that used to exist before deleting any
    {
      if(table.cellValueRC(i,\"ConditionNames\")!=CONDITIONS[i+1]) // check whether current row is identical with the old one    
      {
        index=dynContains(condition_names,CONDITIONS[i+1]); // index shows where deleted Condition Name exists in the variable condition_names that will be adopted in the datasource later

		if(alarm_dps[index] != \"\")  // also subconditions may possible have to be removed (only if one was defined)
		{
		  old_meldebehandlung=alarm_dps[index];
	      alarm_dps[index]=\"\";
		  exist=dynContains(alarm_dps,old_meldebehandlung);
  
          if(exist == 0)  // no other condition has this subcondition defined
          {
            dpGet(old_meldebehandlung+\":_alert_hdl.._type\",type);
            
            if(type == 13)  // check that meldebehandlung is not binary
            {            
              dpGet(old_meldebehandlung+\":_alert_hdl.._num_ranges\",bereiche);         

    		  for(k=1;k<=bereiche;k++)
      		  {
                dpGet(old_meldebehandlung+\":_alert_hdl.\" + k + \"._text\",meldetext);
        	    dpGet(old_meldebehandlung+\":_alert_hdl.\" + k + \"._class\",alertclass);

          	    if(alertclass != \"\")
        	    {  
          	      j=dynContains(alerttexts,meldetext);   	    
                  dynRemove(alerttexts,j);
                  dynRemove(subconditionnames,j);
        	    } // if
      		  } // for
      		
      		  subcondition_removed=TRUE;      		
      	    } // if (type == 13)
      	    
      	    else if (type == 12) // binary meldebehandlung
      		{
              dpGet(old_meldebehandlung+\":_alert_hdl.1._text\",meldetext);
       	      dpGet(old_meldebehandlung+\":_alert_hdl.1._class\",alertclass);
          	  if(alertclass != \"\")
        	  {  
          	    j=dynContains(alerttexts,meldetext);   	    
                dynRemove(alerttexts,j);
                dynRemove(subconditionnames,j);
        	  } // if    
      		  subcondition_removed=TRUE;        	     	            		
          	} // else if (type == 12)
      	  } // if (exist==0)
		} // if
		// at this point the subconditions have been removed in case needed
        
        condition_with_prefix=\"OPC_AE_\"+condition_names[index];
        m=dynContains(dp_group_names,condition_with_prefix);        
        while (m > 0) // remove all server items that belong to this condition
        {
          dynRemove(dp_group_names,m);
          dynRemove(source_items,m);
          m=dynContains(dp_group_names,condition_with_prefix);
        }

        groupDeleteFilter(\"OPC_AE\",\"OPC_AE_\"+condition_names[index],\"\",iError); // remove filter deleted Condition from datagroup OPC_AE
        groupDelete(\"OPC_AE_\"+condition_names[index],iError); // remove datagroup of deleted Condition


        dynRemove(condition_names,index); // remove deleted Condition Name from the variable
        dynRemove(alarm_dps,index);
        dynRemove(category_names,index); // remove corresponding item from the variable category_names (respectively $EVENT_CATEGORY)
        dynRemove(CONDITIONS,(i+1)); // update global variable CONDITIONS by removing deleted category name from it
      } // if
      else
        i++; // in case the current row is identical with the old one, lets leave everything as it is and move to the next item when comparing the rows
    } // while

    // added Condition Names will be added to the variable condition_names and to the same places $EVENT_CATEGORY in the variable category_names
    if(dynlen(CONDITIONS) != table.lineCount()) // check whether new rows were added
    {
      index=dynlen(CONDITIONS);
      for(i=index;i<table.lineCount();i++) // go through new rows and take new Condition Names over
      {
        str=\"OPC_AE_\"+table.cellValueRC(i,\"ConditionNames\"); // initialize str for setting the datagroup
        ds_name=makeDynString(str); // initialize ds_name for setting the datagroup
        ls_name=ds_name; // initialize ls_name for setting the datagroup
        groupCreate(ls_name,FALSE,str,0,iError); // Add datagroup for the new condition 
        groupSetFilter(\"OPC_AE\",\"OPC_AE_\"+table.cellValueRC(i,\"ConditionNames\"),\"\",iError); // set filter for the new condition in datagroup OPC_AE
        dynAppend(condition_names,table.cellValueRC(i,\"ConditionNames\")); // append new condition name to variable condition_names
        dynAppend(alarm_dps,\"\"); // append empy subcondition dp to this new condition
        dynAppend(category_names,$EVENT_CATEGORY); // category names will always be appended with $EVENT_CATEGORY
        dynAppend(CONDITIONS,table.cellValueRC(i,\"ConditionNames\")); // update global variable CONDITIONS by adding the new category name in it
      } // for
    } // if
  
    dpSet(\"_AEServer1.Conditions.ConditionNames\",condition_names);
    dpSet(\"_AEServer1.Conditions.AlertDps\",alarm_dps);
    dpSet(\"_AEServer1.Conditions.EventCategoryNames\",category_names);
    dpSet(\"_AEServer1.ServerItems.DpGroupNames\",dp_group_names);
    dpSet(\"_AEServer1.ServerItems.SourceItems\",source_items);
    
    if(subcondition_removed)
    {
      dpSet(\"_AEServer1.SubConditions.AlertRangeTexts\",alerttexts);        
      dpSet(\"_AEServer1.SubConditions.SubConditionNames\",subconditionnames);
    }
    
    CHANGES=FALSE;
    
  } // if(CHANGES)
  
  // Check that all conditions also include a subcondition
  dpGet(\"_AEServer1.Conditions.AlertDps\",alarm_dps);
  for(i=0;i<table.lineCount();i++)
  {
     index=dynContains(condition_names,table.cellValueRC(i,\"ConditionNames\"));
     if(alarm_dps[index] == \"\")
     {
       if (language == 0) // German
         ChildPanelOnCentral(\"vision/MessageWarning\",\"MessageWarning\",makeDynString(\"$1:\" + \"Bitte definieren Sie für jede Kontition eine Unterkondition (für '\"+condition_names[index]+\"' wurde noch keine definiert)\"));
       else
         ChildPanelOnCentral(\"vision/MessageWarning\",\"MessageWarning\",makeDynString(\"$1:\" + \"Please define a subcondition for every condition ('\"+condition_names[index]+\"' does not include any)\"));       
       return;
     }
  } // for  
    
  PanelOff(); // close the panel
  
}" 0
 E E E
13 8
"Button5"
""
1 485 380 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
9 0 0 0 27 0
E E E
0
4
LANG:10001 31 Discard changes and close panel
LANG:10004 27 放弃更改并关闭面板
LANG:10000 42 Änderungen verwerfen und Panel schließen
LANG:10027 66 Отменить изменения и закрыть панель

0
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  483 378 586 406

T 
4
LANG:10001 6 Cancel
LANG:10004 6 取消
LANG:10000 9 Abbrechen
LANG:10027 16 Отменить
"main()
{
  PanelOff();
}" 0
 E E E
13 9
"Button6"
""
1 380 380 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
10 0 0 0 0 0
E E E
0
4
LANG:10001 14 Accept changes
LANG:10004 12 接受更改
LANG:10000 23 Änderungen übernehmen
LANG:10027 37 Применить изменения

0
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  378 378 481 406

T 
4
LANG:10001 5 Apply
LANG:10004 6 应用
LANG:10000 11 Übernehmen
LANG:10027 18 Применить
"main()
{
// Save condition names from the table to the datasource, set a new datagroup and filter to OPC_AE
// Notice, that when a new condition name is written to a datasource, also the EventCategoryNames table in datasource under conditions has to be complemented with $EVENT_CATEGORY entries
// Also notice, that the deleted condition names have to be deleted manually from the datasource, because also entries from EventCategoryNames table in datasource under conditions have to be deleted!
// When a condition has been deleted, also its subconditions have to be deleted in case no other condition uses the same subconditions
// Removes items from server items in case condition was deleted and it had entries there

  shape table=getShape(\"Table1\");
  dyn_string condition_names, // Condition Names
   		     category_names, // Event Category Names in the datasource under Conditions
   		     alarm_dps;
  int index, // informs the index of the deleted Condition name in the datasource
      i=0,k=1,j,m=0,exist;
  bool subcondition_removed=FALSE;
  string old_meldebehandlung,meldetext,alertclass; 
  dyn_langString alerttexts;
  dyn_string subconditionnames;  
  unsigned bereiche;  
  int iError=0;  // return value for deleting datagroup
  string str; // name of the condition (for adding a new dp_group)
  string condition_with_prefix; // condition name with prefix \"OPC_AE_\"
  dyn_string ds_name; // name of the condition (for adding a new dp_group)
  langString ls_name; // name of the condition (for adding a new dp_group)  
  dyn_string dp_group_names,source_items; // server items
  int type;

  dpGet(\"_AEServer1.ServerItems.DpGroupNames\",dp_group_names);
  dpGet(\"_AEServer1.ServerItems.SourceItems\",source_items);     
  dpGet(\"_AEServer1.Conditions.ConditionNames\",condition_names); // initialize variable with the values from datasource
  dpGet(\"_AEServer1.Conditions.EventCategoryNames\",category_names); // initialize variable with the values from datasource
  dpGet(\"_AEServer1.Conditions.AlertDps\",alarm_dps);
  dpGet(\"_AEServer1.SubConditions.AlertRangeTexts\",alerttexts);        
  dpGet(\"_AEServer1.SubConditions.SubConditionNames\",subconditionnames);

  if ( !getUserPermission(4) )
  {
    ChildPanelOnCentralModal(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),
      makeDynString(getCatStr(\"general\",\"permission\")));
    return;
  }

  if(CHANGES)
  {
    // first all deleted rows will be deleted from the variables condition_names and category_names
    while(i<dynlen(CONDITIONS))  // go through rows that used to exist before deleting any
    {
      if(table.cellValueRC(i,\"ConditionNames\")!=CONDITIONS[i+1]) // check whether current row is identical with the old one    
      {
        index=dynContains(condition_names,CONDITIONS[i+1]); // index shows where deleted Condition Name exists in the variable condition_names that will be adopted in the datasource later

		if(alarm_dps[index] != \"\")  // also subconditions may possible have to be removed (only if one was defined)
		{
		  old_meldebehandlung=alarm_dps[index];		  
	      alarm_dps[index]=\"\";
		  exist=dynContains(alarm_dps,old_meldebehandlung);
  
          if(exist == 0)  // no other condition has this subcondition defined
          {          
            dpGet(old_meldebehandlung+\":_alert_hdl.._type\",type);
            
            if(type == 13)  // check that meldebehandlung is not binary
            {            
              dpGet(old_meldebehandlung+\":_alert_hdl.._num_ranges\",bereiche);         

    		  for(k=1;k<=bereiche;k++)
      		  {
                dpGet(old_meldebehandlung+\":_alert_hdl.\" + k + \"._text\",meldetext);
        	    dpGet(old_meldebehandlung+\":_alert_hdl.\" + k + \"._class\",alertclass);

          	    if(alertclass != \"\")
        	    {  
          	      j=dynContains(alerttexts,meldetext);   	    
                  dynRemove(alerttexts,j);
                  dynRemove(subconditionnames,j);
        	    } // if
      		  } // for
      		
      		  subcondition_removed=TRUE;      		
      	    } // if (type == 13)
      	    
      	    else if (type == 12) // binary meldebehandlung
      		{
              dpGet(old_meldebehandlung+\":_alert_hdl.1._text\",meldetext);
       	      dpGet(old_meldebehandlung+\":_alert_hdl.1._class\",alertclass);
          	  if(alertclass != \"\")
        	  {  
          	    j=dynContains(alerttexts,meldetext);   	    
                dynRemove(alerttexts,j);
                dynRemove(subconditionnames,j);
        	  } // if    
      		  subcondition_removed=TRUE;        	     	            		
          	} // else if (type == 12)
                         	    
      	  } // if (exist==0)
		} // if
		// at this point the subconditions have been removed in case needed
        
        condition_with_prefix=\"OPC_AE_\"+condition_names[index];
        m=dynContains(dp_group_names,condition_with_prefix);
        
        while (m > 0) // remove all server items that belong to this condition
        {
          dynRemove(dp_group_names,m);
          dynRemove(source_items,m);
          m=dynContains(dp_group_names,condition_with_prefix);
        }

        groupDeleteFilter(\"OPC_AE\",\"OPC_AE_\"+condition_names[index],\"\",iError); // remove filter deleted Condition from datagroup OPC_AE
        groupDelete(\"OPC_AE_\"+condition_names[index],iError); // remove datagroup of deleted Condition


        dynRemove(condition_names,index); // remove deleted Condition Name from the variable
        dynRemove(alarm_dps,index);
        dynRemove(category_names,index); // remove corresponding item from the variable category_names (respectively $EVENT_CATEGORY)
        dynRemove(CONDITIONS,(i+1)); // update global variable CONDITIONS by removing deleted category name from it
      } // if
      else
        i++; // in case the current row is identical with the old one, lets leave everything as it is and move to the next item when comparing the rows
    } // while

    // added Condition Names will be added to the variable condition_names and to the same places $EVENT_CATEGORY in the variable category_names
    if(dynlen(CONDITIONS) != table.lineCount()) // check whether new rows were added
    {
      index=dynlen(CONDITIONS);
      for(i=index;i<table.lineCount();i++) // go through new rows and take new Condition Names over
      {
        str=\"OPC_AE_\"+table.cellValueRC(i,\"ConditionNames\"); // initialize str for setting the datagroup
        ds_name=makeDynString(str); // initialize ds_name for setting the datagroup
        ls_name=ds_name; // initialize ls_name for setting the datagroup
        groupCreate(ls_name,FALSE,str,0,iError); // Add datagroup for the new condition 
        groupSetFilter(\"OPC_AE\",\"OPC_AE_\"+table.cellValueRC(i,\"ConditionNames\"),\"\",iError); // set filter for the new condition in datagroup OPC_AE
        dynAppend(condition_names,table.cellValueRC(i,\"ConditionNames\")); // append new condition name to variable condition_names
        dynAppend(alarm_dps,\"\"); // append empy subcondition dp to this new condition
        dynAppend(category_names,$EVENT_CATEGORY); // category names will always be appended with $EVENT_CATEGORY
        dynAppend(CONDITIONS,table.cellValueRC(i,\"ConditionNames\")); // update global variable CONDITIONS by adding the new category name in it
      } // for
    } // if
  
    dpSet(\"_AEServer1.Conditions.ConditionNames\",condition_names);
    dpSet(\"_AEServer1.Conditions.AlertDps\",alarm_dps);
    dpSet(\"_AEServer1.Conditions.EventCategoryNames\",category_names);
    dpSet(\"_AEServer1.ServerItems.DpGroupNames\",dp_group_names);
    dpSet(\"_AEServer1.ServerItems.SourceItems\",source_items);
    
    if(subcondition_removed)
    {
      dpSet(\"_AEServer1.SubConditions.AlertRangeTexts\",alerttexts);        
      dpSet(\"_AEServer1.SubConditions.SubConditionNames\",subconditionnames);
    }
    
    CHANGES=FALSE;
    
  } // if(CHANGES)
  
}

void turha()
{

      dpGet(written+\":_alert_hdl.._type\",type);

      if(type == 13)  // check that meldebehandlung is not binary
      {
        dpGet(written+\":_alert_hdl.._num_ranges\",bereiche);  
        dpGet(\"_AEServer1.SubConditions.AlertRangeTexts\",alerttexts);        
        dpGet(\"_AEServer1.SubConditions.SubConditionNames\",subconditionnames);

        for(i=1;i<=bereiche;i++)
        {
          dpGet(written+\":_alert_hdl.\" + i + \"._text\",meldetext);
          dpGet(written+\":_alert_hdl.\" + i + \"._class\",alertclass);

          if(alertclass != \"\")
          {
            alertclass=strltrim(alertclass,\"System1\");
            alertclass=strltrim(alertclass,\":\");
            dpGet(alertclass+\":_alert_class.._prior\",prior);
            sprintfPL(priority, \"%d\", prior);
            if(strlen(priority) == 2)
  	          priority=\"0\"+priority+\"_\";
	        else if(strlen(priority) == 1)
		      priority=\"00\"+priority+\"_\";
	          else
		        priority=priority+\"_\";  		                
            index=langStringdynContains(alerttexts,meldetext);

            if (index > 0)
              table.appendLine(\"Meldetext\", meldetext, \"SubConditionName\", subconditionnames[index], \"Alarmklasse\", priority+alertclass);		 
            else
              table.appendLine(\"Meldetext\", meldetext, \"Alarmklasse\", priority+alertclass);
          } // if
        } // for
      } // if
      
      else if (type == 12) // binary meldebehandlung
      {
          dpGet(written+\":_alert_hdl.1._text\",meldetext);
 
          if(meldetext != \"\")
          {
            dpGet(\"_AEServer1.SubConditions.AlertRangeTexts\",alerttexts);        
            dpGet(\"_AEServer1.SubConditions.SubConditionNames\",subconditionnames);
            
            dpGet(written+\":_alert_hdl.1._class\",alertclass);
            alertclass=strltrim(alertclass,\"System1\");
            alertclass=strltrim(alertclass,\":\");
            dpGet(alertclass+\":_alert_class.._prior\",prior);
            sprintfPL(priority, \"%d\", prior);
            if(strlen(priority) == 2)
  	          priority=\"0\"+priority+\"_\";
	        else if(strlen(priority) == 1)
		      priority=\"00\"+priority+\"_\";
	        else
		      priority=priority+\"_\";	      
	        index=langStringdynContains(alerttexts,meldetext);

            if (index > 0)
              table.appendLine(\"Meldetext\", meldetext, \"SubConditionName\", subconditionnames[index], \"Alarmklasse\", priority+alertclass);		 
            else
              table.appendLine(\"Meldetext\", meldetext, \"Alarmklasse\", priority+alertclass);	        
	       }     
        }  // else if
      
        else
        {
          if (language == 0) // German
            ChildPanelOnCentral(\"vision/MessageWarning\", \"MessageWarning\", makeDynString(\"$1:\" + \"Für den Datenpunkt '\" + written + \"' wurde keine Meldebehandlung definiert\") );
          else
  			ChildPanelOnCentral(\"vision/MessageWarning\", \"MessageWarning\", makeDynString(\"$1:\" + \"No alert handling defined for the datasource '\" + written + \"'\") );
          DP=\"\";
        }


}" 0
 E E E
13 10
"Button7"
""
1 20 380 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
11 0 0 0 0 0
E E E
0
4
LANG:10001 16 Open online help
LANG:10004 18 打开在线帮助
LANG:10000 20 Online Hilfe öffnen
LANG:10027 14 Справка

0
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  18 378 121 406

T 
4
LANG:10001 4 Help
LANG:10004 6 帮助
LANG:10000 5 Hilfe
LANG:10027 14 Справка
"main()
{
   std_help(\"opc_ae_srv_conditions\");
}" 0
 E E E
14 11
"TextField2"
""
1 127.962962962963 16 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
12 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0  108 13 597 39
3 "0s" 0 0 0 0 0 -1  E "main()
{
  TextField2.text = $EVENT_CATEGORY;
}" 0
 E
1 12 0 "" 0
0
0
LAYER, 1 
4
LANG:10001 6 Layer2
LANG:10004 6 Layer2
LANG:10000 6 Layer2
LANG:10027 6 Layer2
0
LAYER, 2 
4
LANG:10001 6 Layer3
LANG:10004 6 Layer3
LANG:10000 6 Layer3
LANG:10027 6 Layer3
0
LAYER, 3 
4
LANG:10001 6 Layer4
LANG:10004 6 Layer4
LANG:10000 6 Layer4
LANG:10027 6 Layer4
0
LAYER, 4 
4
LANG:10001 6 Layer5
LANG:10004 6 Layer5
LANG:10000 6 Layer5
LANG:10027 6 Layer5
0
LAYER, 5 
4
LANG:10001 6 Layer6
LANG:10004 6 Layer6
LANG:10000 6 Layer6
LANG:10027 6 Layer6
0
LAYER, 6 
4
LANG:10001 6 Layer7
LANG:10004 6 Layer7
LANG:10000 6 Layer7
LANG:10027 6 Layer7
0
LAYER, 7 
4
LANG:10001 6 Layer8
LANG:10004 6 Layer8
LANG:10000 6 Layer8
LANG:10027 6 Layer8
0
3 0 "PANEL_REF0" -1
"" ""
"objects_parts/STD_OBJECTS/ButtonBarBackground.pnl" 10 370 T 13 1.242484969939879 0 1 -17.42484969939876 0
0
0

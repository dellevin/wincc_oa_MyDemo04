V 14
4
LANG:10001 21 Panel topology design
LANG:10004 12 面板拓扑
LANG:10000 21 Paneltopologie planen
LANG:10027 48 Создание иерархии панелей
PANEL,-1 -1 590 720 N "_3DFace" 0
"main()
{
  //set the filenames of Tree-Icon-Images
  iconImage = makeDynString(\"rootpanel.png\",\"childpanel.png\",\"freepanel.png\");
  
  int        i,error,xR;
  string     fileName;
  unsigned   xRes,yRes,pWidth,pHeight,uNull=0;
  dyn_float  df;
  dyn_string ds,ds1,ds2;
  dyn_langString dLs;
  dyn_langString dLstemp;
  
  dynAppend(dLstemp,\" \");
  dynAppend(dLstemp,\" \");

  if (isMotif())
  {
    string s,st;
    
    st=getCurrentTime();
    s=getCatStr(\"pt\",\"ismotif\");
    RootPanelOn(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),
      makeDynString(s));
    return;
  }
  
  if (!dpExists(\"_PanelTopology\"))
  {
    for (i=1;i<=getNoOfLangs();i++)
    {
      ds1[i]=\"Startpanel\";
      ds2[i]=gPtFreePanel;
    }
    dLs[1]=ds1;
    dLs[2]=ds2;
    dpCreate(\"_PanelTopology\",\"_PanelTopology\");
    while (!dpExists(\"_PanelTopology\"))
    {
      delay(0,50);
    }
    dpSetWait(\"_PanelTopology.panelNumber:_original.._value\",makeDynUInt(1,2),
              \"_PanelTopology.parentNumber:_original.._value\",makeDynUInt(0,0),
              \"_PanelTopology.sumAlertNumber:_original.._value\",makeDynUInt(0,0),
              \"_PanelTopology.nodeName:_original.._value\",dLs,
              \"_PanelTopology.fileName:_original.._value\",makeDynString(\"main.pnl\",\"\"),
              \"_PanelTopology.panelType:_original.._value\",makeDynUInt(0,0),
              \"_PanelTopology.moduleName:_original.._value\",makeDynString(\"\",\"\"),
              \"_PanelTopology.iconName:_original.._value\",makeDynString(\"\",\"\"),
              \"_PanelTopology.menuBar:_original.._value\",makeDynUInt(0,0),
              \"_PanelTopology.iconBar:_original.._value\",makeDynUInt(0,0),
              \"_PanelTopology.modal:_original.._value\",makeDynBool(TRUE,TRUE),
              \"_PanelTopology.centered:_original.._value\",makeDynBool(TRUE,TRUE),
              \"_PanelTopology.parameter:_original.._value\",makeDynString(\"\",\"\"),
              \"_PanelTopology.permissionBit:_original.._value\",makeDynUInt(1,1),
              \"_PanelTopology.backwardPanel:_original.._value\",makeDynInt(1,0),
              \"_PanelTopology.forwardPanel:_original.._value\",makeDynUInt(1,0),
              \"_PanelTopology.upwardPanel:_original.._value\",makeDynUInt(1,0),
              \"_PanelTopology.downwardPanel:_original.._value\",makeDynUInt(1,0),
              \"_PanelTopology.template.xResolution:_original.._value\",0,
              \"_PanelTopology.template.xResolution:_original.._value\",0,
              \"_PanelTopology.template.panelWidth:_original.._value\",0,
              \"_PanelTopology.template.panelHeight:_original.._value\",0,
              \"_PanelTopology.description:_original.._value\",dLstemp,
              \"_PanelTopology.locality:_original.._value\",dLstemp,
              \"_PanelTopology.functionality:_original.._value\",dLstemp,
              \"_PanelTopology.panelLink:_original.._value\",makeDynString(\"-1\",\"-1\"));
  }
  dyn_string dsDTemplate,dsDRes;
  
  if(dpExists(\"_Default_UiConfiguration\"))
    dpGet(\"_Default_UiConfiguration.Default.DefaultTemplate\",dsDTemplate,
          \"_Default_UiConfiguration.Default.DefaultResolution\",dsDRes);
  
  df[1]=0;
  dpGet(\"_PanelTopology.template.xResolution:_online.._value\",xR);
       
  if((!dpExists(\"_Default_UiConfiguration\") || dynlen(dsDRes)<=0 || dynlen(dsDTemplate)<=0) && xR==0 )
  {
    ChildPanelOnCentralModalReturn(\"para/PanelTopology/PT_preview.pnl\",
      \"PT_Preview\",
      makeDynString(\"\"),df,ds);
    
    if(!df[1])
    {
      ModuleOff(myModuleName());
    }
    
  }

  pt_readTopologyDp(gPtIndices,
                    gPtParents,
                    gPtAlerts,
                    gPtNames,
                    gPtPanels,
                    gPtTypes,
                    gPtModules,
                    gPtIcons,
                    gPtMenuBar,
                    gPtIconBar,
                    gPtModal,
                    gPtCentered,
                    gPtParameters,
                    gPtPermissions,
                    gPtDescription,
                    gPtLocality,
                    gPtFunctionality,
                    gPtPanelLink,
                    error);
  if (error<0)
  {
    pt_showError(error,\"\");
    pt_removeGlobals();
    return;
  }
  
  //create one tree column
  treeTopology.addColumn(\"col1\");
  treeTopology.showHeader(false);
  
  
  if (gPtPanels[1] == \"\")  //set \"main.pnl\" for the first Node
  {
    int        i, x, y;
    string     panel = \"main.pnl\";
    dyn_float  df;
    dyn_string ds;
    
    if (getPath(PANELS_REL_PATH,\"main.pnl\") == \"\")
    {
      dpGet(\"_PanelTopology.template.panelWidth:_online.._value\",x,
            \"_PanelTopology.template.panelHeight:_online.._value\",y);
      if (x<1 || y<1)
      {
        ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
          getCatStr(\"para\",\"warning\"),
          makeDynString(getCatStr(\"pt\",\"paneltoosmall\")),df,ds);
        return;
      }
      i=createPanel(panel,x,y);
      if ( i!=0 )
      {
        ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
          getCatStr(\"para\",\"warning\"),
          makeDynString(getCatStr(\"pt\",\"errorcreatingpanel\")+\":\",panel),df,ds);
        return;
      }
      if (getPath(PANELS_REL_PATH,\"main.pnl\")==\"\")
      {
        ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
          getCatStr(\"para\",\"warning\"),
          makeDynString(getCatStr(\"pt\",\"panelnotexists\")+\":\",panel),df,ds);
        return;
      }
    }
    gPtPanels[1] = panel;
  }



  pt_writeTopologyTree(\"treeTopology\",
    gPtIndices,gPtParents,gPtNames,gPtPanels,gPtTypes,gPtTreeIndices,error);
  txtPanel.text=gPtPanels[1];
  txtSumAlert.text=pt_fileNameToDpName(gPtPanels[1],gPtIndices[1]);
  
  gPtIndicesOld=gPtIndices;
  gPtNamesOld=gPtNames;
  gPtPanelsOld=gPtPanels;
  gPtTypesOld=gPtTypes;
  gPtAlertsOld=gPtAlerts;
  gPtModulesOld=gPtModules;
  gPtIconsOld=gPtIcons;
  gPtMenuBarOld=gPtMenuBar;
  gPtIconBarOld=gPtIconBar;
  gPtModalOld=gPtModal;
  gPtCenteredOld=gPtCentered;
  gPtParametersOld=gPtParameters;
  gPtPermissionsOld=gPtPermissions;
  gPtDescriptionOld=gPtDescription;
  gPtLocalityOld=gPtLocality;
  gPtFunctionalityOld=gPtFunctionality;
  gPtPanelLinkOld=gPtPanelLink;
  treeTopology.setSelectedItem(1,TRUE);
  setInputFocus(myModuleName(),myPanelName(),\"treeTopology\");
  pt_setAddButtons(treeTopology.selectedItems()[1]);
}





" 0
 E E E E 1 -1 -1 0  20 10
""0  1
E "//!!! begin ti 13111
//alang: unbenannt analog zu den anderen Funktionen von urspr. PT_saveTreeAsPicture() (war sowieso irreführend, weil in eine Textdatei und nicht als Bild gespeichert wird)
void cmdExport()
{
  int        i;
  file       fd;
  shape      tree = getShape (\"treeTopology\");
  string     fName, s;
  dyn_string ds;

  fileSelector(fName, DATA_PATH, FALSE, \"*.txt\", FALSE);
  if (fName==\"\" || fName == \".txt\")
  {
    return;
  }
  if (strpos(fName,\".txt\")<1) fName += \".txt\";

  pt_exportTreeToTxtFile(fName);
  while ( access(fName,F_OK) != 0)
  {
    delay(0,1);
  }
  fd = fopen(fName,\"r\");
  i = 1;
  while ( !feof(fd) )
  {
    fgets(s, 65535, fd);
    strreplace(s,\"\\\"\",\"\");
    ds[i] = s;
    i++;
  }
  fclose(fd);
  dynRemove(ds, 1);
  fd = fopen(fName,\"w\");
  for ( i = 1; i <= dynlen(ds); i++)
  {
    fputs(ds[i], fd);
  }
  fclose(fd);
}
//!!! end ti 13111


//Function cmdSave_EventClick()
cmdSave(int &error)
{
  int        idx,level,pos,posFree;
  bool       isChanged;
  string     str;
  dyn_float  df;
  dyn_string ds;
  df[1]=0;

  error = 0;
  if (!getUserPermission(4))
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),makeDynString(getCatStr(\"general\",\"permission\")),df,ds);
    error = -1;
    return;
  }

  panelButtonsEnabled(false, false);

  // HOOK >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> HOOK
  // When a function 'HOOK_TopologySaveButton()' is defined
  // then call this one instead of the standard check
  if( isFunctionDefined( \"HOOK_TopologySaveButton\" ) )
  {
    string strEval = \"bool main(){ return HOOK_TopologySaveButton(); }\";
    bool bResult;

    evalScript( bResult, strEval, makeDynString() );


    if( bResult )
    {
      ChildPanelOnCentralModalReturn(\"vision/MessageWarning2\",
        getCatStr(\"pt\",\"errorHeader\"),
        makeDynString(getCatStr(\"pt\",\"errorcheckpt\"),
                      getCatStr(\"para\",\"yes\"),
                      getCatStr(\"para\",\"no\")),df,ds);
      if (df[1]==0)
      {
        panelButtonsEnabled(true, true);
        return;
      }
      error = 0;
    }

  }
  else
  {
    // when the hook function is not defined, then assume the default behaviour
    //check, if configurated panels are existing
    pt_checkTopologie(\"treeTopology\",str,error);
  }
  // HOOK <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< HOOK

  if (error<0)
  {
    dyn_string dsSelectedItems = treeTopology.selectedItems();
    if(dynlen(dsSelectedItems) < 1)
      idx = 1;
    else
      idx = dsSelectedItems[1];
    pos=idx; //dynContains(gPtTreeIndices,idx);
    txtPanel.text=gPtPanels[pos];
    pt_getFreeNodePos(posFree);
    txtSumAlert.text=(pos<posFree)?
                       pt_fileNameToDpName(gPtPanels[pos],gPtAlerts[pos]):\"\";
    level=pt_getNodeLevel(idx);

    if (error==-14)
    {
      ChildPanelOnCentralModalReturn(\"vision/MessageWarning2\",
        getCatStr(\"para\",\"warning\"),
        makeDynString(getCatStr(\"pt\",\"emptydollar\"),
                      getCatStr(\"para\",\"yes\"),
                      getCatStr(\"para\",\"no\")),df,ds);
      if (df[1]==0)
      {
        panelButtonsEnabled(true, true);
        return;
      }
    }
    else
    {
      pt_showError(error,str);
      ChildPanelOnCentralModalReturn(\"para/PanelTopology/PT_nodePara.pnl\",
        \"Parameter\",makeDynString(\"$pos:\"+pos,\"$level:\"+level,\"$posFree:\"+posFree),df,ds);
      txtPanel.text=gPtPanels[pos];
      txtSumAlert.text=(pos<posFree)?
                          pt_fileNameToDpName(gPtPanels[pos],gPtAlerts[pos]):\"\";
      setInputFocus(myModuleName(),myPanelName(),\"treeTopology\");
      panelButtonsEnabled(true, true);
      return;
    }
  }

  error=0;
  pt_writeTopologyDp(gPtIndices,
                     gPtNames,
                     gPtPanels,
                     gPtTypes,
                     gPtAlerts,
                     gPtModules,
                     gPtIcons,
                     gPtMenuBar,
                     gPtIconBar,
                     gPtModal,
                     gPtCentered,
                     gPtParameters,
                     gPtPermissions,
                     error,
                     false,
                     gPtDescription,
                     gPtLocality,
                     gPtFunctionality,
                     gPtPanelLink
                     );

  if (error<0)
  {
    pt_showError(error,\"\");
  }
  if (idx!=0)
    treeTopology.setSelectedItem(idx, true);

  gPtIndicesOld=gPtIndices;
  gPtNamesOld=gPtNames;
  gPtPanelsOld=gPtPanels;
  gPtAlertsOld=gPtAlerts;
  gPtTypesOld=gPtTypes;
  gPtModulesOld=gPtModules;
  gPtIconsOld=gPtIcons;
  gPtMenuBarOld=gPtMenuBar;
  gPtIconBarOld=gPtIconBar;
  gPtModalOld=gPtModal;
  gPtCenteredOld=gPtCentered;
  gPtParametersOld=gPtParameters;
  gPtPermissionsOld=gPtPermissions;
  gPtDescriptionOld=gPtDescription;
  gPtLocalityOld=gPtLocality;
  gPtFunctionalityOld=gPtFunctionality;
  gPtPanelLinkOld=gPtPanelLink;
  setInputFocus(myModuleName(),myPanelName(),\"treeTopology\");
  isChanged=pt_isTreeChanged();
  panelButtonsEnabled(true, !isChanged);
}
//////////////////////////////////////////////////////////////////////////
//Function cmdCheck_EventClick()
cmdCheck()
{
  int        error=0,idx,level,pos,posFree;
  string     str;
  dyn_float  df;
  dyn_string ds;

  if (!getUserPermission(4))
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),makeDynString(getCatStr(\"general\",\"permission\")),df,ds);
    return;
  }

  // HOOK >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> HOOK
  // When a function 'HOOK_TopologyCheckButton()' is defined
  // then call this one instead of the standard check
  if( isFunctionDefined( \"HOOK_TopologyCheckButton\" ) )
  {
    string strEval = \"bool main(){ return HOOK_TopologyCheckButton(); }\";
    bool bResult;

    evalScript( bResult, strEval, makeDynString() );

    return;
  }
  else
    pt_checkTopologie(\"treeTopology\",str,error);
  // HOOK <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< HOOK

  if (error<0)
  {
    idx=treeTopology.selectedItems()[1];
    pt_setAddButtons(idx);
    txtPanel.text=gPtPanels[idx];
    pt_getFreeNodePos(posFree);
    txtSumAlert.text=(idx<posFree)?
                       pt_fileNameToDpName(gPtPanels[idx],gPtAlerts[idx]):\"\";
    level=pt_getNodeLevel(idx);

    pt_showError(error,str);

    ChildPanelOnCentralModalReturn(\"para/PanelTopology/PT_nodePara.pnl\",
      \"Parameter\",makeDynString(\"$pos:\"+idx,\"$level:\"+level,\"$posFree:\"+posFree),df,ds);
    txtPanel.text=gPtPanels[idx];
    txtSumAlert.text=(idx<posFree)?
                       pt_fileNameToDpName(gPtPanels[idx],gPtAlerts[idx]):\"\";
  }
  else
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageInfo1\",
      getCatStr(\"pt\",\"check\"),
      makeDynString(getCatStr(\"pt\",\"checkok\")),df,ds);
  }
  setInputFocus(myModuleName(),myPanelName(),\"treeTopology\");

  dyn_string orphanedDps = findOrphanedDps();
  if (0 < dynlen(orphanedDps))
  {
    string s = orphanedDps;

    dyn_string ds_result;
    dyn_float df_result;
    ChildPanelOnReturn(\"vision/MessageInfoListAbort.pnl\",
                       getCatStr(\"pt\",\"unusedDPs\"),
                       makeDynString(getCatStr(\"pt\",\"confirmCleanup\"), s, getCatStr(\"SimpleSymbols\",\"delete\")),
                       100,
                       100,
                       df_result, ds_result);

    if (1 == df_result[1]) // yes
    {
      deleteOrphanedDps(orphanedDps);
    }
  }
}

addNode(int addMode)
{
  int        level,posFree;
  bool       isChanged;
  dyn_float  df;
  dyn_string ds;
  unsigned oldSelected = treeTopology.selectedItems()[1];

  if (!getUserPermission(4))
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),makeDynString(getCatStr(\"general\",\"permission\")),df,ds);
    return;
  }
  if (gPtTypes[oldSelected] && addMode == CHILD)
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),makeDynString(getCatStr(\"pt\",\"nochildforchild\")),df,ds);
    return;
  }
  panelButtonsEnabled(false, false);

  unsigned lastChild=0;
  if ( addMode == CHILD )
  {
    pt_getLastChild(oldSelected, gPtIndices, gPtParents, lastChild); //searching lastChild of Node
  }
  unsigned newIndex = pt_createItem(oldSelected, addMode, lastChild);  //create a new node
  treeTopology.setDragEnabled(newIndex,true);
  treeTopology.setDropEnabled(newIndex,true);
  if ( addMode == CHILD )
  {
    if ( !treeTopology.isOpen(treeTopology.selectedItems()[1]) )
     {
      treeTopology.setExpandable(treeTopology.selectedItems()[1], true);
      treeTopology.setOpen(treeTopology.selectedItems()[1], true);
    }
  }

  pt_getFreeNodePos(posFree);
  treeTopology.setSelectedItem(newIndex, true);
  level=pt_getNodeLevel(newIndex);
  ChildPanelOnCentralModalReturn(\"para/PanelTopology/PT_nodePara.pnl\",
    getCatStr(\"pt\",\"nodeparameter\"),makeDynString(\"$pos:\"+newIndex,\"$level:\"+level,\"$posFree:\"+posFree),df,ds);
  if (dynlen(df)<1 || !df[1])
  {
    // !!!delete the node if cancelled!!!
    cmdDelete(false, newIndex, oldSelected);
    return;
  }
//set the name and icon in tree
  treeTopology.setText(newIndex, 0, ((string)gPtNames[newIndex]));
  treeTopology.setIcon(newIndex, 0, iconImage[pt_getIconNr(newIndex, posFree)]);

  treeTopology.setSelectedItem(newIndex, true);
  isChanged=pt_isTreeChanged();
  panelButtonsEnabled(true, !isChanged);
  txtPanel.text=gPtPanels[newIndex];
  txtSumAlert.text=(newIndex<posFree)?
  pt_fileNameToDpName(gPtPanels[newIndex],gPtAlerts[newIndex]):\"\";
  setInputFocus(myModuleName(),myPanelName(),\"treeTopology\");
}


//////////////////////////////////////////////////////////////////////////
//Function cmdAddChild_EventClick()
cmdAddChild()
{  //add a Child-Node
  addNode(CHILD);
}
//////////////////////////////////////////////////////////////////////////
//Function cmdAddBrotherAfter_EventClick()
cmdAddBrotherAfter()
{
  addNode(BROTHERAFTER);
}
//////////////////////////////////////////////////////////////////////////
//Function cmdAddBrotherBefore_EventClick()
cmdAddBrotherBefore()
{
  addNode(BROTHERBEFORE);
}
//////////////////////////////////////////////////////////////////////////
//Function cmdModify_EventClick()
cmdModify()
{
  int        pos, idx, level, posFree;
  bool       isChanged;
  string     nodeName;
  dyn_float  df;
  dyn_string ds;

  if (!getUserPermission(4))
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),makeDynString(getCatStr(\"general\",\"permission\")),df,ds);
    return;
  }

  pos=treeTopology.selectedItems()[1];
  idx=pos;
  level=pt_getNodeLevel(pos);
  if (level==0 && pos>1)
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),
      makeDynString(getCatStr(\"pt\",\"freenopara\")),df,ds);
    return;
  }
  panelButtonsEnabled(false, false);
  pt_getFreeNodePos(posFree);

  ChildPanelOnCentralModalReturn(\"para/PanelTopology/PT_nodePara.pnl\",
    \"Parameter\",makeDynString(\"$pos:\"+pos,\"$level:\"+level,\"$posFree:\"+posFree),df,ds);
  treeTopology.setText(pos, 0, (string)gPtNames[pos]);
  treeTopology.setIcon(pos, 0, iconImage[pt_getIconNr(pos, posFree)]);
  isChanged=pt_isTreeChanged();
  panelButtonsEnabled(true, !isChanged);
  txtPanel.text=gPtPanels[pos];
  txtSumAlert.text=(pos<posFree)?
                     pt_fileNameToDpName(gPtPanels[pos],gPtAlerts[pos]):\"\";
  setInputFocus(myModuleName(),myPanelName(),\"treeTopology\");
}
//////////////////////////////////////////////////////////////////////////
//Function cmdDelete_EventClick()
cmdDelete(bool fromMenu, unsigned toDelete=0, unsigned toSelect=0)
{
  int        pos,i,j,idx,posFree;
  bool       isChanged;
  dyn_float  df;
  dyn_string ds;

  if (fromMenu && !getUserPermission(4))
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),makeDynString(getCatStr(\"general\",\"permission\")),df,ds);
    return;
  }

  if (fromMenu)
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageInfo\",
      getCatStr(\"pt\",\"deletingpanel\"),
      makeDynString(getCatStr(\"pt\",\"deletepanel\"),
                    getCatStr(\"para\",\"yes\"),
                    getCatStr(\"para\",\"no\")),
      df,ds);

    if (!df[1]) return;
  }

  panelButtonsEnabled(false, false);
  if (pos<0)
  {
    pt_showError(-9,\"\");
    panelButtonsEnabled(true, true);
    return;
  }
  if (toSelect == 0)
    toSelect=pt_getOtherSelection(toDelete);

  if(!pt_removeItem(toDelete))  //remove id from global variables
  {
    DebugN(\"Error deleting a node!\");
    return;
  }
  int error;

  isChanged=pt_isTreeChanged();
  treeTopology.setSelectedItem(toSelect, true);
  panelButtonsEnabled(true, !isChanged);
  txtPanel.text=gPtPanels[toSelect];
  pt_getFreeNodePos(posFree);

  txtSumAlert.text=(toSelect<posFree)?
                     pt_fileNameToDpName(gPtPanels[toSelect],gPtAlerts[toSelect]):\"\";
  setInputFocus(myModuleName(),myPanelName(),\"treeTopology\");
}
//////////////////////////////////////////////////////////////////////////
//Function cmdGenSumPanel_EventClick()
cmdGenSumPanel()
{
  int        pos;
  dyn_float  df;
  dyn_string ds;

  if (!getUserPermission(4))
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),makeDynString(getCatStr(\"general\",\"permission\")),df,ds);
    return;
  }



  if (dynlen(treeTopology.selectedItems()) > 0)
  {
    pos=treeTopology.selectedItems()[1];
    panelButtonsEnabled(false, false);
    pt_generateSumAlerts(pos, false);
  }
  panelButtonsEnabled(true, true);
}
//////////////////////////////////////////////////////////////////////////
//Function cmdShowSum_EventClick()
cmdShowSum()
{
  dyn_float  df;
  dyn_string ds;

  ChildPanelOnCentralModalReturn(\"para/PanelTopology/PT_sumAlertList.pnl\",
    getCatStr(\"pt\",\"alertlist\"),makeDynString(),df,ds);
  setInputFocus(myModuleName(),myPanelName(),\"treeTopology\");
}
//////////////////////////////////////////////////////////////////////////
//Function cmdSettings_EventClick()
cmdSettings()
{
  dyn_float  df;
  dyn_string ds;

  if (!getUserPermission(4))
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),makeDynString(getCatStr(\"general\",\"permission\")),df,ds);
    return;
  }

  ChildPanelOnCentralModalReturn(\"para/PanelTopology/PT_prioRange.pnl\",
    \"Prio.\",makeDynString(),df,ds);

  if ( df[1] && df[2] ) // IM 106203
    pt_createDpTypeSumAlertPanel(1,true);
}
//////////////////////////////////////////////////////////////////////////
//Function cmdClose_EventClick()
cmdClose()
{
  dyn_float  df;
  dyn_string ds;

  panelButtonsEnabled(false, false);

  if (!getUserPermission(4))
  {
    PanelOff();
    return;
  }

  if (pt_isTreeChanged())
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageWarning2\",
      getCatStr(\"para\",\"warning\"),
      makeDynString(getCatStr(\"pt\",\"treenotsaved\"),
                    getCatStr(\"para\",\"yes\"),
                    getCatStr(\"para\",\"no\")),df,ds);
    if (dynlen(df)>0 && df[1]!=0)  //yes save
    {
      int error=0;
      cmdSave(error);
      if (error != 0)
      {
        return;
      }
    }
    else if (dynlen(df)>0) //save NO
    {
      PanelOff();
      return;
    }
    else   //closed with X
    {
      panelButtonsEnabled(true, false);  // allow to save, or modify Nodes, but not to generate Sumalerts (cannot be generated while not saved)
      return;
    }

    ChildPanelOnCentralModal(\"para/PanelTopology/PT_message.pnl\",\". . .\",makeDynString());
  }

  PanelOff();
}

deleteOrphanedDps(dyn_string orphanedDps)
{
  dyn_string prioRange;
  dpGet(\"_SumAlertGeneral.prioRange.name:_online.._value\",prioRange);
  for (int i=1;i<=dynlen(orphanedDps);i++)
  {
    for (int j=1; j<=dynlen(prioRange); j++)
    {
      string dpe=orphanedDps[i]+\".\"+prioRange[j];
      dpSetWait(dpe+\":_alert_hdl.._active\", false);
    }
    dpDelete(orphanedDps[i]);
  }
}

dyn_string findOrphanedDps()
{
  dyn_string orphanedDps;

  dyn_int alerts;
  dyn_string panels;
  dyn_uint indices;
  dyn_uint parents;
  dpGet(\"_PanelTopology.sumAlertNumber:_online.._value\", alerts,
        \"_PanelTopology.fileName:_online.._value\", panels,
        \"_PanelTopology.panelNumber:_online.._value\", indices,
        \"_PanelTopology.parentNumber:_online.._value\", parents);

  dyn_string actDps = findParentedDps(panels, alerts, indices, parents);
  dyn_string allDps=dpNames(\"*\",\"_SumAlertPanel\");
  for (int i=1;i<=dynlen(allDps);i++)
  {
    allDps[i]=dpSubStr(allDps[i],DPSUB_DP);
    if (allDps[i]!=\"_mp__SumAlertPanel\" && dynContains(actDps,allDps[i])<1)
    {
      dynAppend(orphanedDps, allDps[i]);
    }
  }
  return orphanedDps;
}

dyn_string findParentedDps(dyn_string panels, dyn_int alerts, dyn_uint indices, dyn_uint parents)
{
  dyn_string actDps;
  for (int i=1; i<=dynlen(indices); i++)
  {
    if (strrtrim(strltrim(panels[i]))==\"\")
    {
      continue; // no panel
    }

    if (!isDescendant(i, 1, indices, parents))
    {
      continue; // not descendant
    }

    // creating datapoint name
    actDps[i]=pt_fileNameToDpName(panels[i],alerts[i]);
  }
  return actDps;
}

bool isDescendant(const uint toBeCheckedIdx, const uint ancestorIdx, const dyn_uint indices, const dyn_uint parents)
{
  uint currentIdx = toBeCheckedIdx;

  while ((0 != currentIdx) && (ancestorIdx != currentIdx))
  {
    int i = dynContains(indices, currentIdx);
    if (0 > i)
    {
      throwError(makeError(\"\", PRIO_WARNING, ERR_CONTROL, 0, \"Incorrect index detected currentIdx=\" + currentIdx));
      return false;
    }
    if (currentIdx <= parents[i]) // this should always be true and makes endless loops impossible
    {
      throwError(makeError(\"\", PRIO_WARNING, ERR_CONTROL, 0, \"Endless loop detected, parents[\"+i+\"]=\" + parents[i] + \" currentIdx=\" + currentIdx));
      return false;
    }

    currentIdx=parents[currentIdx];
  }

  return (ancestorIdx == currentIdx);
}

//////////////////////////////////////////////////////////////////////////
//Function panelButtonsEnabled() alang, IM 76623
//params: enabled - activate/deactivate buttons
//        enabled_gen - only if enabled true -> enabling also Alarm-Gen-Buttons
//        node - current node of tree
void panelButtonsEnabled(bool enabled, bool enabled_gen)
{
  //DebugN(\"panelButtonsEnabled\", enabled, enabled_gen, node);
 /* cmdClose.enabled = enabled;
  cmdSave.enabled = enabled;
  cmdCheck.enabled = enabled;
  cmdAddChild.enabled = enabled;
  cmdAddBrotherBefore.enabled = enabled;
  cmdAddBrotherAfter.enabled = enabled;
  cmdDelete.enabled = enabled;
  cmdModify.enabled = enabled;
  cmdGenSumAll.enabled = enabled;
  cmdGenSumDown.enabled = enabled;
  cmdGenSumPanel.enabled = enabled;
  cmdCheckAlerts.enabled = enabled;
  cmdShowSum.enabled = enabled;
  cmdSettings.enabled = enabled;
  cmdTemplates.enabled = enabled;
  cmdExport.enabled = enabled;
  treTopology.enabled = enabled; */

  if (!enabled)
  {
    setMultiValue(\"cmdClose\", \"enabled\", enabled,
                  \"cmdSave\", \"enabled\", enabled,
                  \"cmdCheck\", \"enabled\", enabled,
                  \"cmdAddChild\", \"enabled\", enabled,
                  \"cmdAddBrotherBefore\", \"enabled\", enabled,
                  \"cmdAddBrotherAfter\", \"enabled\", enabled,
                  \"cmdDelete\", \"enabled\", enabled,
                  \"cmdModify\", \"enabled\", enabled,
                  \"cmdGenSumAll\", \"enabled\", enabled,
                  \"cmdGenSumDown\", \"enabled\", enabled,
                  \"cmdGenSumPanel\", \"enabled\", enabled,
                  \"cmdCheckAlerts\", \"enabled\", enabled,
                  \"cmdShowSum\", \"enabled\", enabled,
                  \"cmdSettings\", \"enabled\", enabled,
                  \"cmdTemplates\", \"enabled\", enabled,
                  \"cmdExport\", \"enabled\", enabled,
                  \"treeTopology\", \"enabled\", enabled);

  }
  else //enabled
  {
    bool enabled_gensum = enabled_gen;
    dyn_string dsSelected = treeTopology.selectedItems();
    if(dynlen(dsSelected) < 1)
      dsSelected[1] = 1;
    if (dsSelected[1] != 0)  //otherwise throws an error \"BitVar, operator=, cannot assign variable of type IDISPATCH_VAR\"
    {
      pt_setAddButtons(dsSelected[1]); //for cmdAddChild, cmdAddBrotherBefore, cmdAddBrotherAfter, cmdModify, cmdDelete, cmdGenSumDown, cmdGenSumPanel
      enabled_gensum = enabled_gen && cmdGenSumPanel.enabled; //wegen pt_setAddButtons mit bereits gesetztem Zustand ODER-n
    }
    else
    {
      setMultiValue(\"cmdAddChild\", \"enabled\", enabled_gen,
                    \"cmdAddBrotherBefore\", \"enabled\", enabled_gen,
                    \"cmdAddBrotherAfter\", \"enabled\", enabled_gen,
                    \"cmdDelete\", \"enabled\", enabled_gen,
                    \"cmdModify\", \"enabled\", enabled_gen);
    }
    setMultiValue(\"cmdGenSumAll\", \"enabled\", enabled_gen,
                  \"cmdCheckAlerts\", \"enabled\", enabled_gen,
                  \"cmdGenSumDown\", \"enabled\", enabled_gen,//IM 108092 enabled_gensum,
                  \"cmdGenSumPanel\", \"enabled\", enabled_gen,//IM 108092 enabled_gensum,
                  \"cmdClose\", \"enabled\", enabled,
                  \"cmdSave\", \"enabled\", enabled,
                  \"cmdCheck\", \"enabled\", enabled,
                  \"cmdShowSum\", \"enabled\", enabled,
                  \"cmdSettings\", \"enabled\", enabled,
                  \"cmdTemplates\", \"enabled\", enabled,
                  \"cmdExport\", \"enabled\", enabled,
                  \"treeTopology\", \"enabled\", enabled);
  }
}

//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

int getLastChildOfThatLevel(string selected)
{
    dyn_string tmpChildren = treeTopology.children(selected);
    if (dynlen(tmpChildren)>0)
      return tmpChildren[dynlen(tmpChildren)];
    else
      return 0;  //no children found
}

int getBrotherBefore(int selected)
{
  if (selected==1)//root Node
    return -1;

  dyn_string sibling = treeTopology.children(treeTopology.parent(selected));

  string brotherBeforePos = dynContains(sibling, (string)selected)-1;

  if (brotherBeforePos < 1)
    return -1;

  return sibling[brotherBeforePos];
}
//this function is duplicated in pt.ctl, because we cannot call a function in library from panel, that calls functions of a panel
// ============================================================================
// Function:    unsigned pt_createItem(unsigned oldSelection, unsigned insertMode, unsigned lastChild=0, int alerts=0, langString name, string panel=\"\", bool type=false, string module=\"\", string icon=\"\", bool menuBar=true, bool iconBar=true, bool modal=true, bool centered=true, int permission=1)
//              <- Create a new Node and display it in treeTopology
// Parameters:  unsigned oldSelection  ...which node in tree is selected at the moment
//              unsigned insertMode    ...CHILD, BROTHERBEFORE, BROTHERAFTER
//              unsigned lastChild=0   ...the id of the last child - only needed for insertMode CHILD
//              init-values: int alerts=0, langString name, string panel=\"\", bool type=false, string module=\"\", string icon=\"\", bool menuBar=true, bool iconBar=true, bool modal=true, bool centered=true, int permission=
// return:      id of the new node
// ============================================================================
unsigned pt_createItem(unsigned oldSelection,
                       unsigned insertMode,
                       unsigned lastChild=0,
                       int alerts=0,
                       langString name=makeDynString(),
                       string panel=\"\",
                       bool type=false,
                       string module=\"\",
                       string icon=\"\",
                       bool menuBar=true,
                       bool iconBar=true,
                       bool modal=true,
                       bool centered=true,
                       string parameters=\"\",
                       int permission=1,
                       langString description=makeDynString(),
                       langString locality=makeDynString(),
                       langString functionality=makeDynString(),
                       string panellink=\"\")
{
  unsigned newIndex = dynlen(gPtIndices)+1, noOfLangs = getNoOfLangs();
  dyn_string pName;
  int pos, afterPos;
  unsigned tmpParent;
  bool useInsert = false;

// define the position according to insertMode
  if (insertMode == CHILD)
  {
    tmpParent = oldSelection;
    pos = (lastChild>0?lastChild+1:oldSelection+1);
    afterPos = getLastChildOfThatLevel(oldSelection);  //insert after lastChild of selection
    if (afterPos < 1)
      afterPos = oldSelection;
  }
  else if (insertMode == BROTHERBEFORE)
  {
    tmpParent = gPtParents[oldSelection];
    pos = oldSelection;
    afterPos = getBrotherBefore(oldSelection);  //insert before selection
    if (afterPos<1)
    {
      afterPos = tmpParent;
      useInsert = true;
    }
  }
  else if (insertMode == BROTHERAFTER)
  {
    tmpParent = gPtParents[oldSelection];
    pt_getLastChild(oldSelection, gPtIndices, gPtParents, pos); //searching lastChild of Node
    pos++;
    if (pos < 2)
      pos = oldSelection + 1;

    afterPos=oldSelection; //insert after selection
  }
  else
    return 0;
// create a NodeName in all Languages
  for (int i=1; i<=noOfLangs; i++)
    pName[i] = getCatStr(\"pt\",\"newpanel\",i-1);


  pt_insertItemAt(pos, pos, gPtIndices, true, true);
  pt_insertItemAt(pos, pos, gPtTreeIndices/*, true*/);
  pt_insertItemAt(pos, 0, gPtAlerts, false);  // WOKL 6.6.2018 don't increment, alerts should stay to their IDs TFS 37824
  pt_insertItemAt(pos, pName, gPtNames);
  pt_insertItemAt(pos, panel, gPtPanels);
  pt_insertItemAt(pos, type, gPtTypes);
  pt_insertItemAt(pos, module, gPtModules);
  pt_insertItemAt(pos, icon, gPtIcons);
  pt_insertItemAt(pos, menuBar, gPtMenuBar);
  pt_insertItemAt(pos, iconBar, gPtIconBar);
  pt_insertItemAt(pos, modal, gPtModal);
  pt_insertItemAt(pos, centered, gPtCentered);
  pt_insertItemAt(pos, parameters, gPtParameters);
  pt_insertItemAt(pos, permission, gPtPermissions);
  pt_insertItemAt(pos, description, gPtDescription);            //MG 17.06.2008
  pt_insertItemAt(pos, locality, gPtLocality);
  pt_insertItemAt(pos, functionality, gPtFunctionality);
  pt_insertItemAt(pos, panellink, gPtPanelLink);
  pt_insertItemAt(pos, 0, gPtParents, true);

  gPtParents[pos]=tmpParent;

  if (useInsert)  // insert as first of siblings - WOKL 6.6.18
    treeTopology.insertItem(tmpParent, pos, ((string)gPtNames[pos]));
  else
    treeTopology.appendItem(tmpParent, pos, ((string)gPtNames[pos]), afterPos);//mtrummer!!!

  return pos;
}

bool pt_askContinueWhenFavoritesAreFound()
{
  int nodeCount = dynlen(treeTopology.selectedItems());
  dyn_int indices;

  // check all nodes
  for (int i = 1; i <= nodeCount; i++)
    dynAppend(indices, i);

  // if there are no favorites, then it is safe to continue
  if (! pt_hasFavorites(indices))
    return true;

  // inform/warn the user
  dyn_string ds;
  dyn_float df;

  ChildPanelOnCentralModalReturn(
      \"vision/MessageInfo\",
      getCatStr(\"general\", \"warning\"),
      makeDynString(getCatStr(\"pt\", \"actionMayBreaksFavorite\"), getCatStr(\"para\", \"yes\"), getCatStr(\"para\", \"no\")),
      df, ds);

  if (dynlen(df) != 1) // [x] button
    return false;

  return (bool)df[1];
}

" 0
 6
"CBRef" "0"
"EClose" "main()
{
  cmdClose();
}" 0

"ELangChanged" "main()
{
  int error;
  dyn_string indices;
  dyn_int diParents;
  int i, j=1;

  for ( i = 1; i<=dynlen(gPtIndices); i++ )
  {
    treeTopology.setText(gPtIndices[i], 0, ((string)gPtNames[i]));  
  }
}"
"LangSwitchMode" "1"
"dpi" "96"
"pdpi" "96"
0 0 0
""
NC
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
4
LANG:10001 6 Layer1
LANG:10004 6 Layer1
LANG:10000 6 Layer1
LANG:10027 6 Layer1
30 75
"FRAME3"
""
1 430 138 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
50 0 0 0 0 0
E E E
1
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 1.323529411764706 0 1.9625 -139.1176470588235 -138.575 0 E 430 138 533 199
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0 4
LANG:10001 4 Node
LANG:10004 4 Node
LANG:10000 6 Knoten
LANG:10027 8 Узлы
30 74
"FRAME2"
""
1 430 43 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
49 0 0 0 0 0
E E E
1
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 1.323529411764706 0 1.5 -139.1176470588236 -29.50000000000001 0 E 430 43 533 104
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0 4
LANG:10001 17 Special functions
LANG:10004 12 高级功能
LANG:10000 17 Spezialfunktionen
LANG:10027 24 Спец. функции
2 61
"Text2"
""
1 122 593 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
38 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 0 1 E U  1 E 63 595 124 610
0 2 0 "0s" 0 0 0 194 0 0  124 595 1
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 10 File name:
LANG:10004 9 文件名
LANG:10000 10 Dateiname:
LANG:10027 18 Имя файла:
2 62
"txtSumAlertText"
""
1 122 623 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
40 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 0 1 E U  1 E 42 625 124 640
0 2 0 "0s" 0 0 0 194 0 0  124 625 1
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 13 Sum alert DP:
LANG:10004 18 报警汇总的DP:
LANG:10000 14 Sum.Meld.Name:
LANG:10027 24 DP групп.ал-ма:
13 19
"cmdClose"
""
1 485.0000000000001 5 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
1 0 0 0 27 0
E E E
0
4
LANG:10001 20 Close panel topology
LANG:10004 6 关闭
LANG:10000 20 Topologie schließen
LANG:10027 48 Закрыть топологию панелей

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  478 683 576 711

T 
4
LANG:10001 5 Close
LANG:10004 6 关闭
LANG:10000 10 Schließen
LANG:10027 14 Закрыть
"main()
{
  cmdClose();
}" 0
 E E E
13 8
"cmdSave"
""
1 280.0000000000002 684 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
2 0 0 1 83 0
E E E
0
4
LANG:10001 19 Save panel topology
LANG:10004 6 保存
LANG:10000 19 Topologie speichern
LANG:10027 52 Сохранить топологию панелей

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  278 682 376 710

T 
4
LANG:10001 4 Save
LANG:10004 6 保存
LANG:10000 9 Speichern
LANG:10027 18 Сохранить
"main()
{
  int error=0;
  cmdSave(error);
}

" 0
 E E E
13 26
"cmdCheck"
""
1 380.0000000000002 685 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 1 67 0
E E E
0
4
LANG:10001 20 Check panel topology
LANG:10004 6 检查
LANG:10000 22 Topologie überprüfen
LANG:10027 52 Проверить топологию панелей

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  378 683 476 711

T 
4
LANG:10001 5 Check
LANG:10004 6 检查
LANG:10000 12 Überprüfen
LANG:10027 18 Проверить
"main()
{
  cmdCheck();
}

" 0
 E E E
13 53
"cmdAddChild"
""
1 449.9999999999999 190 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
4 0 0 0 0 0
E E E
0
4
LANG:10001 17 Insert child node
LANG:10004 15 插入子节点
LANG:10000 20 Unterknoten anfügen
LANG:10027 42 Вставить дочерний узел

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  448 153 476 181

P 
13421772
"pictures/StandardIcons/Append_child_20.png"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()
{
  cmdAddChild();
}
" 0
 E E E
13 54
"cmdAddBrotherBefore"
""
1 479.9999999999999 190 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
5 0 0 0 0 0
E E E
0
4
LANG:10001 11 Insert node
LANG:10004 12 插入节点
LANG:10000 16 Knoten einfügen
LANG:10027 25 Вставить узел

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  478 153 506 181

P 
13421772
"pictures/StandardIcons/Insert_before_20.png"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()
{
  cmdAddBrotherBefore();
}" 0
 E E E
13 12
"cmdAddBrotherAfter"
""
1 509.9999999999999 190 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
6 0 0 0 0 0
E E E
0
4
LANG:10001 11 Append node
LANG:10004 12 添加节点
LANG:10000 15 Knoten anfügen
LANG:10027 25 Добавить узел

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  508 153 536 181

P 
13421772
"pictures/StandardIcons/Insert_after_20.png"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()
{
  cmdAddBrotherAfter();
}" 0
 E E E
13 23
"cmdModify"
""
1 449.9999999999999 220 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
7 0 0 1 77 0
E E E
0
4
LANG:10001 15 Node properties
LANG:10004 12 节点属性
LANG:10000 20 Knoten-Eigenschaften
LANG:10027 25 Свойства узла

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  448 183 476 211

P 
4294967295
"pictures/StandardIcons/Config_params_20.png"
4
LANG:10001 14 Properties ...
LANG:10004 9 属性...
LANG:10000 17 Einstellungen ...
LANG:10027 20 Свойства …
"main()
{
  cmdModify();
}
" 0
 E E E
13 13
"cmdDelete"
""
1 449.9999999999999 250 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
8 0 0 1 68 0
E E E
0
4
LANG:10001 11 Delete node
LANG:10004 6 删除
LANG:10000 15 Knoten löschen
LANG:10027 23 Удалить узел

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  448 213 476 241

P 
4294967295
"pictures/StandardIcons/delete_20.png"
4
LANG:10001 6 Delete
LANG:10004 6 删除
LANG:10000 8 Löschen
LANG:10027 14 Удалить
"main()
{
  if (! pt_askContinueWhenFavoritesAreFound())
    return;

  dyn_string dsSelectedItems = treeTopology.selectedItems();

  if(dynlen(dsSelectedItems) == 1)
    cmdDelete(true,treeTopology.selectedItems()[1],0);
  else
  {
    dyn_string ds;
    dyn_float df;

    ChildPanelOnCentralModalReturn(\"vision/MessageInfo\",
      getCatStr(\"pt\",\"deletingpanel\"),
      makeDynString(getCatStr(\"pt\",\"deletepanels\"),
                    getCatStr(\"para\",\"yes\"),
                    getCatStr(\"para\",\"no\")),
      df,ds);

    if (!df[1]) return;

    for(int i = 1; i <= dynlen(dsSelectedItems); i++)
      cmdDelete(false,treeTopology.selectedItems()[1],0);
  }
}" 0
 E E E
13 43
"cmdGenSumAll"
""
1 450 300 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
9 0 0 0 0 0
E E E
0
4
LANG:10001 32 Generate sum alerts - whole tree
LANG:10004 33 生成sum alert - 全部树节点
LANG:10000 44 Summenmeldungen generieren - ganze Topologie
LANG:10027 53 Групповые алармы - все дерево

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  448 298 546 326

T 
4
LANG:10001 10 Whole tree
LANG:10004 15 全部树节点
LANG:10000 11 Ganzen Baum
LANG:10027 19 Все дерево
"main()
{
  dyn_float  df;
  dyn_string ds;
  
  if (!getUserPermission(4))
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),makeDynString(getCatStr(\"general\",\"permission\")),df,ds);
    return;
  }

  panelButtonsEnabled(false, false);
  pt_generateSumAlerts(1, true);
  panelButtonsEnabled(true, true);
}" 0
 E E E
13 42
"cmdGenSumDown"
""
1 450 330 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
10 0 0 0 0 0
E E E
0
4
LANG:10001 26 Generate sum alerts - path
LANG:10004 24 生成sum alert - 路径
LANG:10000 33 Summenmeldungen generieren - Pfad
LANG:10027 42 Групповые алармы - путь

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  448 328 546 356

T 
4
LANG:10001 9 Downwards
LANG:10004 6 向下
LANG:10000 14 Ab akt. Knoten
LANG:10027 8 Вниз
"main()
{
  dyn_float  df;
  dyn_string ds;
  
  if (!getUserPermission(4))
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),makeDynString(getCatStr(\"general\",\"permission\")),df,ds);
    return;
  }
  panelButtonsEnabled(false, false);
  if (dynlen(treeTopology.selectedItems()) > 0)
  {
    pt_generateSumAlerts(treeTopology.selectedItems()[1], true);
  }
  panelButtonsEnabled(true, true);
}
" 0
 E E E
13 30
"cmdGenSumPanel"
""
1 450 360 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
11 0 0 0 0 0
E E E
0
4
LANG:10001 27 Generate sum alerts - panel
LANG:10004 24 生成sum alert - 面板
LANG:10000 34 Summenmeldungen generieren - Panel
LANG:10027 46 Групповые алармы - панель

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  448 358 546 386

T 
4
LANG:10001 14 Selected panel
LANG:10004 15 选定的画面
LANG:10000 10 Akt. Panel
LANG:10027 22 Выбр. панель
"main()
{
  cmdGenSumPanel();
}" 0
 E E E
13 44
"cmdCheckAlerts"
""
1 450 390 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
12 0 0 0 0 0
E E E
0
4
LANG:10001 16 Check sum alerts
LANG:10004 6 检查
LANG:10000 28 Summenmeldungen überprüfen
LANG:10027 48 Проверить групповой аларм

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  448 388 546 416

T 
4
LANG:10001 5 Check
LANG:10004 6 检查
LANG:10000 12 Überprüfen
LANG:10027 18 Проверить
"main()
{
  ModuleOnWithPanel(getCatStr(\"pt\",\"paneltopology\"),
    100,100, 
    520,350, 
    1,  1, 
    \"\", 
    \"para/PanelTopology/PT_sumAlertCheck.pnl\", 
    getCatStr(\"pt\",\"checksumalerts\"), 
    makeDynString());

  return;
}
" 0
 E E E
13 14
"cmdShowSum"
""
1 450 455 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
13 0 0 0 0 0
E E E
0
4
LANG:10001 14 Sum alert list
LANG:10004 15 Sum alert列表
LANG:10000 25 Liste der Summenmeldungen
LANG:10027 46 Список групповых алармов

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  448 453 546 481

T 
4
LANG:10001 14 List of alerts
LANG:10004 12 报警列表
LANG:10000 10 Alarmliste
LANG:10027 24 Список ал-мов
"main()
{
  cmdShowSum();
}
" 0
 E E E
13 40
"cmdSettings"
""
1 450 485 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
14 0 0 0 0 0
E E E
0
4
LANG:10001 20 Edit priority ranges
LANG:10004 21 编辑优先级范围
LANG:10000 29 Prioritätsbereiche editieren
LANG:10027 68 Редактировать диапазоны приоритетов

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  448 483 546 511

T 
4
LANG:10001 11 Prio.ranges
LANG:10004 18 报警等级范围
LANG:10000 13 Prio.Bereiche
LANG:10027 20 Диап.приор.
"main()
{
  cmdSettings();
}" 0
 E E E
13 20
"cmdHelp"
""
1 30.00000000000009 620 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
17 0 0 0 112 0
E E E
0
4
LANG:10001 4 Help
LANG:10004 6 帮助
LANG:10000 5 Hilfe
LANG:10027 14 Справка

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  13 683 111 711

T 
4
LANG:10001 4 Help
LANG:10004 6 帮助
LANG:10000 5 Hilfe
LANG:10027 14 Справка
"main()
{
  std_help(\"PT_main\");
}" 0
 E E E
13 65
"cmdExport"
""
1 450 90 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
16 0 0 0 112 0
E E E
0
4
LANG:10001 31 Saving Topology into ASCII File
LANG:10004 29 将拓扑保存为ASCII文件
LANG:10000 43 Speichern der Panel-Topologie in ASCII File
LANG:10027 36 Сохранить в ASCII файл

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  448 88 546 116

T 
4
LANG:10001 12 Exp.topology
LANG:10004 18 导出拓扑结构
LANG:10000 13 Exp.Topologie
LANG:10027 14 Экспорт
"main()
{
  cmdExport();
}" 0
 E E E
13 63
"cmdTemplates"
""
1 450 60 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
15 0 0 0 112 0
E E E
0
4
LANG:10001 22 Selecting new Template
LANG:10004 15 选择新模板
LANG:10000 20 Neue Vorlage wählen
LANG:10027 38 Выбор нового шаблона

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  448 58 546 86

T 
4
LANG:10001 8 Template
LANG:10004 6 模板
LANG:10000 7 Vorlage
LANG:10027 12 Шаблон
"main()
{
  int        xRes,yRes,pWidth,pHeight;
  dyn_float  df;
  dyn_string ds;
  df[1]=0;   
  if (!getUserPermission(4))
  {
    ChildPanelOnCentralModalReturn(\"vision/MessageWarning\",
      getCatStr(\"para\",\"warning\"),makeDynString(getCatStr(\"general\",\"permission\")),df,ds);
    return;
  }

  ChildPanelOnCentralModalReturn(\"para/PanelTopology/PT_preview.pnl\",
    \"PT_Preview\",
    makeDynString(\"\"),df,ds);
}" 0
 E E E
14 5
"txtPanel"
""
1 135 590 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
21 0 0 0 0 0
E E E
0
4
LANG:10001 24 Filename incl. rel. path
LANG:10004 27 文件名包括相对路径
LANG:10000 23 Dateiname mit rel. Pfad
LANG:10027 60 Относительный путь в имени файла

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  133 588 415 615
2 "0s" 0 0 0 0 0 -1  E E E
14 60
"txtSumAlert"
""
1 135 620 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
37 0 0 0 0 0
E E E
0
4
LANG:10001 24 Filename incl. rel. path
LANG:10004 27 文件名包括相对路径
LANG:10000 23 Dateiname mit rel. Pfad
LANG:10027 60 Относительный путь в имени файла

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  133 618 415 645
2 "0s" 0 0 0 0 0 -1  E E E
29 66
"treeTopology"
""
1 25 40 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
41 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

6
"dragAutoScroll" "bool TRUE"
"selectionMode" "enum 2"
"acceptDrops" ""
"DragStart" "main(int keys, string id)
{
  dyn_string dsSelectedItems = this.selectedItems();

  int pos=treeTopology.selectedItems()[1];
  int level=pt_getNodeLevel(pos);
  if (level==0 && pos>1) return;//IM 102361 
  
  if(!dynContains(dsSelectedItems, \"1\"))//prevent to move the first item
    dragStart((string)dsSelectedItems);
}"
"DragDrop" "main(string information, int dragType, string id)
{
  if(id == \"\") //prevent drag and drop outside of nodes
    return;

  if (! pt_askContinueWhenFavoritesAreFound())
    return;

  int error;
  dyn_bool dbOpen;

  dyn_string dsSelectedItems = strsplit(information,\"|\");
  for(int i = 1; i <= dynlen(dsSelectedItems); i++)
    strreplace(dsSelectedItems[i], \" \", \"\");

  string sFirstParent = gPtParents[dsSelectedItems[1]];

  for(int i = 1; i <= dynlen(dsSelectedItems); i++)
  {
    if(sFirstParent != gPtParents[dsSelectedItems[i]])
      return;
  }

  if(dynContains(dsSelectedItems, id))//checks if source node and target node is the same
    return;

  //IM 102361 -->
  if(pt_getNodeLevel((int)id) == 0)//it is either the StartPanel or the . . . panel
    if(gPtNames[(int)id] == \". . .\")
        return;//do not allow to drop it there
  for(int i = id; i > 0; i--)
  {
    if(pt_getNodeLevel(gPtParents[i]) == 0)//it is either the StartPanel or the . . . panel
      if(gPtNames[gPtParents[i]] == \". . .\")
        return;//do not allow to drop it there
  }
  // --> IM 102361

  string sEnabled = \"1\";

  if(id == 1 || this.getText(id,\"\") == \". . .\")//for first entry
    sEnabled = \"0\";

  int iAnswer;
  dyn_string dsPopUp;

  dsPopUp = makeDynString(\"PUSH_BUTTON, \" + getCatStr(\"pt\",\"insertOntoParent\") + \", 1, 1\",
                          \"PUSH_BUTTON, \" + getCatStr(\"pt\",\"insertBefore\") + \", 2, \" + sEnabled,
                          \"PUSH_BUTTON, \" + getCatStr(\"pt\",\"insertAfter\") + \", 3, \" + sEnabled );
  int ix, iy;
  getCursorPosition(ix, iy, true);
  popupMenuXY(dsPopUp, ix, iy, iAnswer);

  // We're going to make aq backup of the nodes that we're about to move
  dyn_anytype bkgPtAlerts;       // This array contains a backup of the items that we're moving via drag-and-drop
  dyn_anytype bkgPtNames;        // ..
  dyn_anytype bkgPtPanels;       // ..
  dyn_anytype bkgPtTypes;        // ..
  dyn_anytype bkgPtModules;      // ..
  dyn_anytype bkgPtIcons;        // ..
  dyn_anytype bkgPtMenuBar;      // ..
  dyn_anytype bkgPtIconBar;      // ..
  dyn_anytype bkgPtModal;        // ..
  dyn_anytype bkgPtCentered;     // ..
  dyn_anytype bkgPtParameters;   // ..
  dyn_anytype bkgPtPermissions;  // ..
  dyn_anytype bkgPtDescription;  // ..
  dyn_anytype bkgPtLocality;     // ..
  dyn_anytype bkgPtFunctionality;// ..
  dyn_anytype bkgPtPanelLink;    // ..
  dyn_anytype bkgPtParents;      // ..
  dyn_anytype originalIndex;     // ..
  dyn_anytype bkoriginalIndex;   // ..

  int newParent;
  int insertIndex;
  int error;
  dyn_bool dbOpen;
  dyn_bool bkdbOpen;

  // Determine what item is being dragged
  dyn_int diDraggedItem = (dyn_int)dsSelectedItems;     // Index of item that they started to drag
  int iDroppedItem = id;              // Index of the item where they've dropped onto

  int parentOfDraggedItem = gPtParents[ diDraggedItem[1] ];

  // Lets determine the node and kids of the item that we're about to drag !
  dyn_int nodesToBeDragged;
  for(int k = 1; k <= dynlen(diDraggedItem); k++)
    dynAppend(nodesToBeDragged, ptDetermineNodeAndKids( diDraggedItem[k] ));

  // When they attempt to drop a node onto one of its children
  // then abort here.
  // It is wrong to try and drop a parent onto one of his children.
  if( dynContains( nodesToBeDragged, iDroppedItem ) > 0 )
    return;

  // Determine what tree elements where open at the start
  for(int i = 1; i <= dynlen(gPtParents); i++)
  {
    dbOpen[i] = treeTopology.isOpen(i);
  }

  // We're going to determine the id of the parent,
  // and the location where we're about to insert
  switch(iAnswer)
  {
    case 1 :
      // 1 -> We drop onto our new parent
      newParent = iDroppedItem;
      insertIndex = iDroppedItem + 1;
      break;

    case 2 :
      // 2 -> We insert before the drop item
      // The new parent becomes the parent of the item where we drop onto
      newParent = gPtParents[ iDroppedItem ];
      insertIndex = iDroppedItem;
      break;

    case 3 :
      // 3 -> We insert after the drop item
      // The new parent becomes the parent of the item where we drop onto
      newParent = gPtParents[ iDroppedItem ];
      insertIndex = iDroppedItem + 1;//IM 102361
      break;
    default : return;
  }


  // We're going to make a backup of the original id's.
  // We'll then move all arrays arround including these original Id's .
  // ( we can them quite easily determine where each item went by looking at is original ID )
  for( int t = 1; t <= dynlen( gPtParents ); t++)
  {
    // The index is just an array tat goes from 1 to N
    dynAppend( originalIndex, t );
  }

  // We move the original index's around just like all the other arrays
  ptRemoveAndBackupNodes( originalIndex , bkoriginalIndex       , nodesToBeDragged ); //moves one item from old to new position and in-/de-crease data for elements between

  // We're going to remove the nodes that we're about to drag-and-drop !
  // We cut out the items from the original arrays and move them into the 'bk' backup arrays.

  ptRemoveAndBackupNodes( gPtAlerts       , bkgPtAlerts        , nodesToBeDragged ); //moves one item from old to new position and in-/de-crease data for elements between
  ptRemoveAndBackupNodes( gPtNames        , bkgPtNames         , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtPanels       , bkgPtPanels        , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtTypes        , bkgPtTypes         , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtModules      , bkgPtModules       , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtIcons        , bkgPtIcons         , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtMenuBar      , bkgPtMenuBar       , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtIconBar      , bkgPtIconBar       , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtModal        , bkgPtModal         , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtCentered     , bkgPtCentered      , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtParameters   , bkgPtParameters    , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtPermissions  , bkgPtPermissions   , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtDescription  , bkgPtDescription   , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtLocality     , bkgPtLocality      , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtFunctionality, bkgPtFunctionality , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtPanelLink    , bkgPtPanelLink     , nodesToBeDragged );
  ptRemoveAndBackupNodes( gPtParents      , bkgPtParents       , nodesToBeDragged );
  ptRemoveAndBackupNodes( dbOpen          , bkdbOpen           , nodesToBeDragged );

  // We're moving an item that possible has a whole bunch of children
  // Lets set the new parent ID
  string sOldParent = bkgPtParents[1];
  for(int i = 1; i <= dynlen(bkgPtParents); i++)
  {
    if(bkgPtParents[i] == sOldParent)
      bkgPtParents[i] = newParent;
  }

  // When we move a block to the back, then we have a problem
  // because the index where we were going to drop has just changed
  // ( because we've cut out some nodes )
  if( insertIndex >= diDraggedItem[1] + dynlen( nodesToBeDragged ))
  {
    // Correct the index where we're about to insert based
    // on the elements that e've cut out
    insertIndex -= dynlen( nodesToBeDragged );
  }

  for(int i = (insertIndex > 0)?insertIndex:1; i <= dynlen(gPtParents); i++)//IM 102361
  {
    if(gPtParents[i] == newParent)
    {
      insertIndex = i;
      break;
    }
  }

  // Now move all the nodes that we were dragging
  // We will insert the items that we backupped earlier at the appropriate index
  // in the arrays.

  ptInsertDraggedNodes( originalIndex   , bkoriginalIndex     , insertIndex );
  ptInsertDraggedNodes( gPtAlerts       , bkgPtAlerts         , insertIndex);//, true ); //IM 102345
  ptInsertDraggedNodes( gPtNames        , bkgPtNames          , insertIndex );
  ptInsertDraggedNodes( gPtPanels       , bkgPtPanels         , insertIndex );
  ptInsertDraggedNodes( gPtTypes        , bkgPtTypes          , insertIndex );
  ptInsertDraggedNodes( gPtModules      , bkgPtModules        , insertIndex );
  ptInsertDraggedNodes( gPtIcons        , bkgPtIcons          , insertIndex );
  ptInsertDraggedNodes( gPtMenuBar      , bkgPtMenuBar        , insertIndex );
  ptInsertDraggedNodes( gPtIconBar      , bkgPtIconBar        , insertIndex );
  ptInsertDraggedNodes( gPtModal        , bkgPtModal          , insertIndex );
  ptInsertDraggedNodes( gPtCentered     , bkgPtCentered       , insertIndex );
  ptInsertDraggedNodes( gPtParameters   , bkgPtParameters     , insertIndex );
  ptInsertDraggedNodes( gPtPermissions  , bkgPtPermissions    , insertIndex );
  ptInsertDraggedNodes( gPtDescription  , bkgPtDescription    , insertIndex );
  ptInsertDraggedNodes( gPtLocality     , bkgPtLocality       , insertIndex );
  ptInsertDraggedNodes( gPtFunctionality, bkgPtFunctionality  , insertIndex );
  ptInsertDraggedNodes( gPtPanelLink    , bkgPtPanelLink      , insertIndex );
// DebugN( gPtParents      , bkgPtParents        , insertIndex );
  ptInsertDraggedNodes( gPtParents      , bkgPtParents        , insertIndex );
// DebugN( gPtParents      , bkgPtParents        , insertIndex );
  ptInsertDraggedNodes( dbOpen          , bkdbOpen            , insertIndex );

  // We now use the original parent ID's to figure out where the
  // parents have moved to !
  // we iterate through all the items ( that have just moved )
  // then figure out where the parent went
  for( int t = 1; t <= dynlen( gPtParents ); t++)
  {
    //Figure out where the parent went.
    int iOriginalParent = gPtParents[t];

    //Get the position where the parent went
    int iNewIndex = dynContains( originalIndex, iOriginalParent );

    //We now know where the parent went !
    gPtParents[t] = iNewIndex;


    gPtIndices[t] = t;
  }

  //clear tree and reload topology
  treeTopology.clear();

  // Now remove all the items that we're going to drag
  pt_writeTopologyTree(
                       \"treeTopology\",
                       gPtIndices,
                       gPtParents,
                       gPtNames,
                       gPtPanels,
                       gPtTypes,
                       gPtTreeIndices,
                       error);


  // re-expand tree parts
  for(int i = 1; i < dynlen(dbOpen); i++)
  {
    treeTopology.setOpen(i, dbOpen[i]);
  }

  //opens the partent node and select the draged item
  this.setOpen(this.parent(insertIndex), true);
  this.setSelectedItems(makeDynString(insertIndex), true);
}

void ptInsertDraggedNodes(

  dyn_anytype &varInput,    // The array where we insert
  dyn_anytype &varBackup,   // the items that we want to insert
  int iNewPosition,         // The position where we want to insert ( or append at the very end )
  bool bIncrease = false
)
{
  if( iNewPosition > dynlen( varInput ))
  {
    // When the position is behind the last item
    // then we just dynAppend

    for( int t = 1; t <= dynlen(varBackup); t++)//IM 102361
    {
      dynAppend( varInput, varBackup[t] );
    }

  }

  else
  {
    for( int t = dynlen( varBackup ); t >= 1; t--)
    {
      pt_insertItemAt(iNewPosition, varBackup[t], varInput, bIncrease);
//       dynInsertAt( varInput, varBackup[t], iNewPosition );
    }
  }
}

// **************************
// This function will remove a whole bunch
// of ID's from the given array.
//
// This is used when we drag-and-drop a whole group
// of panels.
// ****************************

void ptRemoveAndBackupNodes(

  dyn_anytype &varInput,
  dyn_anytype &varBackup,
  dyn_int &iNodes
)
{
  // First make a backup of the values that we're about to delete
  for( int t = 1; t <= dynlen( iNodes ); t++ )
  {
    dynAppend( varBackup, varInput[ iNodes[t] ] );
  }

  // Now actually remove the items ( we have a backup )
  for( int t = dynlen( iNodes ); t >= 1; t--)
  {
    dynRemove( varInput, iNodes[t] );
  }
}

// *****************************
// Will determine all children of a
// given node.
//
// Returns an array containing the ID of the
// given node PLUS all his chilkren ( and children of children )\\
// *******************************

dyn_int ptDetermineNodeAndKids( int iStartNode )
{
  dyn_int iResult;
  dyn_int allParentIds;

  // We put the ID of the item where we started dragging
  // in the list of all parents
  dynAppend( allParentIds, iStartNode );

  // We also put the node where we started dragging into the
  // result array.
  dynAppend( iResult, iStartNode );


  // Iterate through all the nodes that follow the node where we started
  for( int t = iStartNode + 1; t <= dynlen( gPtParents ); t++)
  {

    if( dynContains( allParentIds, gPtParents[t] ) > 0)
    {
      dynAppend( iResult, t );


      // The node that we've just found could be a potential parent
      // for nodes to follow
      dynAppend( allParentIds, t );
    }

  }

  // Return the ID of all nodes that we've found
  return iResult;
}



"
"layoutAlignment" "AlignCenter"
4
LANG:10001 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10004 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10000 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
LANG:10027 35 MS Shell Dlg 2,-1,11,5,50,0,0,0,0,0
0  25 40 415 580
10 TreeWidget
4
0 "clicked" "(string id, int column)"
"  int idx;
  bool isChanged=pt_isTreeChanged();
  bool bDelete = TRUE;
  dyn_string dsSelectedItems = this.selectedItems();
  
  string sFirstParent;
  
  if(dynlen(dsSelectedItems) > 0)
    sFirstParent = gPtParents[dsSelectedItems[1]];

  for(int i = 1; i <= dynlen(dsSelectedItems); i++)
  {
    if(sFirstParent != gPtParents[dsSelectedItems[i]])
      bDelete = FALSE;
  }
  
  if(dynlen(dsSelectedItems) > 1)
  {
    setMultiValue(\"cmdAddChild\", \"enabled\" , false,
                  \"cmdAddChild\", \"enabled\", false,
                  \"cmdAddBrotherBefore\", \"enabled\", false,
                  \"cmdAddBrotherAfter\", \"enabled\", false,
                  \"cmdModify\", \"enabled\", false,
                  \"cmdDelete\", \"enabled\", bDelete, 
                  \"cmdGenSumDown\", \"enabled\", false,
                  \"cmdGenSumPanel\", \"enabled\", false,
                  \"pb_down\", \"enabled\", false,
                  \"pb_up\", \"enabled\", false);
    return;
  }
  
  if (id == \"\") // no node seleced
  {
    setMultiValue(\"cmdAddChild\", \"enabled\" , false,
                  \"cmdAddChild\", \"enabled\", false,
                  \"cmdAddBrotherBefore\", \"enabled\", false,
                  \"cmdAddBrotherAfter\", \"enabled\", false,
                  \"cmdModify\", \"enabled\", false,
                  \"cmdDelete\", \"enabled\", false, 
                  \"cmdGenSumDown\", \"enabled\", false,
                  \"cmdGenSumPanel\", \"enabled\", false,
                  \"pb_down\", \"enabled\", false,
                  \"pb_up\", \"enabled\", false); 
    return;
  }

  idx=id;
  pt_setAddButtons(idx);
  setMultiValue(\"cmdGenSumAll\", \"enabled\", !isChanged,
                \"cmdGenSumDown\", \"enabled\", !isChanged,
                \"cmdGenSumPanel\", \"enabled\", !isChanged,
                \"cmdCheckAlerts\", \"enabled\", !isChanged,
                \"txtPanel\", \"text\", gPtPanels[idx],
                \"txtSumAlert\", \"text\", pt_fileNameToDpName(gPtPanels[idx],gPtAlerts[idx]));

  if(id == 1 || this.getText(id,\"\") == \". . .\")
   setMultiValue(\"pb_down\", \"enabled\", false,
                 \"pb_up\", \"enabled\", false);
  else
   setMultiValue(\"pb_down\", \"enabled\", true,
                 \"pb_up\", \"enabled\", true);"
0 "doubleClicked" "(string id, int column)"
"  cmdModify();"
0 "rightClicked" "(string id, int column)"
"  if (dynlen(treeTopology.selectedItems()) > 1)
    return;
  int idx, level, posFree;
  int answer,error;
  bool isChanged=pt_isTreeChanged();
  dyn_string popup;
  if (id == \"\") return; // no node clicked

  idx=id;
  pt_setAddButtons(idx);
  cmdGenSumAll.enabled=(!isChanged);
  cmdGenSumDown.enabled=(!isChanged);
  cmdGenSumPanel.enabled=(!isChanged);
  cmdCheckAlerts.enabled=(!isChanged);
  txtPanel.text=gPtPanels[idx];
  txtSumAlert.text=pt_fileNameToDpName(gPtPanels[idx],gPtAlerts[idx]);
  
  level = pt_getNodeLevel( idx );
  pt_getFreeNodePos(posFree);
  
  popup=makeDynString(\"PUSH_BUTTON\", +getCatStr(\"pt\",\"save\")+      \", 1, \"
                                     +(getUserPermission(4)?\"1\":\"0\"),
                      \"PUSH_BUTTON\", +getCatStr(\"pt\",\"check\")+     \", 2, \"
                                     +(getUserPermission(4)?\"1\":\"0\"),
                      \"SEPARATOR\",
                      \"PUSH_BUTTON\", +getCatStr(\"pt\",\"addchild\")+  \", 3, \"
                                     +(cmdAddChild.enabled()?\"1\":\"0\"),
                      \"PUSH_BUTTON\", +getCatStr(\"pt\",\"addbefore\")+ \", 4, \"
                                     +(cmdAddBrotherBefore.enabled()?\"1\":\"0\"),
                      \"PUSH_BUTTON\", +getCatStr(\"pt\",\"addafter\")+  \", 5, \"
                                     +(cmdAddBrotherAfter.enabled()?\"1\":\"0\"),
                      \"SEPARATOR\",
                      \"PUSH_BUTTON\", +getCatStr(\"pt\",\"properties\")+\", 6, \"
                                     +(cmdModify.enabled()?\"1\":\"0\"),
                      \"PUSH_BUTTON\", +getCatStr(\"pt\",\"delete\")+    \", 7, \"
                                     +(cmdDelete.enabled()?\"1\":\"0\"),
                      \"SEPARATOR\",
                      \"PUSH_BUTTON\", +getCatStr(\"pt\",\"generate\")+  \", 8, \"
                                     +(cmdGenSumPanel.enabled()?\"1\":\"0\"),
                      \"SEPARATOR\",
                      \"PUSH_BUTTON\", +getCatStr(\"pt\",\"list\")+      \", 9, \"
                                     +1,
                      \"PUSH_BUTTON\", +getCatStr(\"pt\",\"prio\")+      \",10, \"
                                     +(getUserPermission(4)?\"1\":\"0\"),
                      \"SEPARATOR\",
                      \"PUSH_BUTTON\", +getCatStr(\"pt\",\"help\")+      \",11, \"
                                     +1,

                      //!!! begin ti 13111
                      \"SEPARATOR\",
                      \"PUSH_BUTTON\", +getCatStr(\"pt\",\"savetofile\")+      \",98, \"
                                     +(getUserPermission(4)?\"1\":\"0\"),
                      //!!! end ti 13111

                      \"SEPARATOR\",
                      \"PUSH_BUTTON\", +getCatStr(\"general\",\"close\")+\",99, \"
                                     +1);
//  popupMenu(popup, answer);

  popupMenu(popup,answer);

  switch (answer)
  {
    case 1:
      cmdSave(error);
      break;
    case 2:
      cmdCheck();
      break;
    case 3:
      cmdAddChild();
      break;
    case 4:
      cmdAddBrotherBefore();
      break;
    case 5:
      cmdAddBrotherAfter();
      break;
    case 6:
      cmdModify();
      break;
    case 7:
      cmdDelete(true,treeTopology.selectedItems()[1],0);
      break;
    case 8:
      cmdGenSumPanel();
      break;
    case 9:
      cmdShowSum();
      break;
    case 10:
      cmdSettings();
      break;
    case 11:
      std_help(\"PT_main\");
      break;

    //!!! begin ti 13111
    case 98:
      cmdExport();
      break;
    //!!! end ti 13111

    case 99:
      cmdClose();
      break;
  }
  if (error<0)
  {
    pt_showError(error,\"\");
  }"
0 "selectionChanged" "(string id)"
"  
  int idx;
  bool isChanged=pt_isTreeChanged();
  bool bDelete = TRUE;
  dyn_string dsSelectedItems = this.selectedItems();
  
  string sFirstParent;
  
  if(dynlen(dsSelectedItems) > 0)
  {
    sFirstParent = gPtParents[dsSelectedItems[1]];
    id = dsSelectedItems[1];
  }

  for(int i = 1; i <= dynlen(dsSelectedItems); i++)
  {
    if(sFirstParent != gPtParents[dsSelectedItems[i]])
      bDelete = FALSE;
  }
  
  if(dynlen(dsSelectedItems) > 1)
  {
    setMultiValue(\"cmdAddChild\", \"enabled\" , false,
                  \"cmdAddChild\", \"enabled\", false,
                  \"cmdAddBrotherBefore\", \"enabled\", false,
                  \"cmdAddBrotherAfter\", \"enabled\", false,
                  \"cmdModify\", \"enabled\", false,
                  \"cmdDelete\", \"enabled\", bDelete, 
                  \"cmdGenSumDown\", \"enabled\", false,
                  \"cmdGenSumPanel\", \"enabled\", false,
                  \"pb_down\", \"enabled\", false,
                  \"pb_up\", \"enabled\", false);
    return;
  }
  
  if (id == \"\") // no node seleced
  {
    setMultiValue(\"cmdAddChild\", \"enabled\" , false,
                  \"cmdAddChild\", \"enabled\", false,
                  \"cmdAddBrotherBefore\", \"enabled\", false,
                  \"cmdAddBrotherAfter\", \"enabled\", false,
                  \"cmdModify\", \"enabled\", false,
                  \"cmdDelete\", \"enabled\", false, 
                  \"cmdGenSumDown\", \"enabled\", false,
                  \"cmdGenSumPanel\", \"enabled\", false,
                  \"pb_down\", \"enabled\", false,
                  \"pb_up\", \"enabled\", false); 
    return;
  }

  idx=id;
  pt_setAddButtons(idx);
  setMultiValue(\"cmdGenSumAll\", \"enabled\", !isChanged,
                \"cmdGenSumDown\", \"enabled\", !isChanged,
                \"cmdGenSumPanel\", \"enabled\", !isChanged,
                \"cmdCheckAlerts\", \"enabled\", !isChanged,
                \"txtPanel\", \"text\", gPtPanels[idx],
                \"txtSumAlert\", \"text\", pt_fileNameToDpName(gPtPanels[idx],gPtAlerts[idx]));

  if(id == 1 || this.getText(id,\"\") == \". . .\")
   setMultiValue(\"pb_down\", \"enabled\", false,
                 \"pb_up\", \"enabled\", false);
  else
   setMultiValue(\"pb_down\", \"enabled\", true,
                 \"pb_up\", \"enabled\", true);"
E13 67
"pb_up"
""
1 479.9999999999999 220 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
43 0 0 0 0 0
E E E
0
4
LANG:10001 14 Move column up
LANG:10004 15 向上移动列
LANG:10000 28 Spalte nach oben verschieben
LANG:10027 48 Переместить столбец вверх

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  478 183 506 211

P 
10040064
"pictures/StandardIcons/arrow_top_20.png"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"synchronized main()
{
  if (! pt_askContinueWhenFavoritesAreFound())
    return;

  //move the selected one position up
  unsigned id1 = treeTopology.selectedItems()[1];

/*
//maybe the generated nodes shouldn't be able to move
  int posFree;
  pt_getFreeNodePos(posFree);
  if (posFree>id)
*/

  int brotherBefore = pt_getMyBrotherBefore(id1);
  if (brotherBefore != id1)
  {
    pt_swapItems(id1, brotherBefore);
    treeTopology.setSelectedItem(brotherBefore, true);
  }
}
" 0
 E E E
13 68
"pb_down"
""
1 479.9999999999999 250 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
45 0 0 0 0 0
E E E
0
4
LANG:10001 16 Move column down
LANG:10004 15 向下移动列
LANG:10000 29 Spalte nach unten verschieben
LANG:10027 46 Переместить столбец вниз

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  478 213 506 241

P 
10040064
"pictures/StandardIcons/arrow_bottom_20.png"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"synchronized main()
{
  if (! pt_askContinueWhenFavoritesAreFound())
    return;

  //move the selected one position down
  unsigned id1 = treeTopology.selectedItems()[1];

/*
//maybe the generated nodes shouldn't be able to move
  int posFree;
  pt_getFreeNodePos(posFree);
  if (posFree>id)
*/

  int brotherAfter = pt_getMyBrotherAfter(id1);

  if (brotherAfter != id1)
  {
    pt_swapItems(id1, brotherAfter);
    treeTopology.setSelectedItem(brotherAfter, true);
  }
}
" 0
 E E E
30 71
"FRAME1"
""
1 10 11 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
48 0 0 0 0 0
E E E
1
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 1.018181818181818 0 0.9433962264150939 4.818181818181822 -0.377358490566038 0 E 10 11 561 701
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0 4
LANG:10001 14 Panel topology
LANG:10004 12 面板拓扑
LANG:10000 14 Paneltopologie
LANG:10027 31 Иерархия панелей
1 81 0 "" 0
0
30 76
"FRAME4"
""
1 430 268 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
51 0 0 0 0 0
E E E
1
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 1.323529411764706 0 2.785219957081545 -139.1176470588235 -488.1731759656653 0 E 430 268 533 329
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0 4
LANG:10001 8 Generate
LANG:10004 6 生成
LANG:10000 13 Summenmeldung
LANG:10027 24 Сформировать
2 77
"PRIMITIVE_TEXT1"
""
1 441 275 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
52 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 2 1 E U  0 E 441 275 508 290
0 2 2 "0s" 0 0 0 192 0 0  441 275 1
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0 4
LANG:10001 10 sum alerts
LANG:10004 12 报警汇总
LANG:10000 10 generieren
LANG:10027 24 групп. алармы
30 80
"FRAME5"
""
1 430 433 E E E 1 E 1 E N "_WindowText" E N {0,0,0} E E
 E E
53 0 0 0 0 0
E E E
1
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 0 1 0 1 E 1.325490196078431 0 1.453333333333333 -139.9607843137255 -196.4980983606556 0 E 430 433 533 494
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0 4
LANG:10001 7 Details
LANG:10004 6 详细
LANG:10000 7 Details
LANG:10027 12 Детали
0
LAYER, 1 
4
LANG:10001 6 Layer2
LANG:10004 6 Layer2
LANG:10000 6 Layer2
LANG:10027 6 Layer2
0
LAYER, 2 
4
LANG:10001 6 Layer3
LANG:10004 6 Layer3
LANG:10000 6 Layer3
LANG:10027 6 Layer3
0
LAYER, 3 
4
LANG:10001 6 Layer4
LANG:10004 6 Layer4
LANG:10000 6 Layer4
LANG:10027 6 Layer4
0
LAYER, 4 
4
LANG:10001 6 Layer5
LANG:10004 6 Layer5
LANG:10000 6 Layer5
LANG:10027 6 Layer5
0
LAYER, 5 
4
LANG:10001 6 Layer6
LANG:10004 6 Layer6
LANG:10000 6 Layer6
LANG:10027 6 Layer6
0
LAYER, 6 
4
LANG:10001 6 Layer7
LANG:10004 6 Layer7
LANG:10000 6 Layer7
LANG:10027 6 Layer7
0
LAYER, 7 
4
LANG:10001 6 Layer8
LANG:10004 6 Layer8
LANG:10000 6 Layer8
LANG:10027 6 Layer8
0
3 0 "PANEL_REF0" -1
"layoutAlignment" "AlignCenter"
"" ""
"objects_parts/STD_OBJECTS/ButtonBarBackground.pnl" 130 730 T 49 1.180360721442886 0 1 -153.4468937875751 -55
0
0

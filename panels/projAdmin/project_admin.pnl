V 14
4
LANG:10001 21 Project Administrator
LANG:10004 15 项目管理员
LANG:10000 21 Project Administrator
LANG:10027 51 Администрирование проектов
PANEL,-1 -1 581 425 N "_3DFace" 1
"$MODE"
"main()
{
  //IM 112761
  if ( !globalExists(\"gFirstInit\") )
  {
    addGlobal(\"gFirstInit\", BOOL_VAR);
    gFirstInit = true;
  }
  else
    gFirstInit = false;
  //IM 112761

  dyn_string dsrun, ds, dsConsole, dsBadProjs;
  string     projVersion, projName, sPath;
  bool       runnable;
  int        err, i, j = 0, iErr;

//  gUpdateProjList = 0;
  gUpdateProjList = 1;

  gTcpFileDescriptor  = -1;
  gTcpFileDescriptor2 = -1;
  gTcpHostName = \"\";
  gTcpPortNumber = -1;
  gTcpFifo = \"\";
  gRefreshCycle = 0;

  setWindowTitle(myModuleName(), \"WinCC OA \" + VERSION_DISP + \": \" + getCatStr(\"pa\", \"paWindowTitle\"));

  gNewProjName = \"\";
  chbUpdateProjList.state(0) = (gUpdateProjList < 0);
  if ( !globalExists(\"gParams\") )
    addGlobal(\"gParams\", DYN_ANYTYPE_VAR);
  gParams[1]  = myModuleName();
  gParams[2]  = \"\";
  gParams[3]  = myPanelName();
  gParams[4]  = \"\";
  gParams[5]  = 10;
  gParams[6]  = 10;
  gParams[7]  = 1.0;
  gParams[8]  = true;
  gParams[9]  = makeDynString();
  gParams[10] = true;

  if ( !globalExists(\"gModuleParams\") )
    addGlobal(\"gModuleParams\", DYN_ANYTYPE_VAR);
  gModuleParams[1]  = \"Console\";
  gModuleParams[2]  = -2;
  gModuleParams[3]  = -2;
  gModuleParams[4]  = 50;
  gModuleParams[5]  = 50;
  gModuleParams[6]  = 1;
  gModuleParams[7]  = 1;
  gModuleParams[8]  = \"None\";
  gModuleParams[9]  = \"\";
  gModuleParams[10] = \"\";
  gModuleParams[11] = makeDynString();

  manTable.gridColor = \"_Window\";
  manTable.deleteAllLines();
  manTable.tableMode(TABLE_SELECT_BROWSE);
  manTable.selectByClick(TABLE_SELECT_LINE);
  manTable.selectColors(\"darkgrey\", \"white\");
  manTable.sortOnClick(false);

  manTable.lineVisible(0);
  gOldSelected = -1;
//!!!
  if ( !globalExists(\"gTcpUserName\") )
    addGlobal(\"gTcpUserName\", STRING_VAR);
  gTcpUserName = \"\";
  if ( !globalExists(\"gTcpPassword\") )
    addGlobal(\"gTcpPassword\", STRING_VAR);
  gTcpPassword = \"\";
  if ( !globalExists(\"gProjList\") )
    addGlobal(\"gProjList\", DYN_STRING_VAR);
  if ( !globalExists(\"gVersion\") )
    addGlobal(\"gVersion\", DYN_STRING_VAR);
  if ( !globalExists(\"gProjPath\") )
    addGlobal(\"gProjPath\", DYN_STRING_VAR);

  if ( !globalExists(\"gGetProjsErrShown\") )
  {
    addGlobal(\"gGetProjsErrShown\", BOOL_VAR);
    gGetProjsErrShown = false;
  }

  sPath = PROJ_PATH + \"config/config\";
  iErr = paCfgReadValue(sPath,\"general\",\"proj_version\",projVersion);

  if ( iErr || paVersionStringToNumeric(projVersion) < paVersionStringToNumeric(\"3.0\"))
  {
    dyn_anytype da, daa;

    pmon_warningOutput(\"errPvssVersion\", -1);

    da[1] = myModuleName();
    da[2] = myPanelName();
    daa = makeDynString();
    da[3] = daa;
    panelOff(da);
  }

  cmdLanguage.enabled = (getNoOfLangs() > 1);

  gProjList=makeDynString();
  gVersion=makeDynString();
  gProjPath=makeDynString();

  err = paGetProjs(gProjList, gVersion, gProjPath, dsBadProjs);

/*  if ( err && !gGetProjsErrShown)
  {
    showInvalidProjects(dsBadProjs);
  }

  if ( !globalExists(\"gProjRuns\") )
  {
    addGlobal(\"gProjRuns\", DYN_BOOL_VAR);
  }
*/

  //DebugTN(\"gProjList\", gProjList, \"gVersion\", gVersion, \"gProjPath\", gProjPath);

  for ( i = dynlen(gProjList); i > 0 ; i--)
  {
    runnable = paGetProjRunnable(gProjList[i]);
    dsrun[i] = getCatStr(\"pmon\",\"Unchecked\");
    dsConsole[i] = \"\";

    if ( gVersion[i] == \"\" || paVersionStringToNumeric(gVersion[i]) < VERSION_NUMERIC )
    {
      dynRemove(gProjList, i);
      dynRemove(gVersion, i);
      dynRemove(gProjPath, i);
      dynRemove(dsrun, i);
      dynRemove(dsConsole, i);
    }
  }

  //sorting projs
  dyn_dyn_anytype ddaTab;
  dyn_string dsIndex;

  for ( int i = 1; i <= dynlen(gProjList); i++ )
    dsIndex[i] = strtoupper(gProjList[i]);

  if ( dynlen(dsIndex) > 0 )
  {
    ddaTab[1] = dsIndex;
    ddaTab[2] = gProjList;
    ddaTab[3] = gVersion;
    ddaTab[4] = dsrun;
    ddaTab[5] = dsConsole;
    ddaTab[6] = gProjPath;
    dynDynTurn(ddaTab);
    dynDynSort(ddaTab,1);
    dynDynTurn(ddaTab);
    gProjList = ddaTab[2];
    gVersion = ddaTab[3];
    dsrun = ddaTab[4];
    dsConsole = ddaTab[5];
    gProjPath = ddaTab[6];
  }

  //Show older Projects
  dynAppend(gProjList, getCatStr(\"pa\", \"showOlderProjects\"));
  dynAppend(gVersion, \"\");
  dynAppend(dsrun, \"\");
  dynAppend(dsConsole, \"\");

  manTable.appendLines(dynlen(gProjList),\"#1\",gProjList, \"#2\",gVersion,
                                         \"#3\",dsrun, \"#5\", dsConsole);

  //show older project entrie bold and italic
  manTable.cellFontRC(manTable.lineCount-1, \"#1\", \"Noto Sans,-1,12,5,75,1,0,0,0,0,Bold Italic\");

  manTable.visible = true;
  //cmdCopy.enabled = false;
  //cmdDelete.enabled = false;
  cmdEdit.enabled = false;
  cmdOpen.enabled = false;
  cmdStart.enabled = false;
  cmdStop.enabled = false;

  //gUpdateProjList = -1;
  startThread(\"showProjs\");

  if ( isDollarDefined(\"$MODE\") && gFirstInit )
  {
    if ( $MODE == 1 )
      openOldProjectsAdmin();
  }
}

void showInvalidProjects(dyn_string dsBadProjs)
{
    int          x, y, i, j;
    string       sDollar;
    dyn_string   dsErr, ds, dsDollar;
    dyn_anytype  daResult, da;
    dyn_errClass dErr = getLastError();

    if ( dynlen(dErr) > 0 )
    {
      dsErr = dErr;
      throwError(dErr);
    }

    getChildPanelCentralPosition(\"vision/MessageWarning2\", x, y);
    gParams[1]  = myModuleName();
    gParams[2]  = \"vision/MessageWarning2\";
    gParams[3]  = myPanelName();
    gParams[4]  = \"\";
    gParams[5]  = x;
    gParams[6]  = y;
    gParams[9]  = makeDynString(getCatStr(\"pmon\", \"errorGetProjsDel\"),
                                getCatStr(\"para\", \"yes\"),
                                getCatStr(\"para\", \"no\"));
    childPanel(gParams, daResult);
    if ( dynlen(daResult) > 0 && daResult[1] != 0 )
    {
      for ( i = 1; i <= dynlen(dsErr); i++ )
      {
        ds = strsplit(dsErr[i], \",\");
        for ( j = 1; j < 6; j++ ) dynRemove(ds, 1);
        dsDollar[i] = dsBadProjs[i] + \"§\" + ds[1];
      }
      sDollar = dsDollar;
      daResult = da;
      getChildPanelCentralPosition(\"projAdmin/pa_del_invalid_projects.pnl\", x, y);
      gParams[1]  = myModuleName();
      gParams[2]  = \"projAdmin/pa_del_invalid_projects.pnl\";
      gParams[3]  = myPanelName();
      gParams[4]  = \"\";
      gParams[5]  = x;
      gParams[6]  = y;
      gParams[9]  = makeDynString(sDollar);
      childPanel(gParams, daResult);
    }
    else//show message only if user want to see it
    {
      gGetProjsErrShown = true;
    }

    if ( dynlen(daResult) > 0 && daResult[1] != 0 )
    {
      getChildPanelCentralPosition(\"vision/MessageInfo1\", x, y);
      gParams[1]  = myModuleName();
      gParams[2]  = \"vision/MessageInfo1\";
      gParams[3]  = myPanelName();
      gParams[4]  = \"\";
      gParams[5]  = x;
      gParams[6]  = y;
      gParams[9]  = makeDynString(getCatStr(\"pmon\", \"projsDeleted\"));
      childPanel(gParams, daResult);
    }

    //pmon_warningOutput(\"errorGetProjs\", -1);
//     gGetProjsErrShown = true;
}

//---------------------------------------------------------------
void showProjs() // showProjsThread()
{
  int     err, i, j, iP, l;
  bool    bRuns, bChanged, bCycle = chbUpdateProjList.state(0);
  string  sR = getCatStr(\"pmon\",\"Running\"), sN = getCatStr(\"pmon\",\"Not running\"),
          sVar, sProj, otherProject, sBackCol, sP, sH;
  dyn_int diIdx, diPorts;
  dyn_string ds, dsVer, dsPath, dsProjs, dsHosts, dsConsole;

  // gUpdateProjList == -1   - cyclic refresh
  // gUpdateProjList ==  0   - no refresh
  // gUpdateProjList ==  1   - refresh once
  // gUpdateProjList ==  2   - refresh version only
  while (true)
  {
    diPorts = makeDynInt();
    dsProjs = makeDynString();
    dsHosts = dsProjs;

    if ( gUpdateProjList == 0 )
    {
      delay(0, 100);
      continue;
    }
    else if ( gUpdateProjList == 2 )
    {
      diIdx = manTable.getSelectedLines();
      if ( dynlen(diIdx) > 0 )
      {
        sProj = manTable.cellValueRC(diIdx[1], \"#1\");
        err = paGetProjAttr(sProj, \"proj_version\", sVar);
        if ( !err )
          manTable.cellValueRC(diIdx[1], \"#2\") = sVar;
      }
      gUpdateProjList = (gRefreshCycle>0)?-1:0;

      delay(0, 100);
      continue;
    }

    sBackCol = (manTable.enabled())?\"_Window\":\"_3DFace\";
    bChanged = false;

    dyn_string dsBadProjs;

    err = paGetProjs(ds, dsVer, dsPath, dsBadProjs);

    if ( err && !gGetProjsErrShown)
    {
      showInvalidProjects(dsBadProjs);
    }

    // filter projects - only show projects having version VERSION_NUMERIC
    for ( i = dynlen(ds); i > 0 ; i--)
    {
      if ( dsVer[i] == \"\" || paVersionStringToNumeric(dsVer[i]) < VERSION_NUMERIC || paVersionStringToNumeric(dsVer[i]) > VERSION_NUMERIC )
      {
        dynRemove(ds, i);
        dynRemove(dsVer, i);
        dynRemove(dsPath, i);
      }
    }

    //sorting projs
    dyn_dyn_anytype ddaTabTemp;
    dyn_string dsIndexTemp;

    for ( int i = 1; i <= dynlen(ds); i++ )
      dsIndexTemp[i] = strtoupper(ds[i]);

    if ( dynlen(dsIndexTemp) > 0 )
    {
      ddaTabTemp[1] = dsIndexTemp;
      ddaTabTemp[2] = ds;
      ddaTabTemp[3] = dsVer;
      ddaTabTemp[4] = dsPath;

      dynDynTurn(ddaTabTemp);
      dynDynSort(ddaTabTemp,1);
      dynDynTurn(ddaTabTemp);
      ds = ddaTabTemp[2];
      dsVer = ddaTabTemp[3];
      dsPath = ddaTabTemp[4];
    }
    dynRemove(gProjList, dynlen(gProjList));

    if ( ds != gProjList )
    {
      bChanged = true;
      gProjList = ds;
      gVersion = dsVer;
      gProjPath = dsPath;
      manTable.enabled = false;
      manTable.deleteAllLines;
    }
    else
      gVersion = dsVer;

    dyn_int di = manTable.getSelectedLines();
    int iSelected = (dynlen(di)>0)?di[1]:-1;

    // sorting projs
    dyn_dyn_anytype ddaTab;
    dyn_string dsIndex;

    for ( int i = 1; i <= dynlen(gProjList); i++ )
      dsIndex[i] = strtoupper(gProjList[i]);

    if ( dynlen(dsIndex) > 0 )
    {
      ddaTab[1] = dsIndex;
      ddaTab[2] = gProjList;
      ddaTab[3] = gVersion;
      dynDynTurn(ddaTab);
      dynDynSort(ddaTab,1);
      dynDynTurn(ddaTab);
      gProjList = ddaTab[2];
      gVersion = ddaTab[3];
    }

    // Show older Projects
    dynAppend(gProjList, getCatStr(\"pa\", \"showOlderProjects\"));
    dynAppend(gVersion, \"\");
    dynAppend(dsConsole, \"\");

    for ( i = 1; i <= dynlen(gProjList); i++ )
    {
      if ( !bChanged )  // true => all lines were removed
        manTable.cellBackColRC (i-1, \"#4\", \"_ETM\");

      bRuns = paIsPmonRunning(gProjList[i]);

      string sRunOrNot = (bRuns)?sR:sN;

      if ( gProjList[i] == getCatStr(\"pa\", \"showOlderProjects\") )
        sRunOrNot = \"\";

      if ( bChanged )
      {
        manTable.updateLine(1,\"#1\",gProjList[i],
                              \"#2\",gVersion[i],
                              \"#3\",sRunOrNot,
                              \"#5\",\"\");
      }
      else
      {
        manTable.cellValueRC(i-1, \"#3\", sRunOrNot);
        manTable.cellValueRC(i-1, \"#2\", gVersion[i]);
        manTable.cellValueRC(i-1, \"#5\", \"\");
      }

      if ( i - 1 == iSelected )
      {
        //cmdCopy.enabled = (!bRuns);
        //cmdDelete.enabled = (!bRuns);
        cmdOpen.enabled  = (gVersion[i] == VERSION && !bRuns);
        cmdStart.enabled = (gVersion[i] == VERSION && !bRuns);
        cmdStop.enabled  = (gVersion[i] == VERSION && bRuns);
      }

      diIdx = makeDynInt(i-1);

      if ( !bChanged )  // true => all lines were removed
        manTable.cellBackColRC (i-1, \"#4\", sBackCol);
    }

    //show older project entrie bold and italic
    manTable.cellFontRC(manTable.lineCount-1, \"#1\", \"Noto Sans,-1,12,5,75,1,0,0,0,0,Bold Italic\");

    manTable.enabled = true;
    if ( gUpdateProjList == 1 )
    {
      gUpdateProjList = (gRefreshCycle>0)?-1:0;
      delay(0, 100);

      if (_WIN32)
      {
        paResetProjectInformationList();
      }
    }
    if ( gNewProjName != \"\" )
    {
      int     iPos = dynContains(gProjList, gNewProjName);
      dyn_int di = manTable.getSelectedLines();

      if ( dynlen(di) < 1 && iPos > 0 )
      {
        manTable.selectLineN(iPos-1);
        i = pmon_selectProj(iPos-1, \"#1\", \"\");
      }
      gNewProjName = \"\";

    }
    for ( j = 1; j <= gRefreshCycle; j++ )
    {
      if ( gUpdateProjList == 1 )
      {
        break;
      }
      else
      {
        delay(1);
      }
    }
  }
}

" 0
 E E E E 1 -1 -1 0  70 70
""0  1
E "#uses \"CtrlPv2Admin\"
#uses \"pa.ctl\"
#uses \"pmon.ctl\"
#uses \"panel.ctl\"
#uses \"std.ctl\"

int      gUpdateProjList;
string   gNewProjName;
dyn_bool gButtonsEnabled;
int      gOldSelected;

string   gTcpHostName;
int      gTcpPortNumber;
int      gTcpFileDescriptor;
int      gTcpFileDescriptor2;
string   gTcpHostName;
string   gTcpFifo;
int      gRefreshCycle;

// column: NOT USED
// value: NOT USED
synchronized int pmon_selectProj(int row, string column, string value)
{
  if ( row < 0 )
    return 0;

  cmdCopy.enabled = true;
  cmdDelete.enabled = true;

  if ( manTable.cellValueRC(row,\"#1\") == getCatStr(\"pa\", \"showOlderProjects\") )
  {
    cmdEdit.enabled = false;
    cmdCopy.enabled = false;
    cmdDelete.enabled = false;
    cmdOpen.enabled = false;
    cmdStart.enabled = false;
    cmdStop.enabled = false;
    return 0;
  }


  int    iErr;
  bool   bAuth = false, bRun;
  string projName = manTable.cellValueRC(row, \"#1\"),
         projVers = manTable.cellValueRC(row, \"#2\"), otherProject,
         sConsole;

  cmdEdit.enabled = true;
  gOldSelected = row;

  cmdOpen.enabled = false;
  cmdStart.enabled = false;
  cmdStop.enabled = false;
  delay(0,10);

  if ( row < 0 )
    return(0);

  sConsole = manTable.cellValueRC(row, \"#5\");
  if ( !isModuleOpen(sConsole) )
  {
    sConsole = \"\";
    manTable.cellValueRC(row, \"#5\") = \"\";
  }

  if ( paVersionStringToNumeric(projVers) < VERSION_NUMERIC ) // !!! oder eher != ?
    iErr = 0;
  else
  {
    int err;
    dyn_string ds, dsVer, dsPath;

    paIsProjRunning(projName, otherProject, bRun, gTcpUserName, gTcpPassword);
    err = paGetProjs(ds, dsVer, dsPath);
    if (dynContains(ds, projName)<=0)
    {
      gUpdateProjList = 1;
      return 0;
    }

    if ( otherProject )
    {
      pmon_warningOutput(\"errOtherProject\", iErr);
      return(1);
    }
    else
    {
      paVerifyPassword(projName, \"\", \"\", iErr);
    }
  }

  if ( iErr == -99 )
  {
    //manTable.deleteSelection();
    //gOldSelected = -1;
    pmon_warningOutput(\"errMissingProgs2\", iErr);
    return(1);
  }
  if ( iErr == 1 )
  {
    //manTable.deleteSelection();
    //gOldSelected = -1;
    throwError(makeError(\"\", PRIO_SEVERE, ERR_PARAM, 0, \"Syntax error in config file!\"));
    pmon_warningOutput(\"syntaxErrorInConfigFile\", iErr);
    return(1);
  }

  bAuth = (iErr == 0);

  if ( !bAuth )
  {
    dyn_anytype daResult;
    string      sUser, sPwd;
    int         x, y;

    getChildPanelCentralPosition(\"projAdmin/project_admin_pwd.pnl\", x, y);
    gParams[1]  = myModuleName();
    gParams[3]  = myPanelName();
    gParams[5]  = x;
    gParams[6]  = y;
    gParams[2]  = \"projAdmin/project_admin_pwd.pnl\";
    gParams[4]  = getCatStr(\"pmon\",\"inputPwd\");
    gParams[9]  = makeDynString(projName, sUser, sPwd);
    childPanel(gParams, daResult);

    if ( dynlen(daResult) > 0 && daResult[1] == 1 )
    {
      sUser = daResult[2];
      sPwd = daResult[3];
    }
    else
    {
      sUser = \"\";
      sPwd = \"\";
    }
    paVerifyPassword(projName, sUser, sPwd, iErr);

    bAuth = (iErr == 0);
    if ( !bAuth )//&& dynlen(daResult) > 0 && daResult[1] == 1 )
    {
      // IM 111041
      //manTable.deleteSelection();
      //gOldSelected = -1;
      pmon_warningOutput(\"errVerifyPwd\", iErr);
    }
    else
    {
      gTcpUserName = sUser;
      gTcpPassword = sPwd;
    }
  }
  else
  {
    gTcpUserName = \"\";
    gTcpPassword = \"\";
  }

  //cmdCopy.enabled = (bAuth && !bRun);
  //cmdDelete.enabled = (!bRun);
  cmdEdit.enabled = (bAuth);// && !bRun);

  cmdOpen.enabled  = (bAuth && projVers == VERSION && (!bRun || sConsole == \"\"));
  cmdStart.enabled = (bAuth && projVers == VERSION && !bRun);
  cmdStop.enabled  = (bAuth && projVers == VERSION && bRun);
  return(1);
}

//-----------------------------------------------------------------------------
pmon_new()
{
  dyn_int     sel;
  bool        err;
  string      str;
  dyn_anytype daResult;
  int         x, y;

  getChildPanelCentralPosition(\"projAdmin/project_admin_new.pnl\", x, y);
  gParams[1]  = myModuleName();
  gParams[3]  = myPanelName();
  gParams[5]  = x;
  gParams[6]  = y;
  gParams[2]  = \"projAdmin/project_admin_new.pnl\";
  gParams[4]  = cmdNew.toolTipText;
  gParams[9]  = makeDynString();
  childPanel(gParams, daResult);

  if ( dynlen(daResult) > 0 && daResult[1] != 0 )
  {
    if ( gUpdateProjList != -1 )
    {
      gNewProjName = (dynlen(daResult)>1)?daResult[2]:\"\";
    }
    gUpdateProjList = 1;
  }
  else if ( dynlen(daResult) > 0 )
    gUpdateProjList = 1;
}
//-----------------------------------------------------------------------------
pmon_register()
{
  dyn_int sel;
  bool err;
  string str;
  dyn_anytype daResult;
  int         x, y;

  sel = manTable.getSelectedLines();

  getChildPanelCentralPosition(\"projAdmin/project_admin_register.pnl\", x, y);
  gParams[1]  = myModuleName();
  gParams[3]  = myPanelName();
  gParams[5]  = x;
  gParams[6]  = y;
  gParams[2]  = \"projAdmin/project_admin_register.pnl\";
  gParams[4]  = cmdImport.toolTipText;
  gParams[9]  = makeDynString();
  childPanel(gParams, daResult);
  if ( dynlen(daResult) > 0 && daResult[1] != 0 )
  {
    //if ( gUpdateProjList != -1 )
      gUpdateProjList = 1;
  }
}
//-----------------------------------------------------------------------------
pmon_copy()
{
  dyn_int     sel;
  bool        err, bRuns;
  string      str, sProj = \"\", sVer, otherProject;
  dyn_anytype daResult;
  int         x, y, iErr;

  sel = manTable.getSelectedLines();


  if ( dynlen(sel) > 0 )
  {
    sProj = manTable.cellValueRC(sel[1],\"#1\");
    //paIsProjRunning(sProj, otherProject, bRuns, gTcpUserName, gTcpPassword);
    bRuns = paIsPmonRunning(sProj);
    if ( bRuns )
    {
      pmon_warningOutput(\"errNoCopyProjRuns\", -1, sProj);
      sProj = \"\";
      return; // IM 109279
    }
  }

  getChildPanelCentralPosition(\"projAdmin/project_admin_copy.pnl\", x, y);
  gParams[1]  = myModuleName();
  gParams[3]  = myPanelName();
  gParams[5]  = x;
  gParams[6]  = y;
  gParams[2]  = \"projAdmin/project_admin_copy.pnl\";
  gParams[4]  = cmdCopy.toolTipText;
  gParams[9]  = makeDynString(sProj);
  childPanel(gParams, daResult);
  if ( dynlen(daResult) > 0 && daResult[1] == 1 )
  {
    //if ( gUpdateProjList != -1 )
      gUpdateProjList = 1;
  }
}
//-----------------------------------------------------------------------------
pmon_delete()
{
  int         x, y, i, iErr, iPos;
  bool        err, bRuns;
  string      str, sProj, otherProject;
  dyn_int     sel;
  dyn_string  ds, projs, subprojs, versions, pathes;
  dyn_anytype daResult;

  dyn_string invalidSubProjs;
  sel = manTable.getSelectedLines();

  if ( dynlen(sel) > 0 )
  {
    sProj = manTable.cellValueRC(sel[1],\"#1\");
//    paIsProjRunning(sProj, otherProject, bRuns, gTcpUserName, gTcpPassword);
//    bRuns = paIsPmonRunning(sProj);
    iErr = paGetProjs(projs, versions, pathes);

    for ( i = 1; i <= dynlen(projs); i++ )
    {
      if ( !paIsValidProj(projs[i]) || (sProj != projs[i]) ) continue;
      iErr = paGetSubProjs(projs[i], ds, invalidSubProjs);
      int error = pmon_checkSubProjects(ds, invalidSubProjs);
      if ( !iErr )
        iErr = error;

      if ( iErr && dynlen(invalidSubProjs) )
        pmon_warningMessageList(getCatStr(\"pmon\", \"errorGetSubProjs\"), invalidSubProjs);
      else if ( iErr )
        pmon_warningOutput(\"errorGetSubProjs\", iErr, projs[i]);

      if ( dynContains(ds, sProj) )
      {
        pmon_warningOutput(\"errCannotDeleteProject\", iErr, projs[i]);
        return;
      }
    }
  }
  else
    sProj = \"\";

  getChildPanelCentralPosition(\"projAdmin/project_admin_delete.pnl\", x, y);
  gParams[1]  = myModuleName();
  gParams[3]  = myPanelName();
  gParams[2]  = getCatStr(\"pmon\",\"delProj\");
  gParams[5]  = x;
  gParams[6]  = y;
  gParams[2]  = \"projAdmin/project_admin_delete.pnl\";
  gParams[4]  = cmdDelete.toolTipText;
  gParams[9]  = makeDynString(sProj, \"$checkSubProjsDone:\");
  childPanel(gParams, daResult);
  if ( dynlen(daResult) > 0 && daResult[1] != 0 )
  {
    //if ( gUpdateProjList != -1 )
      gUpdateProjList = 1;
    //cmdCopy.enabled = false;
    cmdEdit.enabled = false;
    cmdOpen.enabled = false;
    cmdStart.enabled = false;
    cmdStop.enabled = false;
  }
}
//-----------------------------------------------------------------------------
pmon_edit()
{
  dyn_int     sel;
  bool        err, bRun, otherProject;
  string      projName, str, projVers;
  dyn_anytype daResult;
  int         x, y, iErr;

  sel = manTable.getSelectedLines();

  if ( dynlen(sel) < 1 )
  {
    pmon_warningOutput(\"errNoProjSelected\", -1);
    return;
  }

  projName = manTable.cellValueRC(sel[1],\"#1\");
  getChildPanelCentralPosition(\"projAdmin/project_admin_edit.pnl\", x, y);
  gParams[1]  = myModuleName();
  gParams[3]  = myPanelName();
  gParams[5]  = x;
  gParams[6]  = y;
  gParams[2]  = \"projAdmin/project_admin_edit.pnl\";
  gParams[4]  = cmdEdit.toolTipText;
  gParams[9]  = makeDynString(manTable.cellValueRC(sel[1],\"#1\"),
                              \"$version:\"+manTable.cellValueRC(sel[1],\"#2\"));
  childPanel(gParams, daResult);
  if ( dynlen(daResult) > 0 /*&& gUpdateProjList != -1*/ )
  {
    x = daResult[1];
    if ( x == 2 )
      gUpdateProjList = x;
    else
      gUpdateProjList = 1;
  }

  iErr = paGetProjAttr(projName, \"proj_version\", projVers);
  if ( iErr != 0 || projVers != VERSION )
  {
    iErr = -1;
  }
  else
  {
    paIsProjRunning(projName, otherProject, bRun, gTcpUserName, gTcpPassword);
    if ( otherProject )
    {
      pmon_warningOutput(\"errOtherProject\", iErr);
      return;
    }
  }
  if ( iErr != 0 )
  {
    //manTable.deleteSelection();
    //gOldSelected = -1;
    pmon_warningOutput(\"errVersion\", iErr);
    return;
  }



}
//-----------------------------------------------------------------------------
pmon_open()
{
  dyn_int     sel;
  bool        err, isRun;
  string      sProj, sVision, sPmon, sConfig, sAttr, sVal, sVer,
              sPvssPath, consoleName, otherProject;
  dyn_anytype daResult;
  int         x, y, iErr;
  dyn_int     di;

  sel = manTable.getSelectedLines();

  if ( dynlen(sel) == 0 )
  {
    pmon_warningOutput(\"errNoProjSelected\", -1);
    return;
  }

  sProj = manTable.cellValueRC(sel[1], \"#1\");
  iErr = paGetProjAttr(sProj, \"proj_version\", sVer);
  if ( iErr )
  {
    pmon_warningOutput(\"errorGetProjAttr\", -1);
    return;
  }

  if ( paVersionStringToNumeric(sVer) < VERSION_NUMERIC ) // !!! oder eher != ?
  {
    pmon_warningOutput(\"Wrong version\", -1, sProj);
    return;
  }

  if ( !paGetProjRunnable(sProj) )
  {
    pmon_warningOutput(\"errNotRunnable\", -1, sProj);
    return;
  }

  pmonCreateConsoleName(consoleName);
  di=getPanelSize(\"projAdmin/console.pnl\");
  gModuleParams[1]  = consoleName;
  gModuleParams[4]  = -1;
  gModuleParams[5]  = di[2];
  gModuleParams[9]  = \"projAdmin/console.pnl\";
  gModuleParams[10] = \"\";
  gModuleParams[11] = makeDynString(sProj,\"false\");
  //                                                  autostart, console
  iErr = pmonStartProject( err, sProj, gModuleParams, false,     true,
  //                                                   logviewer
                           gTcpUserName, gTcpPassword, true );
  if ( !err )
  {
    manTable.cellValueRC(sel[1], \"#3\", getCatStr(\"pmon\",\"Running\"));
    manTable.cellValueRC(sel[1], \"#5\", consoleName);
    //cmdCopy.enabled = false;
    //cmdDelete.enabled = false;
    //cmdEdit.enabled = false;

    //cmdOpen.enabled = false;
    cmdStart.enabled = false;
    cmdStop.enabled = true;
  }
  else
  {
    pmon_warningOutput(\"errorOpen\", -1, sProj);
    return;
  }
}
//-----------------------------------------------------------------------------
pmon_start()
{
  dyn_int     sel;
  bool        err, isRun;
  string      sProj, sVision, sPmon, sConfig, sAttr, sVal, sVer,
              sPvssPath, otherProject, consoleName;
  dyn_anytype daResult;
  int         x, y, iErr;
  dyn_int     di;

  sel = manTable.getSelectedLines();

  if ( dynlen(sel) == 0 )
  {
    pmon_warningOutput(\"errNoProjSelected\", -1);
    return;
  }

  sProj = manTable.cellValueRC(sel[1], \"#1\");
  iErr = paGetProjAttr(sProj, \"proj_version\", sVer);
  if ( iErr )
  {
    pmon_warningOutput(\"errorGetProjAttr\", -1);
    return;
  }

  if ( paVersionStringToNumeric(sVer) < VERSION_NUMERIC ) // !!! oder eher != ?
  {
    pmon_warningOutput(\"Wrong version\", -1, sProj);
    return;
  }

  if ( !paGetProjRunnable(sProj) )
  {
    pmon_warningOutput(\"errNotRunnable\", -1, sProj);
    return;
  }

  //                                                 autostart, console
  iErr = pmonStartProject(err, sProj, gModuleParams, true,      true,
  //                                                  logviewer
                          gTcpUserName, gTcpPassword, true );
  if ( !err )
  {
    pmonCreateConsoleName(consoleName);
    manTable.cellValueRC(sel[1], \"#3\", getCatStr(\"pmon\",\"Running\"));
    manTable.cellValueRC(sel[1], \"#5\", consoleName);
    //cmdCopy.enabled = false;
    //cmdDelete.enabled = false;
    //cmdEdit.enabled = false;

    //cmdOpen.enabled = false;
    cmdStart.enabled = false;
    cmdStop.enabled = true;
  }
  else
  {
    pmon_warningOutput(\"errorStart\", -1, sProj);
    return;
  }
}
//-----------------------------------------------------------------------------
pmon_stop()
{
  dyn_int     sel;
  bool        err, bRuns;
  string      sProj, sVer, otherProject;
  dyn_anytype daResult;
  int         x, y, iErr;

  sel = manTable.getSelectedLines();

  if ( dynlen(sel) == 0 )
  {
    pmon_warningOutput(\"errNoProjSelected\", -1);
    return;
  }

  sProj = manTable.cellValueRC(sel[1], \"#1\");
  iErr = paGetProjAttr(sProj, \"proj_version\", sVer);
  if ( iErr )
  {
    pmon_warningOutput(\"errorGetProjAttr\", -1);
    return;
  }

  if ( paVersionStringToNumeric(sVer) < VERSION_NUMERIC ) // !!! oder eher != ?
  {
    pmon_warningOutput(\"Wrong version\", -1, sProj);
    return;
  }

  bRuns = paIsPmonRunning(sProj);
  if ( !bRuns )
  {
    pmon_warningOutput(\"errNoStopProjNoRuns\", -1, sProj);
    return;
  }

  // safety
  getChildPanelCentralPosition(\"vision/MessageWarning2\", x, y);
  gParams[1]  = myModuleName();
  gParams[3]  = myPanelName();
  gParams[5]  = x;
  gParams[6]  = y;
  gParams[2]  = \"vision/MessageWarning2\";
  gParams[4]  = getCatStr(\"general\", \"warning\");
  gParams[9]  = makeDynString(getCatStr(\"pmon\", \"sureStopProj\"),
                              getCatStr(\"general\", \"yes\"),
                              getCatStr(\"general\", \"no\"));
  childPanel(gParams, daResult);

  if ( daResult[1] == 0 ) return;

  iErr = pmonStopProject( err, sProj, false );
  if ( !err )
  {
    manTable.cellValueRC(sel[1], \"#3\") = getCatStr(\"pmon\",\"Not running\");
    manTable.deleteSelection();
    gOldSelected = -1;
    //cmdCopy.enabled = true;
    //cmdDelete.enabled = false;
    cmdEdit.enabled = true;

    cmdOpen.enabled = true;
    cmdStart.enabled = true;
    cmdStop.enabled = false;
  }
}
//-----------------------------------------------------------------------------
pmon_refresh()
{
  int        answer;
  dyn_string popup;

  string s1  = ((gRefreshCycle==0)  ?\">  \":\"·   \") + getCatStr(\"pmon\",\"refresh\") + \", 1, 1\";
  string s2  = ((gRefreshCycle==2)  ?\">  \":\"·   \") + \"  2 \" + getCatStr(\"pmon\", \"second\") + \", 2,  1\";
  string s3  = ((gRefreshCycle==5)  ?\">  \":\"·   \") + \"  5 \" + getCatStr(\"pmon\", \"second\") + \", 3,  1\";
  string s4  = ((gRefreshCycle==10) ?\">  \":\"·   \") + \"10 \" + getCatStr(\"pmon\", \"second\") + \", 4,  1\";

  s1  = \"PUSH_BUTTON, \" + s1;
  s2  = \"PUSH_BUTTON, \" + s2;
  s3  = \"PUSH_BUTTON, \" + s3;
  s4  = \"PUSH_BUTTON, \" + s4;

 popup=makeDynString(\"PUSH_BUTTON, \" + getCatStr(\"pmon\",\"refreshHead\")    + \", 99,  0\",
                      \"SEPARATOR\",
                      s1,
                      \"SEPARATOR\",
                      s2,
                      s3,
                      s4);

  popupMenu(popup, answer);

  switch (answer)
  {
    case 1 : gRefreshCycle = 0;  break;
    case 2 : gRefreshCycle = 2;  break;
    case 3 : gRefreshCycle = 5;  break;
    case 4 : gRefreshCycle = 10;  break;
  }
  gUpdateProjList = (gRefreshCycle>0)?-1:1;
}
//-----------------------------------------------------------------------------
pmon_pvr()
{
  string sProj, sPfad;
  dyn_anytype daResult;
  int x, y;
  dyn_int diSel;

  diSel = manTable.getSelectedLines();

  if ( dynlen(diSel) == 0 )
  {
    pmon_warningOutput(\"errNoProjSelected\", -1);
    return;
  }

  sProj = manTable.cellValueRC(diSel[1], \"#1\");

  paProjName2InstallDir(sProj, sPfad);

  getChildPanelCentralPosition(\"projAdmin/pvr/pvr.pnl\", x, y);
  gParams[1]  = myModuleName();
  gParams[3]  = myPanelName();
  gParams[5]  = x;
  gParams[6]  = y;
  gParams[2]  = \"projAdmin/pvr/pvr.pnl\";
  gParams[4]  = getCatStr(\"pvr\", \"PVR\");
  gParams[9]  = makeDynString(\"$ProjPath:\" + sPfad,
                              \"$Proj:\" + sProj);
  childPanel(gParams, daResult);

}

//---------------------------------------------------------------
// take list of projects from registry and insert them into configuration file
// IM 112168 WOKL 7.8.13

pmon_copyOldProjs( bool onInit = false )
{
  int err;
  dyn_string oldProjsList, versList, pathList, newProjsList;
  dyn_mapping attribList;
  string value;
  bool shouldReturn = false;

  dyn_string projAttrs = makeDynString(// \"InstallationDate\",
                                       // \"InstallationDir\",
                                       // \"InstallationUser\",
                                       // \"InstallationVersion\",
                                       \"notRunnable\",
                                       // \"proj_path\",
                                       // \"PVSS_II\",    // obsolete?
                                       // \"pvss_path\",  // obsolete?
                                       // \"RemoteInstallable\",
                                       \"remoteHost\",
                                       \"pmonPort\");

  if (onInit == true)
  {
    err = paGetProjAttr(\"3.12\", \"firstPAStart\", value);

    if (err != 0 || value == \"1\")
      paSetProjAttr(\"3.12\", \"firstPAStart\", 0);
    else
      shouldReturn = true;
  }

  if (shouldReturn == false)  // message on first init and on button click
  {
    int          x, y;
    dyn_anytype  daResult;

    getChildPanelCentralPosition(\"vision/MessageWarning2\", x, y);
    gParams[1]  = myModuleName();
    gParams[2]  = \"vision/MessageWarning2\";
    gParams[3]  = myPanelName();
    gParams[4]  = \"\";
    gParams[5]  = x;
    gParams[6]  = y;
    gParams[9]  = makeDynString(getCatStr(\"pmon\", \"infoProjFromRegistry\"),
                                getCatStr(\"para\", \"yes\"),
                                getCatStr(\"para\", \"no\"));
    childPanel(gParams, daResult);

    if ( dynlen(daResult) > 0 && daResult[1] != 0 )
      shouldReturn = false;
    else
      return;
  }

  if (shouldReturn == true)
    return;

  // fetch list of new projects, remember old/new
  err = paGetProjs(newProjsList, versList, pathList);

  // switch to registry
  paUseRegistryFile( false );
  // fetch list of old projects
  dynClear(versList);
  dynClear(pathList);
  err = paGetProjs(oldProjsList, versList, pathList);

  // reduce list of old projects with the new projects to avoid overwriting one
  for (int i = 1; i <= dynlen(newProjsList); i++)
  {
    int x;
    if ((x = dynContains(oldProjsList, newProjsList[i])) > 0)
    {
      dynRemove(oldProjsList, x);
      dynRemove(versList, x);
      dynRemove(pathList, x);
    }
  }

  // fetch attributes for projects list
  for (int i = 1; i <= dynlen(oldProjsList); i++)
  {
    for (int j = 1; j <= dynlen(projAttrs); j++)
    {
      string projAttr;
      paGetProjAttr(oldProjsList[i], projAttrs[j], projAttr);
      attribList[i][projAttrs[j]] = projAttr;
    }
  }

  // re-switch to configuration file
  paUseRegistryFile( true );
  // enter projects into configuration file
  for (int i = 1; i <= dynlen(oldProjsList); i++)
  {
    int rc;
    strreplace(pathList[i], \"\\\\\" + oldProjsList[i], \"\");

    rc = paRegProj(oldProjsList[i], pathList[i], attribList[i][\"remoteHost\"], attribList[i][\"pmonPort\"], attribList[i][\"notRunnable\"], false);
    if (rc != 0)
    {
      dyn_errClass err = getLastError();

      if ( dynlen(err) )
        errorDialog(err);
    }
  }
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

void openOldProjectsAdmin(int row = -1)
{
  if ( row == -1 || manTable.cellValueRC(row,\"#1\") == getCatStr(\"pa\", \"showOlderProjects\") )
  {
    dyn_int     sel;
    bool        err;
    string      str;
    dyn_anytype daResult;
    int         x, y;

    if ( !paIsRunAsAdmin() && paIsUserInAdminGroup() )
    {
      if ( paProcessElevate(WINCCOA_BIN_PATH+\"WCCOAui.exe -n -m vision:\\\"WinCC OA Project Administration \"+VERSION+\"\\\" -p projAdmin/project_admin.pnl,$MODE:1 -menuBar -iconBar -centered -log +file -proj \"+VERSION) )
      {
        PanelOff();
        return;
      }
    }

    string sTitle = getCatStr(\"pa\", \"olderProjectsAdminstrator\");
    strreplace(sTitle, \"x\", VERSION);

    getChildPanelCentralPosition(\"projAdmin/project_admin_olderProjects.pnl\", x, y);
    gParams[1]  = myModuleName();
    gParams[3]  = myPanelName();
    gParams[5]  = x;
    gParams[6]  = y;
    gParams[2]  = \"projAdmin/project_admin_olderProjects.pnl\";
    gParams[4]  = sTitle;
    gParams[9]  = makeDynString();
    childPanel(gParams, daResult);
    gUpdateProjList = 1;
  }
}








" 0
 6
"CBRef" "1"
"EClose" E
"windowIcon" "StandardIcons/Proj_admin_48.png"
"dpi" "96.1514"
"pdpi" "96"
"restoreModuleSize" ""
2 0 0
""
NC
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
4
LANG:10001 6 Layer1
LANG:10004 6 Layer1
LANG:10000 6 Layer1
LANG:10027 6 Layer1
25 3
"manTable"
""
1 9 46.99999999999999 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 "main(int row, string column)
{
  int         iPos = -1, iSel = 0, answer, col, len = this.lineCount(),
              x, y, i;
  bool        bSel = false;
  string      sVersion, sProj, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
  dyn_int     di;
  dyn_string  popup;
  dyn_anytype daResult;
  
  if ( manTable.cellValueRC(row,\"#1\") == getCatStr(\"pa\", \"showOlderProjects\") )
  {
    cmdEdit.enabled = false;
    cmdCopy.enabled = false;
    cmdDelete.enabled = false;
    cmdOpen.enabled = false;
    cmdStart.enabled = false;
    cmdStop.enabled = false;
    return;
  }
  
  getValue(\"\", \"currentCell\", row, col);

  manTable.selectLineN(row);

  i = pmon_selectProj(row, col, \"\");

  s1  = \"PUSH_BUTTON, \" + getCatStr(\"pa\", \"projInfo\") + \", 1, \"; s1 += (row>=0)?\"1\":\"0\";
  s2  = \"PUSH_BUTTON, \" + cmdNew.toolTipText + \", 2, \"; s2 += (cmdNew.enabled)?\"1\":\"0\";
  s3  = \"PUSH_BUTTON, \" + cmdImport.toolTipText + \", 3, \"; s3 += (cmdImport.enabled)?\"1\":\"0\";
  s4  = \"PUSH_BUTTON, \" + cmdCopy.toolTipText + \", 4, \"; s4 += (cmdCopy.enabled)?\"1\":\"0\";
  s5  = \"PUSH_BUTTON, \" + cmdDelete.toolTipText + \", 5, \"; s5 += (cmdDelete.enabled)?\"1\":\"0\";
  s6  = \"PUSH_BUTTON, \" + cmdEdit.toolTipText + \", 6, \"; s6 += (cmdEdit.enabled)?\"1\":\"0\";
  s7  = \"PUSH_BUTTON, \" + cmdOpen.toolTipText + \", 7, \"; s7 += (cmdOpen.enabled)?\"1\":\"0\";
  s8  = \"PUSH_BUTTON, \" + cmdStart.toolTipText + \", 8, \"; s8 += (cmdStart.enabled)?\"1\":\"0\";
  s9  = \"PUSH_BUTTON, \" + cmdStop.toolTipText + \", 9, \"; s9 += (cmdStop.enabled)?\"1\":\"0\";
  s10 = \"PUSH_BUTTON, \" + getCatStr(\"pvr\", \"PVR\") + \", 10, 1\";

  popup=makeDynString(s1,
                      \"SEPARATOR\",
                      s2,
                      s3,
                      \"SEPARATOR\",
                      s4,
                      s5,
                      s6,
                      \"SEPARATOR\",
                      s7,
                      s8,
                      s9,
                      \"SEPARATOR\",
                      s10
                     );

  popupMenu(popup, answer);

  switch (answer)
  {
    case 1:
      sProj = manTable.cellValueRC(row,\"#1\");    
      getChildPanelCentralPosition(\"projAdmin/project_admin_delete.pnl\", x, y);
      gParams[1]  = myModuleName();
      gParams[3]  = myPanelName();
      gParams[2]  = getCatStr(\"pmon\",\"infoProj\");
      gParams[5]  = x;
      gParams[6]  = y;
      gParams[2]  = \"projAdmin/project_admin_delete.pnl\";
      gParams[4]  = getCatStr(\"pmon\",\"projInfo\");
      gParams[9]  = makeDynString(sProj, \"$info:1\");
      childPanel(gParams, daResult);
      break;
    case 2:
      pmon_new();
      break;
    case 3:
      pmon_register();
      break;
    case 4:
      pmon_copy();
      break;
    case 5:
      pmon_delete();
      break;
    case 6:
      pmon_edit();
      break;
    case 7:
      pmon_open();
      break;
    case 8:
      pmon_start();
      break;
    case 9:
      pmon_stop();
      break;
    case 10:
      pmon_pvr();
      break;
  }
}
" 0
 "main(int row, string column)
{
  openOldProjectsAdmin(row);
}" 0

1 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"sizePolicy" "Expanding MinimumExpanding"
"layoutAlignment" "AlignNone"
"selectionChangedCB" "main()
{
  // IM 111041 - removed synchronized (caused ui crash on language change)
//   int row, idx;
//   string value, column;
//   
//   getValue(\"\", \"currentCell\", row, idx);
//   getValue(\"\", \"columnToName\", idx, column);
//   getValue(\"\", \"cellValue\", value);
// 
//   if ( iThreadId != -1 )
//     return;
//   
//   int i = pmon_selectProj(row, column, value);
}









"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 38 Noto Sans,-1,12,5,50,0,0,0,0,0,Regular
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  10.83783783783784 48.67567567567568 583.7567567567609 413.4864864864725
"main()
{
  this.alternatingRowColors(makeDynString(\"_Window\",\"_WindowAlternate\"));
  this.columnStretchable(1, true);
}" 0
"main(int row, string column, string value)
{
  pmon_selectProj(row, column, value);
}" 0
 1 0 1 5 19 "#4" 0 1 0 "s" 4
LANG:10001 8 Query...
LANG:10004 9 查询...
LANG:10000 10 Abfrage...
LANG:10027 13 Опрос...
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

5 "#1" 30 1 0 "s" 4
LANG:10001 12 Project name
LANG:10004 9 项目名
LANG:10000 11 Projektname
LANG:10027 21 Имя проекта
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

346 "#2" 8 1 0 "s" 4
LANG:10001 7 Version
LANG:10004 6 版本
LANG:10000 7 Version
LANG:10027 12 Версия
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

100 "#3" 8 1 0 "s" 4
LANG:10001 11 Pmon Status
LANG:10004 10 Pmon状态
LANG:10000 11 Pmon Status
LANG:10027 4 Pmon
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

100 "#5" 10 0 0 "s" 4
LANG:10001 11 consoleName
LANG:10004 12 控制台名
LANG:10000 11 Pmon Status
LANG:10027 4 Pmon
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

120 
18 18 "" 1 4
LANG:10001 2 #1
LANG:10004 2 #1
LANG:10000 2 #1
LANG:10027 2 #1
"" 1 4
LANG:10001 2 #2
LANG:10004 2 #2
LANG:10000 2 #2
LANG:10027 2 #2
"" 1 4
LANG:10001 2 #3
LANG:10004 2 #3
LANG:10000 2 #3
LANG:10027 2 #3
"" 1 4
LANG:10001 2 #4
LANG:10004 2 #4
LANG:10000 2 #4
LANG:10027 2 #4
"" 1 4
LANG:10001 2 #5
LANG:10004 2 #5
LANG:10000 2 #5
LANG:10027 2 #5
"" 1 4
LANG:10001 2 #6
LANG:10004 2 #6
LANG:10000 2 #6
LANG:10027 2 #6
"" 1 4
LANG:10001 2 #7
LANG:10004 2 #7
LANG:10000 2 #7
LANG:10027 2 #7
"" 1 4
LANG:10001 2 #8
LANG:10004 2 #8
LANG:10000 2 #8
LANG:10027 2 #8
"" 1 4
LANG:10001 2 #9
LANG:10004 2 #9
LANG:10000 2 #9
LANG:10027 2 #9
"" 1 4
LANG:10001 3 #10
LANG:10004 3 #10
LANG:10000 3 #10
LANG:10027 3 #10
"" 1 4
LANG:10001 3 #11
LANG:10004 3 #11
LANG:10000 3 #11
LANG:10027 3 #11
"" 1 4
LANG:10001 3 #12
LANG:10004 3 #12
LANG:10000 3 #12
LANG:10027 3 #12
"" 1 4
LANG:10001 3 #13
LANG:10004 3 #13
LANG:10000 3 #13
LANG:10027 3 #13
"" 1 4
LANG:10001 3 #14
LANG:10004 3 #14
LANG:10000 3 #14
LANG:10027 3 #14
"" 1 4
LANG:10001 3 #15
LANG:10004 3 #15
LANG:10000 3 #15
LANG:10027 3 #15
"" 1 4
LANG:10001 3 #16
LANG:10004 3 #16
LANG:10000 3 #16
LANG:10027 3 #16
"" 1 4
LANG:10001 3 #17
LANG:10004 3 #17
LANG:10000 3 #17
LANG:10027 3 #17
"" 1 4
LANG:10001 3 #18
LANG:10004 3 #18
LANG:10000 3 #18
LANG:10027 3 #18
"" 1 4
LANG:10001 3 #19
LANG:10004 3 #19
LANG:10000 3 #19
LANG:10027 3 #19
10 30
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 38 Noto Sans,-1,12,5,50,0,0,0,0,0,Regular
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 0 1 0 0 7
1 0
13 18
"cmdNew"
""
1 54.99999999999999 9 E E E 1 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
2 1 0 0 78 0
E E E
1
4
LANG:10001 20 New project [Ctrl+N]
LANG:10004 19 新项目[Ctrl + N]
LANG:10000 30 Neues Projekt anlegen [Strg+N]
LANG:10027 32 Новый проект [Ctrl+N]

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  56.10810810810811 10.83783783783784 93.21621621621567 41.86486486486531

P 
4294967295
"pictures/StandardIcons/new.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()
{
  pmon_new();
}

" 0
 E E E
13 19
"cmdImport"
""
1 87.00000000000004 9 E E E 1 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
3 1 0 0 82 0
E E E
1
4
LANG:10001 29 Register new project [Ctrl+R]
LANG:10004 25 注册新项目[Ctrl + R]
LANG:10000 35 Neues Projekt registrieren [Strg+R]
LANG:10027 65 Зарегистрировать новый проект [Ctrl+R]

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  89.89189189189189 10.83783783783784 126.9999999999996 41.86486486486531

P 
4294967295
"pictures/projAdmin/register_proj.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()
{
  pmon_register();
}

" 0
 E E E
13 20
"cmdCopy"
""
1 119 9 E E E 1 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
4 1 0 0 67 0
E E E
1
4
LANG:10001 21 Copy project [Ctrl+C]
LANG:10004 22 复制项目[Ctrl + C]
LANG:10000 25 Projekt kopieren [Strg+C]
LANG:10027 42 Копировать проект [Ctrl+C]

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  123.6756756756757 10.83783783783784 160.7837837837832 41.86486486486531

P 
4294967295
"pictures/StandardIcons/copy.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()

{

  pmon_copy();

}" 0
 E E E
13 23
"cmdDelete"
""
1 151 9 E E E 1 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
5 1 0 0 88 0
E E E
1
4
LANG:10001 23 Delete project [Ctrl+X]
LANG:10004 22 删除项目[Ctrl + X]
LANG:10000 25 Projekt löschen [Strg+X]
LANG:10027 36 Удалить проект [Ctrl+X]

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  157.4594594594595 10.83783783783784 194.567567567567 41.86486486486531

P 
4294967295
"pictures/StandardIcons/trash.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()
{
  pmon_delete();
}


" 0
 E E E
13 27
"cmdEdit"
""
1 183 9 E E E 0 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
6 1 0 0 69 0
E E E
1
4
LANG:10001 35 Change project properties  [Ctrl+E]
LANG:10004 35 Change project properties  [Ctrl+E]
LANG:10000 37 Projekteigenschaften ändern [Strg+E]
LANG:10027 58 Изменить свойства проекта  [Ctrl+E]

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  191.2432432432432 10.83783783783784 228.3513513513509 41.86486486486531

P 
4294967295
"pictures/StandardIcons/config_params.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()

{

  pmon_edit();

}" 0
 E E E
13 29
"cmdOpen"
""
1 229 7.958333216456547 E E E 0 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
7 1 0 0 79 0
E E E
1
4
LANG:10001 43 Open project console & start pmon  [Ctrl+O]
LANG:10004 43 Open project console & start pmon  [Ctrl+O]
LANG:10000 47 Projekt-Console öffnen & pmon starten [Strg+O]
LANG:10027 64 Окрыть консоль и запустить pmon  [Ctrl+O]

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  236.5135135135135 10.83783783783784 273.6216216216211 41.86486486486531

P 
4294967295
"pictures/StandardIcons/Console.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()

{

  pmon_open();

}" 0
 E E E
13 24
"cmdStart"
""
1 261 7.958333216456547 E E E 0 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
8 0 0 0 0 0
E E E
1
4
LANG:10001 13 Start project
LANG:10004 12 开始项目
LANG:10000 15 Projekt starten
LANG:10027 31 Запустить проект

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  270.2972972972973 10.83783783783784 307.405405405405 41.86486486486531

P 
4294967295
"pictures/projAdmin/start_proj.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()

{

  pmon_start();

}" 0
 E E E
13 25
"cmdStop"
""
1 292.9999999999998 7.958333216456547 E E E 0 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
9 0 0 0 0 0
E E E
1
4
LANG:10001 12 Stop project
LANG:10004 12 停止项目
LANG:10000 15 Projekt beenden
LANG:10027 33 Остановить проект

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  304.0810810810811 10.83783783783784 341.1891891891887 41.86486486486531

P 
4294967295
"pictures/projAdmin/stop_proj.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()

{

  pmon_stop();

}" 0
 E E E
13 33
"cmdRefresh"
""
1 334.9999509753545 9 E E E 1 E 1 E N "_ButtonText" E N "_3DFace" E E
 "main()

{

  pmon_refresh();

}" 0
 E
10 0 0 0 116 0
E E E
1
4
LANG:10001 31 Refresh project stati once [F5]
LANG:10004 27 刷新项目stati一次[F5]
LANG:10000 37 Projekt Stati einmal auffrischen [F5]
LANG:10027 72 Однократно обновить статус проектов [F5]

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  349.3513513513514 10.83783783783784 381.729729729729 41.8648648648648

P 
4294967295
"pictures/StandardIcons/refresh.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()

{

  gUpdateProjList = 1;

}" 0
 E E E
20 34
"chbUpdateProjList"
""
1 363 14 E E E 1 E 0 E N "_3DText" E N "_3DFace" E E
 E E
11 0 0 0 0 0
E E E
0
4
LANG:10001 28 Refresh project stati cyclic
LANG:10004 23 刷新项目stati循环
LANG:10000 34 Projekt Stati zyklisch auffrischen
LANG:10027 63 Циклично обновлять статус проекта

3
"maximumSize" "1 30"
"sizePolicy" "Fixed Preferred"
"layoutAlignment" "AlignVCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  378.4054054054054 16.24324324324324 382.4054054054054 39.16216216216309
1
T 
4
LANG:10001 3 ???
LANG:10004 3 ???
LANG:10000 3 ???
LANG:10027 4 0,00

0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E E
0 0 0 0 0
0
E"main(int button, bool state)

{

  gUpdateProjList = (state)?-1:0;

}" 0
13 42
"cmdLanguage"
""
1 383.0000000000002 9 E E E 1 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
12 0 0 0 0 0
E E E
1
4
LANG:10001 15 Switch language
LANG:10004 12 切换语言
LANG:10000 18 Sprache umschalten
LANG:10027 46 Изменить язык интерфейса

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  390.5675675675676 10.83783783783784 427.6756756756752 41.86486486486531

P 
4294967295
"pictures/StandardIcons/language.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()

{

  int         err;

  string      newLocale, locale = getLocale(getActiveLang());

  dyn_anytype daResult;

  int         x, y;



  getChildPanelCentralPosition(\"projAdmin/project_admin_switchLang.pnl\", x, y);

  gParams[1]  = myModuleName();

  gParams[3]  = myPanelName();

  gParams[5]  = x;

  gParams[6]  = y;

  gParams[2]  = \"projAdmin/project_admin_switchLang.pnl\";

  gParams[4]  = this.toolTipText;

  gParams[9]  = makeDynString();

  childPanel(gParams, daResult);



  if ( dynlen(daResult) < 1 || daResult[1] == \"\" )

  {

    return;

  }



  newLocale = daResult[1];

  if ( locale != newLocale )

  {

    if ( gUpdateProjList != -1 ) gUpdateProjList = 1;

    switchLang(getLangIdx(newLocale));

  }

}" 0
 E E E
13 32
"cmdGetHw"
""
1 414.9999999999998 9 E E E 1 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
13 0 0 0 0 0
E E E
1
4
LANG:10001 19 License Information
LANG:10004 15 许可证信息
LANG:10000 18 Lizenz Information
LANG:10027 19 License Information

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  424.3513513513514 10.83783783783784 461.4594594594589 41.86486486486531

P 
4294967295
"pictures/projAdmin/get_hwcode.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()

{

  dyn_anytype daResult;

  int         x, y;



  getChildPanelCentralPosition(\"projAdmin/project_admin_gethw.pnl\", x, y);

  gParams[1]  = myModuleName();

  gParams[3]  = myPanelName();

  gParams[5]  = x;

  gParams[6]  = y;

  gParams[2]  = \"projAdmin/project_admin_gethw.pnl\";

  gParams[4]  = this.toolTipText;

  gParams[9]  = makeDynString();

  childPanel(gParams, daResult);

}" 0
 E E E
13 31
"cmdAbout"
""
1 508.0000000000003 9 E E E 1 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
14 0 0 0 0 0
E E E
1
4
LANG:10001 5 About
LANG:10004 6 关于
LANG:10000 4 Info
LANG:10027 21 О программе

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  516.918918918919 10.83783783783784 554.0270270270265 41.86486486486531

P 
4294967295
"pictures/StandardIcons/info.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()

{

  dyn_anytype daResult;

  int         x, y;



  getChildPanelCentralPosition(\"about.pnl\", x, y);

  gParams[1]  = myModuleName();

  gParams[3]  = myPanelName();

  gParams[5]  = x;

  gParams[6]  = y;

  gParams[2]  = \"about.pnl\";

  gParams[4]  = this.toolTipText;

  gParams[9]  = makeDynString();

  childPanel(gParams, daResult);

}" 0
 E E E
13 2
"cmdHelp"
""
1 539.0000000000001 9 E E E 1 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
15 0 0 0 112 0
E E E
1
4
LANG:10001 16 Online help [F1]
LANG:10004 17 在线帮助 [F1]
LANG:10000 17 Online Hilfe [F1]
LANG:10027 19 Справка [F1]

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  550.7027027027027 10.83783783783784 583.7567567567576 41.86486486486531

P 
4294967295
"pictures/StandardIcons/help.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()

{

  std_help(\"project_admin\");

}

" 0
 E E E
13 1
"cmdExit"
""
1 9 9 E E E 1 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
16 0 0 0 27 0
E E E
1
4
LANG:10001 10 Exit [ESC]
LANG:10004 11 退出[ESC]
LANG:10000 16 Schließen [ESC]
LANG:10027 16 Выйти [ESC]

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Preferred"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  10.83783783783784 10.83783783783784 47.94594594594611 43.89189189189143

P 
4294967295
"pictures/StandardIcons/exit.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()

{

  dyn_anytype da, daa;



  da[1] = myModuleName();

  da[2] = myPanelName();

  daa = makeDynString();

  da[3] = daa;

  panelOff(da);

}" 0
 E E E
13 44
"Button1"
""
1 215 10.5 E E E 0 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
18 0 0 0 0 0
E E E
1
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"sizePolicy" "Minimum Fixed"
"layoutAlignment" "AlignVCenter"
4
LANG:10001 26 arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 arial,-1,13,5,40,0,0,0,0,0
0  225.027027027027 12.18918918918919 239.8378378378379 43.21621621621536

P 
4294967295
"pictures/separator_v.gif"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E E E E
13 45
"Button2"
""
1 325.0000000000001 10.5 E E E 0 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
19 0 0 0 0 0
E E E
1
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"sizePolicy" "Minimum Fixed"
"layoutAlignment" "AlignVCenter"
4
LANG:10001 26 arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 arial,-1,13,5,40,0,0,0,0,0
0  337.8648648648648 12.18918918918919 352.6756756756761 43.21621621621536

P 
4294967295
"pictures/separator_v.gif"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E E E E
13 46
"Button4"
""
1 368.9999999999999 10.5 E E E 0 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
20 0 0 0 0 0
E E E
1
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"sizePolicy" "Minimum Fixed"
"layoutAlignment" "AlignVCenter"
4
LANG:10001 26 arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 arial,-1,13,5,40,0,0,0,0,0
0  379.0810810810811 12.18918918918919 393.8918918918919 43.21621621621536

P 
4294967295
"pictures/separator_v.gif"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E E E E
32 58
"SPACER11"
""
1 471.9263159611528 9 E E E 1 E 1 E N {0,0,0} E N {0,0,0} E E
 E E
32 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"transparentForMouse" ""
"minimumSize" "2 -1"
"sizePolicy" "Expanding Fixed"
"layoutAlignment" "AlignNone"
 479 9 507 38 1
13 60
"PUSH_BUTTON2"
""
1 41 10.5 E E E 0 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
34 0 0 0 0 0
E E E
1
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignVCenter"
4
LANG:10001 26 arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 arial,-1,13,5,40,0,0,0,0,0
0  44.62162162162162 12.18918918918919 59.4324324324325 43.21621621621536

P 
4294967295
"pictures/separator_v.gif"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E E E E
13 61
"PUSH_BUTTON3"
""
1 446.9999999999998 9 E E E 1 E 1 E N "_ButtonText" E N "_3DFace" E E
 E E
35 0 0 0 0 0
E E E
1
4
LANG:10001 14 Open logviewer
LANG:10004 15 打开logviewer
LANG:10000 17 Logviewer öffnen
LANG:10027 24 Открыть LogViewer

5
"hoverbclr" "N \"STD_hover\""
"minimumSize" "34 28"
"maximumSize" "34 28"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  458.1351351351351 10.83783783783784 495.2432432432428 41.86486486486531

P 
4294967295
"pictures/StandardIcons/Logviewer.svg"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
"main()
{
  pmonStartLogviewer(VERSION);
}" 0
 E E E
4 62
"LINE5"
""
1 -12.93276919988236 57 E E E 1 E 1 E N "_ButtonShadow" E N {150,169,188} E E
 E E
36 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

5
"maximumSize" "-1 1"
"sizePolicy" "Preferred Fixed"
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 3 2 1 E  13.85149628052896 43.58122601025864 580.7430983140421 43.8244692535019
0
LAYER, 1 
4
LANG:10001 6 Layer2
LANG:10004 6 Layer2
LANG:10000 6 Layer2
LANG:10027 6 Layer2
0
LAYER, 2 
4
LANG:10001 6 Layer3
LANG:10004 6 Layer3
LANG:10000 6 Layer3
LANG:10027 6 Layer3
0
LAYER, 3 
4
LANG:10001 6 Layer4
LANG:10004 6 Layer4
LANG:10000 6 Layer4
LANG:10027 6 Layer4
0
LAYER, 4 
4
LANG:10001 6 Layer5
LANG:10004 6 Layer5
LANG:10000 6 Layer5
LANG:10027 6 Layer5
0
LAYER, 5 
4
LANG:10001 6 Layer6
LANG:10004 6 Layer6
LANG:10000 6 Layer6
LANG:10027 6 Layer6
0
LAYER, 6 
4
LANG:10001 6 Layer7
LANG:10004 6 Layer7
LANG:10000 6 Layer7
LANG:10027 6 Layer7
0
LAYER, 7 
4
LANG:10001 6 Layer8
LANG:10004 6 Layer8
LANG:10000 6 Layer8
LANG:10027 6 Layer8
0
4 4 "LAYOUT_GROUP4" 5
21 0 
18 19 20 23 27 29 24 25 33 34 42 32 31 2 1 44 45 46 58 60 61 

"S 18" "2 0 1 1"
"S 19" "3 0 1 1"
"S 20" "4 0 1 1"
"S 23" "5 0 1 1"
"S 27" "6 0 1 1"
"S 29" "8 0 1 1"
"S 24" "9 0 1 1"
"S 25" "10 0 1 1"
"S 33" "12 0 1 1"
"S 34" "13 0 1 1"
"S 42" "15 0 1 1"
"S 32" "16 0 1 1"
"S 31" "19 0 1 1"
"S 2" "20 0 1 1"
"S 1" "0 0 1 1"
"S 44" "7 0 1 1"
"S 45" "11 0 1 1"
"S 46" "14 0 1 1"
"S 58" "18 0 1 1"
"S 60" "1 0 1 1"
"S 61" "17 0 1 1"
"" ""
0 1 1 0 0 0 0 1 0
4 5 "LAYOUT_GROUP6" 6
1 1 
62 
4 
"S 62" "1 0 1 1"
"G 4" "0 0 1 1"
"" ""
0 2 0 1 0
4 6 "LAYOUT_GROUP7" -1
1 1 
3 
5 
"S 3" "1 0 1 1"
"G 5" "0 0 1 1"
"" ""
0 2 0 1 8
0

V 14
4
LANG:10001 11 New project
LANG:10004 9 新项目
LANG:10000 13 Neues Projekt
LANG:10027 23 Новый проект
PANEL,-1 -1 570 312 N "_3DFace" 0
"main()
{
  addGlobal(\"gMap\", MAPPING_VAR);

  // project type --------------------------------------------------------
  gMap[\"index\"] = \"projectType\";
  gMap[\"projectType\"] = 0;
  gMap[\"projectTypeText\"] = makeDynString( getCatStr(\"pmon\",\"standardProject\"),
                                           getCatStr(\"pmon\",\"legacyStandardProject\"),
                                           getCatStr(\"pmon\",\"uiProject\"),
                                           getCatStr(\"pmon\",\"reduProject\"),
                                           getCatStr(\"pmon\",\"reduCopyProject\"),
                                           getCatStr(\"pmon\",\"distProject\"),
                                           getCatStr(\"pmon\",\"reduDistProject\"),
                                           getCatStr(\"pmon\",\"driverProject\"),
                                           getCatStr(\"pmon\",\"remoteInstall\"));

  // general -------------------------------------------------------------
  gMap[\"geProject\"] = \"\";
  gMap[\"gePath\"] = \"\";
  gMap[\"geRemote\"] = false;
  gMap[\"geRunnable\"] = true;
  gMap[\"gePwd\"] = true;
  gMap[\"geUser\"] = \"\";
  gMap[\"gePassword\"] = \"\";
  gMap[\"geNGA\"] = false;

  gOldType = -1;
  gOldIndex = \"\";

  // languages
  dyn_string ds, dsIso, dsSel;
  dyn_int    di;
  int        i, err = pmon_getLanguages(dsIso, di);
  string     actlang = getLocale(getActiveLang()), s;

  for ( i = 1; i <= dynlen(dsIso); i++ )
  {
    ds[i] = getCatStr(\"trans\", strrtrim(strltrim(dsIso[i]))) + \" (\" + dsIso[i] + \")\";
    gMap[ds[i]] = dsIso[i];   // gMap[\"German - Austria (de_AT.iso88591)\"] -> \"de_AT.iso88591\"
    gMap[dsIso[i]] = ds[i];   // gMap[\"de_AT.iso88591\"] -> \"German - Austria (de_AT.iso88591)\"
  }

  // prefer UTF8
  if ( strpos(actlang, \".utf8\") == -1 )
    actlang = substr(actlang, 0, 5) + \".utf8\";

  if ( !dynContains(dsIso, actlang) )
  {
    actlang = \"en_US.utf8\";
  }
  dsSel = makeDynString(actlang);

  gMap[\"geActLang\"] = getCatStr(\"trans\",actlang);

  gMap[\"geLangs\"] = ds;
  gMap[\"geLangsIso\"] = dsIso;
  gMap[\"geLangsSel\"] = dsSel;

  // copy redundant
  gMap[\"crSource\"] = \"\";
  gMap[\"crTarget\"] = \"\";

  // remote driver
  gMap[\"drProject\"] = \"\";
  gMap[\"drDriver\"] = \"\";
  gMap[\"drMannum\"] = 1;

  // ssa ------------------------------------------------------------
  gMap[\"ssaHost\"] = \"localhost\";
  gMap[\"ssaPort\"] = (_WIN32 ? \"443\" : \"8079\");
  gMap[\"ssaWebserver\"] = true;
  gMap[\"ssaUI\"] = false;

  // certificate setting---------------------------------------------
  gMap[\"secCertSetting\"] = 0;
  gMap[\"certificatePassword\"] = \"\";
  gMap[\"certificatePath\"] = \"\";
  gMap[\"thumbprints\"] = false;

  // certificates ---------------------------------------------------
  gMap[\"mxProxyRootCertPath\"] = \"\";
  gMap[\"mxProxyHostCertPath\"] = \"\";
  gMap[\"mxProxyKeyCertPath\"] = \"\";
  gMap[\"ssaManagerUserChainPath\"] = \"\";
  gMap[\"ssaManagerUserCertPath\"] = \"\";
  gMap[\"ssaManagerUserKeyPath\"] = \"\";
  gMap[\"wsCertPath\"] = \"\";
  gMap[\"wsKeyPath\"] = \"\";

  // ssl panel ------------------------------------------------------
  gMap[\"certDialogRoot\"] = \"\";
  gMap[\"certDialogRootKey\"] = \"\";
  gMap[\"certDialogHostPath\"] = \"\";
  gMap[\"certDialogValid\"] = \"\";
  gMap[\"certDialogCountry\"] = \"\";
  gMap[\"certDialogProvince\"] = \"\";
  gMap[\"certDialogLocality\"] = \"\";
  gMap[\"certDialogOrganization\"] = \"\";
  gMap[\"certDialogDepartment\"] = \"\";
  gMap[\"certDialogCN\"] = \"\";
  gMap[\"certDialogRole\"] = \"\";

  // ui -------------------------------------------------------------
  gMap[\"uiVisuPara\"] = 0;
  gMap[\"uiServer\"] = \"\";
  gMap[\"uiMannum\"] = 0;
  gMap[\"uiPanel\"] = \"vision/login.pnl\";
  gMap[\"uiTheme\"] = 0;

  // redu -------------------------------------------------------------
  gMap[\"reMyHost\"] = getHostname();
  gMap[\"reHost_1_1\"] = getHostname() + \"-1\";
  gMap[\"reHost_1_2\"] = \"\";
  gMap[\"reRedunet\"] = true;
  gMap[\"reHost_2_1\"] = getHostname() + \"-2\";
  gMap[\"reHost_2_2\"] = \"\";

  // dist -------------------------------------------------------------
  gMap[\"diSystemNumber\"] = 1;
  gMap[\"diSystemName\"] = \"dist_1\";
  gMap[\"diPeers\"] = makeDynString();
  gMap[\"diVisible\"] = makeDynString();
  gMap[\"diPeerNumber\"] = 2;
  gMap[\"diPeerName\"] = \"\";
  gMap[\"diRedu\"] = false;
  gMap[\"diReduNet\"] = false;
  gMap[\"diHost_1_1\"] = getHostname();

  // remote installation -----------------------------------------------
  gMap[\"riServer\"] = \"\";
  gMap[\"riConnection\"]   = \"\";
  gMap[\"riPort\"] = 80;
  addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_type.pnl\",
            \"projectType\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
  stepType.foreCol = \"STD_bar\";

  while ( true )
  {
    delay(0,100);
    workThread();
  }
}





" 0
 E E E E 1 -1 -1 0  20 30
""0  1
E "#uses \"classes/userManagement/UserManagementHooks.ctl\"
int stepX;
int stepY;
int gOldType;
string gOldIndex;
bool oldSsaUI;

//constants for automatic generation of certificates
string COUNTRY = \"AT\";
string PROVINCE = \"Burgenland\";
string LOCALITY = \"Eisenstadt\";
string ORGANIZATION = \"ETM\";
string DEPARTMENT = \"R&D\";
global int ROOT_VALID = 5475; //root ca is 15 years valid
int CERT_VALID = 3650; //certs are 10 years valid

workThread()
{
  if ( !globalExists(\"gMap\") )
    return;

  int    iType = gMap[\"projectType\"];
  string sIndex = gMap[\"index\"];

  if ( (iType == gOldType) && (sIndex == gOldIndex) && (oldSsaUI == gMap[\"ssaUI\"]) )
    return;

  if ( strpos(gMap[\"projectTypeText\"][iType+1], \"(\") < 0 )
  {
    prType.text = gMap[\"projectTypeText\"][iType+1];
  }
  else
  {
    string     sType = gMap[\"projectTypeText\"][iType+1];
    dyn_string ds = strsplit(sType, \"(\");
    prType.text = ds[1];
  }

  stepType.foreCol = (sIndex==\"projectType\")?\"_3DText\":\"\";
  stepGeneral.foreCol = (sIndex==\"general\")?\"_3DText\":\"\";
  stepSSA.foreCol = (sIndex==\"ssa\")?\"_3DText\":\"\";
  stepSSAmanager.foreCol = (sIndex==\"ssaManager\" || sIndex==\"certificates\")?\"_3DText\":\"\";
  stepRedu.foreCol = (sIndex==\"redu\" || sIndex==\"copy_redu\")?\"_3DText\":\"\";
  stepDist.foreCol = (sIndex==\"dist\")?\"_3DText\":\"\";
  stepUi.foreCol = (sIndex==\"ui\")?\"_3DText\":\"\";
  stepDriver.foreCol = (sIndex==\"driver\")?\"_3DText\":\"\";
  stepRemote.foreCol = (sIndex==\"remote\")?\"_3DText\":\"\";
  stepCreate.foreCol = (sIndex==\"create\")?\"_3DText\":\"\";

  if (iType==PROJ_TYPE_LEGACY )
  {
    stepCreate.position(33,110);
  }
  else
  if (iType==PROJ_TYPE_NORMAL )
  {
    stepSSA.position(33,110);
    stepSSAmanager.position(33,150);
    stepCreate.position(33,190);
    oldSsaUI = gMap[\"ssaUI\"];
  }
  else
  if (iType==PROJ_TYPE_REDU)
  {
    stepRedu.position(33,110);
    stepCreate.position(33,150);
  }
  else
  if (iType==PROJ_TYPE_REDU_COPY)
  {
    stepRedu.position(33,70);
    stepCreate.position(33,110);
  }
  else
  if (iType==PROJ_TYPE_DIST)
  {
    stepDist.position(33,110);
    stepCreate.position(33,150);
  }
  else
  if (iType==PROJ_TYPE_REDU_DIST)
  {
    stepRedu.position(33,110);
    stepDist.position(33,150);
    stepCreate.position(33,190);
  }
  else
  if (iType==PROJ_TYPE_REMOTE)
  {
    stepRemote.position(33,70);
    stepCreate.position(33,110);
  }
  else
  if (iType==PROJ_TYPE_LEGACY || iType==PROJ_TYPE_UI || iType == PROJ_TYPE_DRIVER)
  {
    stepCreate.position(33,150);
  }

  stepGeneral.visible = (iType!=PROJ_TYPE_REDU_COPY && iType!=PROJ_TYPE_REMOTE);
  stepRedu.visible = (iType==PROJ_TYPE_REDU || iType==PROJ_TYPE_REDU_COPY || iType==PROJ_TYPE_REDU_DIST);
  stepDist.visible = (iType==PROJ_TYPE_DIST || iType==PROJ_TYPE_REDU_DIST);
  stepUi.visible = (iType==PROJ_TYPE_UI);
  stepDriver.visible = (iType==PROJ_TYPE_DRIVER);
  stepRemote.visible = (iType==PROJ_TYPE_REMOTE);
  stepSSA.visible = (iType==PROJ_TYPE_NORMAL);
  stepSSAmanager.visible = (iType==PROJ_TYPE_NORMAL);
  gOldType = iType;
  gOldIndex = sIndex;
}

// functions to check inputs
int check_general()
{
  int         iErr = 0, iErrNameCheck, iErrPathCheck;
  string      sErr = \"\", sGeProject = gMap[\"geProject\"], sGePath = gMap[\"gePath\"];//IM 109635
  dyn_string  proj, version, projpath;
  int         err = paGetProjs(proj, version, projpath);

  pmonClearLastError();

  iErrNameCheck = nameCheck(sGeProject, NAMETYPE_PROJ);
  strreplace(sGePath,\"/\",\"~\");
  strreplace(sGePath,\":\",\"[\");
  iErrPathCheck = nameCheck(sGePath,NAMETYPE_PROJ);//IM 109635
  if(iErrPathCheck == -2) iErrPathCheck = 0;//path may be longer than 64 chars
  strreplace(sGePath,\"~\",\"/\");
  strreplace(sGePath,\"[\",\":\");
  if ( iErrNameCheck == -1 )
  {
    pmon_warningOutput(\"Console§3852\", -1);
    return(-1);
  }
  else if ( iErrNameCheck == -2 )
  {
    pmon_warningOutput(\"Console§3870\", -1);
    return(-1);
  }
  else if(iErrPathCheck == -1)//IM 109635
  {
    pmon_warningOutput(\"Console§3852\", -1);
    return(-1);
  }
  else
  {
    gMap[\"geProject\"] = sGeProject;
  }

  if ( gMap[\"geProject\"] == \"\" )
  {
    sErr = \"Console§3851\";
  }
  else if ( (gMap[\"projectType\"] != PROJ_TYPE_UI) && (gMap[\"projectType\"] != PROJ_TYPE_DRIVER) && (dynlen(gMap[\"geLangsSel\"]) < 1) )
  {
    sErr = \"Console§2015\";
  }
  else if ( strrtrim(strltrim(gMap[\"gePath\"])) == \"\" )
  {
    sErr = \"Console§3853\";
  }
  else if ( access(gMap[\"gePath\"], W_OK) != 0 )
  {
    sErr = \"errNewProjPath\";
  }
  else if ( dynContains(proj, gMap[\"geProject\"]) || access(gMap[\"gePath\"] + gMap[\"geProject\"], F_OK) == 0 )
  {
    sErr = \"Console§2758§%s§\"+gMap[\"geProject\"];
  }

  if ( sErr != \"\" )
  {
    pmon_warningOutput(sErr, -1);
    iErr = -1;
  }

  return(iErr);
}

//-------------------------------------------------------------------------------
int check_ssa()
{
  int iErr;
  string      sErr = \"\";

  if (gMap[\"ssaHost\"] == \"\")
  {
    sErr = \"errEmptyServerName\";
  }
  else if (gMap[\"ssaPort\"] <= 0)
  {
    sErr = \"errServerPortMissing\";
  }

  if ( sErr != \"\" )
  {
    pmon_warningOutput(sErr, -1);
    iErr = -1;
  }
  return(iErr);
}

//-------------------------------------------------------------------------------
// isolate filename or cert store entry from first part
string getBareName(string entry, bool takeBaseName = false)
{
  string ret;
  if (strpos(entry, \"file:\") == 0)
    ret = substr(entry, 5);
  else if (strpos(entry, \"store:\") == 0)
    ret = substr(entry, 6);
  else
    ret = entry;

  if (takeBaseName)
    ret = baseName(ret);
  return ret;
}

//-------------------------------------------------------------------------------
void verifyPrivateKey(string &sErr, string msgKey, string certPath, string privateKeyPath)
{
  int rcCert, rcPrivKey;
  string stdOutCert, stdOutPrivKey, stdErrCert, stdErrPrivKey;

  string hashCertCmd = \"openssl x509 -noout -modulus -in \" + certPath + \" | openssl md5\";
  string hashPrivKeyCmd = \"openssl rsa -noout -modulus -in \" + privateKeyPath + \" | openssl md5\";

  rcCert = system(hashCertCmd, stdOutCert, stdErrCert);
  rcPrivKey = system(hashPrivKeyCmd, stdOutPrivKey, stdErrPrivKey);

  if(stdOutCert != stdOutPrivKey)
  {
    sErr = msgKey;
  }
}

//-------------------------------------------------------------------------------
int check_fileBasedCertificates()
{
  int iErr;
  string sErr = \"\";
  string projPath = gMap[\"gePath\"] + \"/\" + gMap[\"geProject\"]; //in projAdmin we have no PROJ_PATH

  if(gMap[\"ssaUI\"])
  {
    if(gMap[\"wsCertPath\"]               == \"\" || //check if cert is empty
       gMap[\"wsKeyPath\"]                == \"\" ||
       gMap[\"mxProxyRootCertPath\"]      == \"\" ||
       gMap[\"mxProxyHostCertPath\"]      == \"\" ||
       gMap[\"mxProxyKeyCertPath\"]       == \"\" )
    {
      sErr = \"errCertsEmpty\";
    }
    else if(strpos(gMap[\"mxProxyRootCertPath\"],     \" \") != -1 || //check if path has whitespaces for sslCertificate config
            strpos(gMap[\"mxProxyHostCertPath\"],     \" \") != -1 ||
            strpos(gMap[\"mxProxyKeyCertPath\"],      \" \") != -1)
    {
      sErr = \"errCertFolderWhitespace\";
    }
    else if(!isfile(gMap[\"wsCertPath\"])          || //check if cert is a file
            !isfile(gMap[\"wsKeyPath\"])           ||
            !isfile(gMap[\"mxProxyRootCertPath\"]) ||
            !isfile(gMap[\"mxProxyHostCertPath\"]) ||
            !isfile(gMap[\"mxProxyKeyCertPath\"]))
    {
      sErr = \"errCertsNoFile\";
    }
    else if(strpos(gMap[\"mxProxyRootCertPath\"], projPath) != -1 || //check if certs are not in project
            strpos(gMap[\"mxProxyHostCertPath\"], projPath) != -1 ||
            strpos(gMap[\"mxProxyKeyCertPath\"],  projPath) != -1 )
    {
      sErr = \"errCertInProject\";
    }
    else //verify the certs with root certificate and private key
    {
      verifyPrivateKey(sErr, \"errPrivKeyWebserver\", gMap[\"wsCertPath\"], gMap[\"wsKeyPath\"]);
      verifyPrivateKey(sErr, \"errPrivKeyProxy\", gMap[\"mxProxyHostCertPath\"], gMap[\"mxProxyKeyCertPath\"]);
    }
  }
  else
  {
    if(gMap[\"wsCertPath\"]               == \"\" || //check if certs are empty
       gMap[\"wsKeyPath\"]                == \"\" ||
       gMap[\"mxProxyRootCertPath\"]      == \"\" ||
       gMap[\"mxProxyHostCertPath\"]      == \"\" ||
       gMap[\"mxProxyKeyCertPath\"]       == \"\" ||
       gMap[\"ssaManagerUserChainPath\"]  == \"\" ||
       gMap[\"ssaManagerUserCertPath\"]   == \"\" ||
       gMap[\"ssaManagerUserKeyPath\"]    == \"\" )
    {
      sErr = \"errCertsEmpty\";
    }
    else if(strpos(gMap[\"mxProxyRootCertPath\"],     \" \") != -1 || //check if path has whitespaces for sslCertificate config
            strpos(gMap[\"mxProxyHostCertPath\"],     \" \") != -1 ||
            strpos(gMap[\"mxProxyKeyCertPath\"],      \" \") != -1 ||
            strpos(gMap[\"ssaManagerUserChainPath\"], \" \") != -1 ||
            strpos(gMap[\"ssaManagerUserCertPath\"],  \" \") != -1 ||
            strpos(gMap[\"ssaManagerUserKeyPath\"],   \" \") != -1)
    {
      sErr = \"errCertFolderWhitespace\";
    }
    else if(!isfile(gMap[\"wsCertPath\"])              || //check if cert is a file
            !isfile(gMap[\"wsKeyPath\"])               ||
            !isfile(gMap[\"mxProxyRootCertPath\"])     ||
            !isfile(gMap[\"mxProxyHostCertPath\"])     ||
            !isfile(gMap[\"mxProxyKeyCertPath\"])      ||
            !isfile(gMap[\"ssaManagerUserChainPath\"]) ||
            !isfile(gMap[\"ssaManagerUserCertPath\"])  ||
            !isfile(gMap[\"ssaManagerUserKeyPath\"]))
    {
      sErr = \"errCertsNoFile\";
    }
    else if(strpos(gMap[\"mxProxyRootCertPath\"],     projPath) != -1 || //check if certs are not in project
            strpos(gMap[\"mxProxyHostCertPath\"],     projPath) != -1 ||
            strpos(gMap[\"mxProxyKeyCertPath\"],      projPath) != -1 ||
            strpos(gMap[\"ssaManagerUserChainPath\"], projPath) != -1 ||
            strpos(gMap[\"ssaManagerUserCertPath\"],  projPath) != -1 ||
            strpos(gMap[\"ssaManagerUserKeyPath\"],   projPath) != -1)
    {
      sErr = \"errCertInProject\";
    }
    else //verify certificates with root certficate and private key
    {
      verifyPrivateKey(sErr, \"errPrivKeyWebserver\", gMap[\"wsCertPath\"], gMap[\"wsKeyPath\"]);
      verifyPrivateKey(sErr, \"errPrivKeyProxy\", gMap[\"mxProxyHostCertPath\"], gMap[\"mxProxyKeyCertPath\"]);
      verifyPrivateKey(sErr, \"errPrivKeySsa\", gMap[\"ssaManagerUserCertPath\"], gMap[\"ssaManagerUserKeyPath\"]);
    }
  }

  if ( sErr != \"\" )
  {
    pmon_warningOutput(sErr, -1);
    iErr = -1;
  }

  return iErr;
}

//-------------------------------------------------------------------------------
int check_storeBasedCertificates()
{
  int iErr;
  string sErr = \"\";

  dyn_string dsMxProxyRoot = strsplit(gMap[\"mxProxyRootCertPath\"], \":\");
  dyn_string dsMxProxyCert = strsplit(gMap[\"mxProxyHostCertPath\"], \":\");

  //check if everything is not empty
  if(gMap[\"wsCertPath\"]               == \"\" ||
     gMap[\"wsKeyPath\"]                == \"\" ||
     gMap[\"mxProxyRootCertPath\"]      == \"\" ||
     gMap[\"mxProxyHostCertPath\"]      == \"\" ||
     (gMap[\"ssaManagerUserChainPath\"] == \"\" && !gMap[\"ssaUI\"]) ||
     (gMap[\"ssaManagerUserCertPath\"]  == \"\" && !gMap[\"ssaUI\"]))
  {
    sErr = \"errCertsEmpty\";
  }
  else if(dynlen(dsMxProxyRoot) != 3 || dynlen(dsMxProxyCert) != 3 ||  //check if syntax is correct from proxy
         (dsMxProxyRoot[1] != \"USER\" && dsMxProxyRoot[1] != \"MACHINE\") ||
         (dsMxProxyCert[1] != \"USER\" && dsMxProxyCert[1] != \"MACHINE\") ||
         strlen(dsMxProxyRoot[2]) == 0 || strlen(dsMxProxyRoot[3]) == 0 ||
         strlen(dsMxProxyCert[2]) == 0 || strlen(dsMxProxyCert[3]) == 0)
  {
    sErr = \"errWinCertProxy\";
  }
  else if(!gMap[\"ssaUI\"])
  {
    dyn_string dsSsaChain = strsplit(gMap[\"ssaManagerUserChainPath\"], \"=\");
    dyn_string dsSsaCert = strsplit(gMap[\"ssaManagerUserCertPath\"], \":\");

    if(strlen(gMap[\"ssaManagerUserChainPath\"]) == 0)
    {
      sErr = \"errWinCertSsaChain\";
    }
    else if(dynlen(dsSsaCert) != 3 || //check if syntax is correct from ssa certs
            (dsSsaCert[1] != \"USER\" && dsSsaCert[1] != \"MACHINE\") ||
            strlen(dsSsaCert[2]) == 0 ||
            strlen(dsSsaCert[3]) == 0)
    {
      sErr = \"errWinCertSsaCert\";
    }
  }

  if ( sErr != \"\" )
  {
    pmon_warningOutput(sErr, -1);
    iErr = -1;
  }

  return iErr;
}

//-------------------------------------------------------------------------------
int check_certificateSettings()
{
  int iErr;
  string sErr = \"\";
  string projPath = gMap[\"gePath\"] + gMap[\"geProject\"]; //in projAdmin we have no PROJ_PATH

  if(gMap[\"secCertSetting\"] == 0)
  {
    if(strpos(gMap[\"certificatePath\"], \" \") != -1)
    {
      sErr = \"errCertFolderWhitespace\";
    }
    else if(gMap[\"certificatePath\"] == \"\")
    {
      sErr = \"errCertNoFolder\";
    }
    else if(projPath == gMap[\"certificatePath\"]) //certificate location is in project
    {
      sErr = \"errCertInProject\";
    }
    else if(!UserManagementHooks::checkPasswordQuality(gMap[\"certificatePassword\"], sErr)) //check password quality with password policy
    {
      passwordCA.backCol(\"WF_Error\");
      passwordCA.toolTipText(sErr);
      sErr = \"passwordInvalidPolicy\";
    }
  }

  if ( sErr != \"\" )
  {
    pmon_warningOutput(sErr, -1);
    iErr = -1;
  }

  return(iErr);
}

int check_redu()
{
  int         iErr;
  string      sErr = \"\";

  if ( gMap[\"reHost_1_1\"] == \"\" || gMap[\"reHost_1_2\"] == \"\" )
  {
    sErr = \"errEmptyServerName\";
  }
  else
  if ( strtolower(gMap[\"reHost_1_1\"]) == strtolower(gMap[\"reHost_1_2\"]) )
  {
    sErr = \"errSameReduHost\";
  }
  if ( sErr == \"\" && gMap[\"reRedunet\"] )
  {
    if ( gMap[\"reHost_2_1\"] == \"\" || gMap[\"reHost_2_2\"] == \"\" )
    {
      sErr = \"errEmptyServerName\";
    }
    else
    if ( (strtolower(gMap[\"reHost_1_1\"]) == strtolower(gMap[\"reHost_2_1\"])) ||
         (strtolower(gMap[\"reHost_1_1\"]) == strtolower(gMap[\"reHost_2_2\"])) ||
         (strtolower(gMap[\"reHost_1_2\"]) == strtolower(gMap[\"reHost_2_1\"])) ||
         (strtolower(gMap[\"reHost_1_2\"]) == strtolower(gMap[\"reHost_2_2\"])) ||
         (strtolower(gMap[\"reHost_2_1\"]) == strtolower(gMap[\"reHost_2_2\"]))    )
    {
      sErr = \"errSameReduHost\";
    }
  }

  if ( sErr != \"\" )
  {
    pmon_warningOutput(sErr, -1);
    iErr = -1;
  }
  return(iErr);
}

int check_copy_redu()
{
  int         iErr = 0;
  string      sErr = \"\", sProject1, sServer1, sProject2, sServer2;
  dyn_string  proj, version, projpath;
  int         err = paGetProjs(proj, version, projpath);

  iErr = paCheckCopyReduSource(gMap[\"crSource\"]);
  if ( iErr != 0 ) return (iErr);

  err = paGetHostProjFromPath(gMap[\"crSource\"], sServer1, sProject1);
  err = paGetHostProjFromPath(gMap[\"crTarget\"], sServer2, sProject2);

  if ( gMap[\"crSource\"] == \"\" || gMap[\"crTarget\"] == \"\" )
  {
    sErr = \"errEmptyProjectName\";
  }
  else
  if ( sServer2 != getHostname() )
  {
    sErr = \"errNoLocalServer\";
  }
  else
  if ( dynContains(proj, sProject2) || access(gMap[\"crTarget\"] + sProject2, F_OK) == 0 )
  {
    sErr = \"Console§2758§%s§\"+sProject2;
  }

  if ( sErr != \"\" )
  {
    pmon_warningOutput(sErr, -1);
    iErr = -1;
  }
  return(iErr);
}

int check_dist(bool checkGeneral = true)
{

  int         iErr;
  string      sErr = \"\", sName = gMap[\"diSystemName\"];
  dyn_string  proj, version, projpath;
  int         err = paGetProjs(proj, version, projpath);
  dyn_string  dsPeers = diPeers.getColumnN(0);
  int         iSysNum = diSystemNumber.text;

  //DebugN(11,dsPeers);
  //DebugN(22,iSysNum);

  pmonClearLastError();

  sName = diSystemName.text;

  for ( int i = 1; i <= dynlen(dsPeers); i++)//check if sys already used
  {
    int iSysNumTemp = strsplit(dsPeers[i], \" \")[1];
    string sSysNameTemp = strsplit(dsPeers[i], \" \")[2];

    if ( iSysNum == iSysNumTemp )
    {
      pmon_warningOutput(\"errSameSystemNumber\", -1);
      return -1;
    }
    if ( sName == sSysNameTemp )
    {
      pmon_warningOutput(\"errSameReduHost\", -1);
      return -1;
    }
  }

  if ( sName == \"\" || nameCheck(sName, NAMETYPE_DP) == -1 )
  {
    sErr = \"Console§3868\";
  }

  if ( sErr != \"\" )
  {
    pmon_warningOutput(sErr, -1);
    iErr = -1;
  }
  return(iErr);
}

//-------------------------------------------------------------------------------

int check_ui()
{
  int         iErr = 0, err;
  string      sErr = \"\", sProject, sServer;

  err = paGetHostProjFromPath(gMap[\"uiServer\"], sServer, sProject);

  if ( paCheckProj(gMap[\"uiServer\"], 3) )
  {
    sErr = \"errServerProjNotValid\";
  }
  if ( sErr == \"\" && strtolower(sServer) == strtolower(getHostname()) )
  {
    iErr = 1;
    sErr = (_WIN32)?\"warningLocalServerW\":\"warningLocalServerX\";
  }
  if ( sErr == \"\" )
  {
    dyn_string dsProjPathes = makeDynString();

    iErr = paCfgReadValueList(gMap[\"uiServer\"] + \"/config/config\", \"general\", \"proj_path\", dsProjPathes);
    if ( dynlen(dsProjPathes) > 1 )
    {
      pmon_warningOutput(\"correctSubprojs\", -1);
    }
  }

  if ( sErr != \"\" )
  {
    pmon_warningOutput(sErr, -1);
    if ( iErr == 0 ) iErr = -1;
  }
  return(iErr);
}

//-------------------------------------------------------------------------------

int check_driver()
{
  int         iErr = 0, err;
  string      sErr = \"\", sProject, sServer;

  if ( gMap[\"drProject\"] == \"\" )
  {
    sErr = \"errEmptyServerName\";
  }

  if ( sErr != \"\" )
  {
    pmon_warningOutput(sErr, -1);
    iErr = -1;
  }
  return(iErr);
}

int check_remote()
{
  int         iErr = 0, err;
  string      sErr = \"\", sProject, sServer;

  if ( gMap[\"riServer\"] == \"\" )
  {
    sErr = \"errEmptyServerName\";
  }

  if ( sErr != \"\" )
  {
    pmon_warningOutput(sErr, -1);
    iErr = -1;
  }
  return(iErr);
}

setHacks()
{
  int    stepX, stepY, hackNr, i;
  string sHack;

  getValue(\"polStep\", \"position\", stepX, stepY);
  hackNr = stepY / 40;

  for ( i = 1; i < 6; i++ )
  {
    sHack = \"hack\" + i;
    setValue(sHack, \"visible\", (i < hackNr));
  }
}

void setThemeShapes(bool bVisible)
{
  crMessage.visible    = !bVisible;
  busyBar.visible      = !bVisible;
  pa_ref_theme.visible = bVisible;
}


" 0
 4
"CBRef" "1"
"EClose" "main()
{
  dyn_anytype da, daa;
  
  if ( cmdCancel.enabled )
//  if ( true )
  {
    da[1] = myModuleName();
    da[2] = myPanelName();
    daa = makeDynString();
    da[3] = daa;
    panelOff(da);
  }
}" 0

"dpi" "96"
"pdpi" "96"
0 0 0
""
NC
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
4
LANG:10001 6 Layer1
LANG:10004 6 Layer1
LANG:10000 6 Layer1
LANG:10027 6 Layer1
1 122 0 "" 0
0
2 87
"stepType"
""
1 33 30 E E E 1 E 1 E N "_ButtonShadow" E N "_Transparent" E E
 E E
6 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 0 1 E U  0 E 35 32 107 63
0 2 0 "0s" 0 0 0 192 0 0  35 32 2
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 12 Project type
LANG:10004 12 项目类型
LANG:10000 10 Projekttyp
LANG:10027 19 Выбор типа
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 7 setting
LANG:10004 6 设置
LANG:10000 10 auswählen
LANG:10027 14 проекта
2 88
"stepGeneral"
""
1 33 70 E E E 1 E 0 E N "_ButtonShadow" E N "_Transparent" E E
 E E
7 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 0 1 E U  0 E 35 72 83 103
0 2 0 "0s" 0 0 0 192 0 0  35 72 2
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 7 General
LANG:10004 6 常规
LANG:10000 10 Allgemeine
LANG:10027 10 Общие
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 8 settings
LANG:10004 6 设置
LANG:10000 13 Einstellungen
LANG:10027 18 настройки
2 89
"stepRedu"
""
1 33 110 E E E 1 E 0 E N "_ButtonShadow" E N "_Transparent" E E
 E E
8 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 0 1 E U  0 E 35 112 109 143
0 2 0 "0s" 0 0 0 192 0 0  35 112 2
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 10 Redundancy
LANG:10004 6 冗余
LANG:10000 10 Redundanz-
LANG:10027 18 Настройки
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 8 settings
LANG:10004 6 设置
LANG:10000 13 Einstellungen
LANG:10027 21 рез.проекта
2 90
"stepDist"
""
1 33 150 E E E 1 E 0 E N "_ButtonShadow" E N "_Transparent" E E
 E E
9 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 0 1 E U  0 E 35 152 99 183
0 2 0 "0s" 0 0 0 192 0 0  35 152 2
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 11 Distributed
LANG:10004 9 分布式
LANG:10000 11 Verteilung-
LANG:10027 18 Настройки
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 8 settings
LANG:10004 6 设置
LANG:10000 13 Einstellungen
LANG:10027 25 распр.проекта
2 91
"stepUi"
""
1 33 110 E E E 1 E 0 E N "_ButtonShadow" E N "_Transparent" E E
 E E
10 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 0 1 E U  0 E 35 112 83 143
0 2 0 "0s" 0 0 0 192 0 0  35 112 2
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 2 UI
LANG:10004 2 UI
LANG:10000 3 UI-
LANG:10027 18 Настройки
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 8 settings
LANG:10004 6 设置
LANG:10000 13 Einstellungen
LANG:10027 2 UI
2 92
"stepDriver"
""
1 33 110 E E E 1 E 0 E N "_ButtonShadow" E N "_Transparent" E E
 E E
11 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 0 1 E U  0 E 35 112 83 143
0 2 0 "0s" 0 0 0 192 0 0  35 112 2
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 6 Driver
LANG:10004 6 驱动
LANG:10000 8 Treiber-
LANG:10027 18 Настройки
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 8 settings
LANG:10004 6 设置
LANG:10000 13 Einstellungen
LANG:10027 16 драйвера
30 93
"Frame1"
""
1 10 270 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
12 0 0 0 0 0
E E E
1
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E U  0 E 10 10 130 270
4
LANG:10001 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,75,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,75,0,0,0,0,0
0 4
LANG:10001 7  Steps 
LANG:10004 6 步骤
LANG:10000 10  Schritte 
LANG:10027 9  Шаги
2 96
"stepCreate"
""
1 33 110 E E E 1 E 1 E N "_ButtonShadow" E N "_Transparent" E E
 E E
14 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 0 1 E U  0 E 35 112 76 143
0 2 0 "0s" 0 0 0 192 0 0  35 112 2
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 6 Create
LANG:10004 6 创建
LANG:10000 7 Projekt
LANG:10027 16 Создание
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 7 project
LANG:10004 6 项目
LANG:10000 9 erstellen
LANG:10027 14 проекта
10 105
"polStep"
""
1 19 45 E E E 1 E 0 E N {0,0,0} E N {255,255,255} E E
 E E
15 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 0 1 E U  1 E 7 19 46
25 46
25 42
31 47
25 52
25 48
19 48
 1
2 106
"prType"
""
1 13 284 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
17 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 0 1 E U  0 E 15 286 29 301
0 2 0 "0s" 0 0 0 192 0 0  15 286 1
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,12,5,50,0,0,0,0,0
0 4
LANG:10001 3 ...
LANG:10004 3 ...
LANG:10000 3 ...
LANG:10027 3 ...
2 107
"stepRemote"
""
1 33 110 E E E 1 E 0 E N "_ButtonShadow" E N "_Transparent" E E
 E E
16 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 0 1 E U  0 E 35 112 120 143
0 2 0 "0s" 0 0 0 192 0 0  35 112 2
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 13 Remote server
LANG:10004 15 删除服务器
LANG:10000 13 Remote Server
LANG:10027 18 Настройки
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 8 settings
LANG:10004 6 设置
LANG:10000 13 Einstellungen
LANG:10027 23 удал.сервера
6 110
"hack1"
""
1 12 60 E E E 1 E 0 E N "_Transparent" E N "_Transparent" E E
 E E
20 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E 1 0 1 1.77635683940025e-15 0 2  1 1  "pictures/StandardIcons/apply.svg" 12632256 E 12 40 32 60
6 111
"hack2"
""
1 12 100 E E E 1 E 0 E N "_Transparent" E N "_Transparent" E E
 E E
21 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E 1 0 1 1.77635683940025e-15 0 2  1 1  "pictures/StandardIcons/apply.svg" 12632256 E 12 80 32 100
6 112
"hack3"
""
1 12 140 E E E 1 E 0 E N "_Transparent" E N "_Transparent" E E
 E E
22 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E 1 0 1 1.77635683940025e-15 0 2  1 1  "pictures/StandardIcons/apply.svg" 12632256 E 12 120 32 140
6 113
"hack4"
""
1 12 180 E E E 1 E 0 E N "_Transparent" E N "_Transparent" E E
 E E
23 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E 1 0 1 1.77635683940025e-15 0 2  1 1  "pictures/StandardIcons/apply.svg" 12632256 E 12 160 32 180
6 114
"hack5"
""
1 12 220 E E E 1 E 0 E N "_Transparent" E N "_Transparent" E E
 E E
24 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E 1 0 1 1.77635683940025e-15 -2.842170943040401e-14 2  1 1  "pictures/StandardIcons/apply.svg" 12632256 E 12 200 32 220
13 95
"cmdPrev"
""
1 296 281 E E E 0 E 1 E N "_ButtonText" E N "_Button" E E
 E E
1 0 0 0 27 0
E E E
8
4
LANG:10001 8 Previous
LANG:10004 9 上一个
LANG:10000 7 Zurück
LANG:10027 10 Назад

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  294 279 382 307

T 
4
LANG:10001 10 < Previous
LANG:10004 10 <上一个
LANG:10000 9 < Zurück
LANG:10027 12 < Назад
"main()
{
  int iProjectType = gMap[\"projectType\"];

  getValue(\"polStep\", \"position\", stepX, stepY);
  stepY -= 40;
  if(gMap[\"index\"] != \"certificates\")
  {
    polStep.position(stepX,stepY); setHacks();
  }

  removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
  cmdNext.enabled = true;
  cmdApply.visible = false;

  switch ( gMap[\"index\"] )
  {
    case \"general\":
    case \"copy_redu\":
    case \"remote\":
    {
      addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_type.pnl\",
                \"projectType\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
      gMap[\"index\"] = \"projectType\";
      this.enabled = false;
      break;
    }
    case \"ssa\":
    case \"redu\":
    case \"ui\":
    case \"driver\":
    {
      addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_general.pnl\",
                \"general\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
      gMap[\"index\"] = \"general\";
      break;
    }
    case \"ssaManager\":
    {
      addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_ssauth.pnl\",
                \"ssa\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
      gMap[\"index\"] = \"ssa\";
      break;
    }
    case \"certificates\":
    {
      addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_certSetting.pnl\",
                \"ssaManager\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
      gMap[\"index\"] = \"ssaManager\";
      break;
    }
    case \"dist\":
    {
      switch ( iProjectType )
      {
        case PROJ_TYPE_DIST:
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_general.pnl\",
                    \"general\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = \"general\";
          break;
        }
        case PROJ_TYPE_REDU_DIST:
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_redu.pnl\",
                    \"redu\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = \"redu\";
          break;
        }
      }
      break;
    }
    case \"create\":
    {
      switch ( gMap[\"lastIndex\"] )
      {
        case \"general\":
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_general.pnl\",
                    \"general\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = gMap[\"lastIndex\"];
          break;
        }
        case \"certificates\":
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_certificates.pnl\",
                    \"certificates\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = gMap[\"lastIndex\"];
          break;
        }
        case \"ssa\":
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_ssauth.pnl\",
                    \"ssa\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = gMap[\"lastIndex\"];
          break;
        }
        case \"ssaManager\":
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_certSetting.pnl\",
                    \"ssaManager\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = gMap[\"lastIndex\"];
          break;
        }
        case \"redu\":
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_redu.pnl\",
                    \"redu\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = gMap[\"lastIndex\"];
          break;
        }
        case \"copy_redu\":
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_copy_redu.pnl\",
                    \"copy_redu\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = gMap[\"lastIndex\"];
          break;
        }
        case \"dist\":
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_dist.pnl\",
                    \"dist\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = gMap[\"lastIndex\"];
          break;
        }
        case \"ui\":
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_ui.pnl\",
                    \"ui\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = gMap[\"lastIndex\"];
          break;
        }
        case \"driver\":
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_driver.pnl\",
                    \"driver\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = gMap[\"lastIndex\"];
          break;
        }
        case \"remote\":
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_remote.pnl\",
                    \"remote\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = gMap[\"lastIndex\"];
          break;
        }
      }
    }
  }
}
" 0
 E E E
13 70
"cmdNext"
""
1 385 281 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
2 0 0 0 27 0
E E E
8
4
LANG:10001 4 Next
LANG:10004 9 下一个
LANG:10000 6 Weiter
LANG:10027 10 Далее

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  383 279 471 307

T 
4
LANG:10001 6 Next >
LANG:10004 10 下一个>
LANG:10000 8 Weiter >
LANG:10027 12 Далее >
"main()
{
  int iProjectType = gMap[\"projectType\"], iErr;
  string sIndex = gMap[\"index\"];

  getValue(\"polStep\", \"position\", stepX, stepY);

  switch ( gMap[\"index\"] )
  {
    case \"create\":
    {
      this.enabled = false;
      cmdApply.visible = true;
      break;
    }
    case \"projectType\":
    {
      if(checkBoxSecGuideline.visible && !checkBoxSecGuideline.state(0))
      {
        pmon_warningOutput(\"errSecurityGuideline\", -1);
        break;
      }
      cmdPrev.enabled = true;
      removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
      gMap[\"index\"] = \"general\";
      gMap[\"lastIndex\"] = gMap[\"index\"] ;
      stepY += 40;
      polStep.position(stepX,stepY); setHacks();
      if ( iProjectType == PROJ_TYPE_LEGACY )
      {
//         this.enabled = false;
//         cmdApply.visible = true;
      }
      else if ( iProjectType == PROJ_TYPE_REDU_COPY )
      {
        addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_copy_redu.pnl\",
                  \"copy_redu\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
        gMap[\"index\"] = \"copy_redu\";
        gMap[\"lastIndex\"] = gMap[\"index\"] ;
        setInputFocus(myModuleName(), myPanelName(), \"crSource\");
//        this.enabled = false;
//        cmdApply.visible = true;
        break;
      }
      else if ( iProjectType == PROJ_TYPE_REMOTE )
      {
        addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_remote.pnl\",
                  \"remote\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
        gMap[\"index\"] = \"remote\";
        gMap[\"lastIndex\"] = gMap[\"index\"] ;
        setInputFocus(myModuleName(), myPanelName(), \"riServer\");
//        this.enabled = false;
//        cmdApply.visible = true;
        break;
      }

      addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_general.pnl\",
                \"general\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
      setInputFocus(myModuleName(), myPanelName(), \"geProject\");
      break;
    }
    case \"general\":
    {
      iErr = check_general();
      if ( iErr ) break;
      if(iProjectType == PROJ_TYPE_NORMAL && gMap[\"gePwd\"] && (gMap[\"geUser\"] == \"\" || gMap[\"gePassword\"] == \"\"))
      {
        string newUser, newPwd;
        dyn_anytype daResult;
        int x, y;
        getChildPanelCentralPosition(\"projAdmin/project_admin_define_pwd.pnl\", x, y);
        gParams[1]  = myModuleName();
        gParams[3]  = myPanelName();
        gParams[5]  = x;
        gParams[6]  = y;
        gParams[2]  = \"projAdmin/project_admin_define_pwd.pnl\";
        gParams[4]  = this.toolTipText;
        gParams[9]  = makeDynString(gMap[\"geProject\"], newUser, newPwd);
        childPanel(gParams, daResult);
        if ( dynlen(daResult) > 2 && daResult[1] == 1 )
        {
          newUser = daResult[2];
          newPwd = daResult[3];
        }
        gMap[\"geUser\"] = newUser;
        gMap[\"gePassword\"] = newPwd;
        break;
      }
      cmdPrev.enabled = true;
      removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
      stepY += 40;
      polStep.position(stepX,stepY); setHacks();

      switch ( iProjectType )
      {
        case PROJ_TYPE_NORMAL:
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_ssauth.pnl\",
                    \"ssa\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = \"ssa\";
          gMap[\"lastIndex\"] = gMap[\"index\"] ;
          break;
        }
        case PROJ_TYPE_REDU:
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_redu.pnl\",
                    \"redu\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = \"redu\";
          gMap[\"lastIndex\"] = gMap[\"index\"] ;
          setInputFocus(myModuleName(), myPanelName(), \"reHost_1_2\");
//          this.enabled = false;
//          cmdApply.visible = true;
          break;
        }
/*
        case PROJ_TYPE_REDU_COPY:
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_copy_redu.pnl\",
                    \"copy_redu\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = \"copy_redu\";
          gMap[\"lastIndex\"] = gMap[\"index\"] ;
          setInputFocus(myModuleName(), myPanelName(), \"crSource\");
//          this.enabled = false;
//          cmdApply.visible = true;
          break;
        }
*/
        case PROJ_TYPE_DIST:
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_dist.pnl\",
                    \"dist\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = \"dist\";
          gMap[\"lastIndex\"] = gMap[\"index\"] ;
          setInputFocus(myModuleName(), myPanelName(), \"diSystemNumber\");
//          this.enabled = false;
//          cmdApply.visible = true;
          break;
        }
        case PROJ_TYPE_REDU_DIST:
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_redu.pnl\",
                    \"redu\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = \"redu\";
          gMap[\"lastIndex\"] = gMap[\"index\"] ;
          setInputFocus(myModuleName(), myPanelName(), \"reHost_1_2\");
          break;
        }
        case PROJ_TYPE_UI:
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_ui.pnl\",
                    \"ui\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = \"ui\";
          gMap[\"lastIndex\"] = gMap[\"index\"] ;
          setInputFocus(myModuleName(), myPanelName(), \"cmdProjectUi\");
//          this.enabled = false;
//          cmdApply.visible = true;
          break;
        }
        case PROJ_TYPE_DRIVER:
        {
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_driver.pnl\",
                    \"driver\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = \"driver\";
          gMap[\"lastIndex\"] = gMap[\"index\"] ;
          setInputFocus(myModuleName(), myPanelName(), \"cmdProjectDriver\");
//          this.enabled = false;
//          cmdApply.visible = true;
          break;
        }
        default:
        {
          paAddSymbolCreate();
          break;
        }
      }
      break;
    }
/*
    case \"redu_dist\":
    {
      iErr = check_redu();
      if ( iErr ) break;
      cmdPrev.enabled = true;
      removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
      stepY += 40;
      polStep.position(stepX,stepY); setHacks();
      addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_dist.pnl\",
                \"dist\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
      gMap[\"index\"] = \"dist\";
      gMap[\"lastIndex\"] = gMap[\"index\"] ;
      setInputFocus(myModuleName(), myPanelName(), \"diSystemNumber\");
//      this.enabled = false;
//      cmdApply.visible = true;
      break;
    }
*/
    case \"ssa\":
    {
      iErr = check_ssa();
      if ( iErr ) break;

      cmdPrev.enabled = true;
      removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
      stepY += 40;
      polStep.position(stepX,stepY); setHacks();

      addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_certSetting.pnl\",
                \"ssaManager\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
      gMap[\"index\"] = \"ssaManager\";
      gMap[\"lastIndex\"] = gMap[\"index\"];
      break;
    }
    case \"ssaManager\":
    {
      iErr = check_certificateSettings();
      if ( iErr ) break;

      if(gMap[\"secCertSetting\"] == 0)
      {
        removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
        stepY += 40;
        polStep.position(stepX,stepY); setHacks();
        gMap[\"index\"] = \"ssaManager\";
        gMap[\"lastIndex\"] = gMap[\"index\"];
        paAddSymbolCreate();
      }
      else
      {
        removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
        addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_certificates.pnl\",
                \"certificates\", makeDynString(), 138, 0, 0.0, 1.0, 1.0);
        gMap[\"index\"] = \"certificates\";
        gMap[\"lastIndex\"] = gMap[\"index\"];
      }
      break;
    }
    case \"certificates\":
    {
      if(gMap[\"secCertSetting\"] == 1)
      {
        iErr = check_fileBasedCertificates();
      }
      else
      {
        iErr = check_storeBasedCertificates();
      }
      if ( iErr ) break;

      cmdPrev.enabled = true;
      removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
      stepY += 40;
      polStep.position(stepX,stepY); setHacks();

      paAddSymbolCreate();
      break;
    }
    case \"redu\":
    {
      iErr = check_redu();
      if ( iErr ) break;
      switch ( iProjectType )
      {
        case PROJ_TYPE_REDU:
        {
          if ( iErr ) break;
          cmdPrev.enabled = true;
          removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
          stepY += 40;
          polStep.position(stepX,stepY); setHacks();
          paAddSymbolCreate();
          break;
        }
        case PROJ_TYPE_REDU_DIST:
        {
          cmdPrev.enabled = true;
          removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
          stepY += 40;
          polStep.position(stepX,stepY); setHacks();
          addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_dist.pnl\",
                    \"dist\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
          gMap[\"index\"] = \"dist\";
          gMap[\"lastIndex\"] = gMap[\"index\"] ;
          setInputFocus(myModuleName(), myPanelName(), \"diSystemNumber\");
          break;
        }
      }
      break;
    }
    case \"copy_redu\":
    {
      iErr = check_copy_redu();
      if ( iErr < 0 ) break;
      cmdPrev.enabled = true;
      removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
      stepY += 40;
      polStep.position(stepX,stepY); setHacks();
      paAddSymbolCreate();
      break;
    }
    case \"dist\":
    {
      iErr = check_dist();
      if ( iErr ) break;

      gMap[\"diSystemName\"] = diSystemName.text;
      cmdPrev.enabled = true;
      removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
      stepY += 40;
      polStep.position(stepX,stepY); setHacks();
      paAddSymbolCreate();
      break;
    }
    case \"ui\":
    {
      iErr = check_ui();
      if ( iErr < 0 ) break;
      cmdPrev.enabled = true;
      stepY += 40;
      polStep.position(stepX,stepY); setHacks();
      removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
      paAddSymbolCreate();
      break;
    }
    case \"driver\":
    {
      iErr = check_driver();
      if ( iErr ) break;
      cmdPrev.enabled = true;
      stepY += 40;
      polStep.position(stepX,stepY); setHacks();
      removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
      paAddSymbolCreate();
      break;
    }
    case \"remote\":
    {
      iErr = check_remote();
      if ( iErr ) break;
      cmdPrev.enabled = true;
      removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
      stepY += 40;
      polStep.position(stepX,stepY); setHacks();
      paAddSymbolCreate();
      break;
    }
  }
}

paAddSymbolCreate()
{
  //removeSymbol(myModuleName(), myPanelName(), gMap[\"index\"]);
  addSymbol(myModuleName(), myPanelName(), \"projAdmin/pa_ref_create.pnl\",
            \"create\", makeDynString(), 130, 0, 0.0, 1.0, 1.0);
  gMap[\"index\"] = \"create\";
  delay(0,1);
  this.enabled = false;
  cmdApply.visible = true;
}
" 0
 E E E
13 86
"cmdApply"
""
1 385 281 E E E 1 E 0 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
8
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  383 279 471 307

T 
4
LANG:10001 2 OK
LANG:10004 2 OK
LANG:10000 2 OK
LANG:10027 2 OK
"main()
{
  setThemeShapes(false);

  int  iErr;
  bool ok;

  if (! mappingHasKey(gMap, \"index\"))
    return;

  switch ( gMap[\"index\"] )
  {
    case \"general\":
    {
      iErr = check_general();
      break;
    }
    case \"ssa\":
    {
      iErr = check_ssa();
      break;
    }
    case \"ssaManager\":
    {
      iErr = check_certificateSettings();
      break;
    }
    case \"certificates\":
    {
      if(gMap[\"secCertSetting\"] == 1)
      {
        iErr = check_fileBasedCertificates();
      }
      else
      {
        iErr = check_storeBasedCertificates();
      }
      break;
    }
    case \"redu\":
    {
      iErr = check_redu();
      break;
    }
    case \"copy_redu\":
    {
      iErr = check_copy_redu();
      break;
    }
    case \"dist\":
    {
      iErr = check_dist();
      break;
    }
    case \"ui\":
    {
      iErr = check_ui();
      break;
    }
    case \"driver\":
    {
      iErr = check_driver();
      break;
    }
    case \"remote\":
    {
      iErr = check_remote();
      break;
    }
  }

  if ( iErr )
    return;

  int         i, x, y, distNumber = 0;
  string      s, s2, sErr = \"\", sSep = (_WIN32)?\"\\\\\":\"/\",
              distName = \"\",
              projName, sConfig = PVSS_PATH + \"/config/config\", sLog,
              pathName;
  dyn_int     di;
  dyn_anytype daResult;
  dyn_anytype da, daa;
  dyn_string  proj, version, projpath, dsLangs, dsProgs, reduHosts, dsValues;;
  int         err = paGetProjs(proj, version, projpath);
  dyn_errClass dErr;

  int        iErr, projType;
  bool       redundant, distributed = false;
  string     dataConf;

  // creating project
  cmdApply.enabled = false;
  cmdCancel.enabled = false;
  cmdNext.enabled = false;
  cmdPrev.enabled = false;

  busyBar.visible = true;

  crMessage.text = getCatStr(\"pmon\", \"creatingProject\");

  // copy redundant project--------------------------------------------
  if ( gMap[\"projectType\"] == PROJ_TYPE_REDU_COPY )
  {
//!!!
    string     sConfig = gMap[\"crSource\"] + \"/config/config\";
    dyn_string dsKeys = makeDynString(\"\"), dsValues;
    string     sServer, sProject, sTarget = gMap[\"crTarget\"];

    iErr = paGetHostProjFromPath(sTarget, sServer, sProject);

    strreplace(sTarget, sProject, \"\");
    iErr = paCopyProj(gMap[\"crSource\"], sProject, sTarget, true);

    dErr = getLastError();
    if ( iErr || dynlen(dErr) )
    {
      if ( dynlen(dErr) )
        errorDialog(dErr);
      paEndWithError(\"errCopy\", iErr);
      return;
    }

    crMessage.text = getCatStr(\"pmon\", \"projCreated\");

    busyBar.visible = false;

    getChildPanelCentralPosition(\"vision/MessageInfo1\", x, y);
    gParams[1]  = myModuleName();
    gParams[3]  = myPanelName();
    gParams[5]  = x;
    gParams[6]  = y;
    gParams[2]  = \"vision/MessageInfo1\";
    gParams[4]  = \"Information\";
    gParams[9]  = makeDynString(getCatStr(\"pmon\",\"projCreated\"));
    childPanel(gParams, daResult);
    /*daa[1] = 1;
    daa[2] = sProject;

    da[1] = myModuleName();
    da[2] = myPanelName();
    da[3] = daa;
    panelOff(da);*/

    getChildPanelCentralPosition(\"vision/MessageInfo1\", x, y);
    gParams[1]  = myModuleName();
    gParams[3]  = myPanelName();
    gParams[5]  = x;
    gParams[6]  = y;
    gParams[2]  = \"vision/MessageInfo1\";
    gParams[4]  = \"Information\";
    gParams[9]  = makeDynString(getCatStr(\"pmon\",\"projCreatedSSLInfo\"));
    childPanel(gParams, daResult);
    daa[1] = 1;
    daa[2] = sProject;

    da[1] = myModuleName();
    da[2] = myPanelName();
    da[3] = daa;
    panelOff(da);

    return;
  }
  // client via remote install--------------------------------------------
  if ( gMap[\"projectType\"] == PROJ_TYPE_REMOTE )
  {
    system(\"start iexplore \" + gMap[\"riConnection\"]);
//    system(\"start /b cmd /c http://einstein.etm.at\");
//    system(\"start iexplore http://einstein.etm.at\");
    paEndWithError(\"\", 0);

    return;
  }

  // creating new project--------------------------------------------
  // collecting languages
  // langs always sorted (iso names)
  dsLangs = gMap[\"geLangsSel\"];
  dynSortAsc(dsLangs);

  // dist settings
  if ( gMap[\"projectType\"] == PROJ_TYPE_DIST || gMap[\"projectType\"] == PROJ_TYPE_REDU_DIST )
  {
    distNumber = gMap[\"diSystemNumber\"];
    distName   = gMap[\"diSystemName\"];
  }

  //ceck projType for client projects
  if (gMap[\"projectType\"] == PROJ_TYPE_UI )
  {
    if ( gMap[\"uiVisuPara\"] )
      projType = PA_PROJ_TYPE_UI_PARA;
    else
      projType = PA_PROJ_TYPE_UI_VISU;
  }
  else if ( gMap[\"projectType\"] == PROJ_TYPE_DRIVER )
  {
    projType = PA_PROJ_TYPE_DRIVER;
  }

  // check redu settings --------------------------------------------
  if ( gMap[\"projectType\"] == PROJ_TYPE_REDU || gMap[\"projectType\"] == PROJ_TYPE_REDU_DIST )
  {
    reduHosts[1] = gMap[\"reHost_1_1\"];
    if ( gMap[\"reRedunet\"] )
      reduHosts[1] +=\",\"+gMap[\"reHost_2_1\"];

    reduHosts[2] = gMap[\"reHost_1_2\"];
    if ( gMap[\"reRedunet\"] )
      reduHosts[2] +=\",\"+gMap[\"reHost_2_2\"];
  }

  dyn_string dsVisibleSystemIds;

  // check dist settings --------------------------------------------
  if ( gMap[\"projectType\"] == PROJ_TYPE_DIST || gMap[\"projectType\"] == PROJ_TYPE_REDU_DIST )
  {
    distributed = 1;

    for (int i=1; i<=dynlen(gMap[\"diPeers\"]); i++)
    {
      dyn_string ds = strsplit(gMap[\"diPeers\"][i], \" \");
      dsValues[i] = \"\\\"\" + ds[2] + \"\\\" \" + ds[1];
    }



    for (int i=1; i<=dynlen(gMap[\"diVisible\"]); i++)
    {
      if ( gMap[\"diVisible\"][i] )
        dynAppend(dsVisibleSystemIds, strsplit(gMap[\"diPeers\"][i], \" \")[1]);
    }
  }

  //create the project
  if (gMap[\"projectType\"] == PROJ_TYPE_LEGACY ||
      gMap[\"projectType\"] == PROJ_TYPE_NORMAL ||
      gMap[\"projectType\"] == PROJ_TYPE_REDU ||
      gMap[\"projectType\"] == PROJ_TYPE_DIST ||
      gMap[\"projectType\"] == PROJ_TYPE_REDU_DIST )
  {

    //check root user password
    getChildPanelCentralPosition(\"vision/MessageInfo\", x, y);
    gParams[1]  = myModuleName();
    gParams[3]  = myPanelName();
    gParams[5]  = x;
    gParams[6]  = y;
    gParams[2]  = \"vision/MessageInfo\";
    gParams[4]  = \"Information\";
    gParams[9]  = makeDynString(getCatStr(\"pmon\",\"setRootPassword\"),getCatStr(\"para\",\"yes\"),getCatStr(\"para\",\"no\"));
    childPanel(gParams, daResult);

    if ( dynlen(daResult) > 0 && daResult[1] == 1 )
    {
      dynClear(daResult);

      getChildPanelCentralPosition(\"projAdmin/project_admin_root_pwd.pnl\", x, y);
      gParams[1]  = myModuleName();
      gParams[3]  = myPanelName();
      gParams[5]  = x;
      gParams[6]  = y;
      gParams[2]  = \"projAdmin/project_admin_root_pwd.pnl\";
      gParams[4]  = \"\";
      gParams[9]  = makeDynString();
      childPanel(gParams, daResult);

      if ( dynlen(daResult) == 0 || ( dynlen(daResult) > 0 && daResult[1] == 0 ) )
      {
        // creating project
        cmdApply.enabled = true;
        cmdCancel.enabled = true;
        cmdNext.enabled = true;
        cmdPrev.enabled = true;

        busyBar.visible = false;

        crMessage.text = \"\";
        return;
      }
    }

    if ( dynlen(daResult) > 1 && daResult[1] == 1 )// write password into importfile
    {
      string sUpdateRootPW = \"modify_rootpw.txt\";
      string sUpdateTemp = \"modify_temp.txt\";
      string sUpdatePath1, sUpdatePath2, sUpdateVar = \"~\";
      string sPwHash = daResult[2];

      sUpdatePath1 = WINCCOA_PATH  + \"dbdfiles/version_\" + VERSION + \"/\" + sUpdateRootPW;
      sUpdatePath2 = gMap[\"gePath\"]  + sUpdateTemp;

      string sResult;
      fileToString(sUpdatePath1, sResult);

      strreplace(sResult, sUpdateVar, sPwHash);

      file f = fopen(sUpdatePath2, \"w+\");
      fputs(sResult, f);
      fclose(f);
    }

    dyn_mapping configParams;
    if (gMap[\"projectType\"] == PROJ_TYPE_NORMAL)
    {
      if(gMap[\"secCertSetting\"] == 0)
      {
        if(!mkdir(gMap[\"certificatePath\"])) //create cert path, if not successful end PA
          paEndWithError(\"errCertCreation\", rc);
	  
        //create at first certificates because we check in create config param if they exists
        createRootCertificate();
        gMap[\"mxProxyRootCertPath\"] = gMap[\"certificatePath\"] + \"/\" + \"root-cert.pem\";
        gMap[\"ssaManagerUserChainPath\"] = gMap[\"certificatePath\"] + \"/\" + \"root-cert.pem\";

        createHostCertificate(\"host-cert.pem\", \"host-key.pem\"); //mxproxy
        gMap[\"mxProxyHostCertPath\"] = gMap[\"certificatePath\"] + \"/\" + \"host-cert.pem\";
        gMap[\"mxProxyKeyCertPath\"] = gMap[\"certificatePath\"] + \"/\" + \"host-key.pem\";

        createHostCertificate(\"certificate.pem\", \"privkey.pem\"); //httpserver
        gMap[\"wsCertPath\"] = gMap[\"certificatePath\"] + \"/\" + \"certificate.pem\";
        gMap[\"wsKeyPath\"] = gMap[\"certificatePath\"] + \"/\" + \"privkey.pem\";

        if(!gMap[\"ssaUI\"])
        {
          createHostCertificate(\"user-cert.pem\", \"user-key.pem\"); //ssa
          gMap[\"ssaManagerUserCertPath\"] = gMap[\"certificatePath\"] + \"/\" + \"user-cert.pem\";
          gMap[\"ssaManagerUserKeyPath\"] = gMap[\"certificatePath\"] + \"/\" + \"user-key.pem\";
        }
      }
      createConfigParams(configParams);
    }

    addConfigParams(configParams);

    iErr =  paCreateProjExtend(
        gMap[\"geProject\"],  //projNameTarget
        gMap[\"gePath\"],     //targetInstallDir
        dsLangs,            //languages
        distNumber,         //sysNum
        distName,           //sysName
        reduHosts,          //reduHosts
        makeDynString(),    //subProjs  -- not used yet
        gMap[\"geRunnable\"], //runnable
        gMap[\"geRemote\"],   //riable
        distributed,        //distributed
        dsValues,           //distPeers
        true,               //registerProj
        true,               //deleteFirstIfExists
        0,  //pmonPort --> use default
        0,  //dataPort --> use default
        0,  //eventPort --> use default
        0,  //reduPort --> use default
        0,  //splitPort --> use default
        0,   //distPort --> use default
        configParams,
        dsVisibleSystemIds,
        gMap[\"geNGA\"]   //use NGA
        );

    if (gMap[\"projectType\"] == PROJ_TYPE_NORMAL)
    {
      if(gMap[\"secCertSetting\"] == 0) //auto generated, copy to config folder
      {
        copyCertificates();
      }
      else if(gMap[\"secCertSetting\"] == 1 || gMap[\"secCertSetting\"] == 2) //file based and wincert store
      {
        copyWebserverCertificates();
      }
      paSsaManageProgsEntries(gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/progs\",
                              gMap[\"ssaHost\"], gMap[\"ssaPort\"], (gMap[\"ssaWebserver\"]));
    }
  }
  else if (gMap[\"projectType\"] == PROJ_TYPE_UI)
  {
    iErr =  paCreateClientProjExtend(
        gMap[\"uiServer\"],   //serverProj
        \"\",                 //serverHost
        gMap[\"geProject\"],  //projNameTarget
        gMap[\"gePath\"],     //targetInstallDir
        projType,           //projType
        makeDynString(),    //subProjs  -- not used yet
        gMap[\"uiMannum\"],   //uiMannum
        gMap[\"uiPanel\"],    //uiPanel
        gMap[\"geRunnable\"], //runnable
        gMap[\"geRemote\"],   //riable
        true,               //registerProj
        true,               //deleteFirstIfExists
        0  //pmonPort --> use default
        );
  }
  else if (gMap[\"projectType\"] == PROJ_TYPE_DRIVER)
  {
    iErr =  paCreateClientProjExtend(
        gMap[\"drProject\"],                 //serverProj
        \"\",  //serverHost
        gMap[\"geProject\"],  //projNameTarget
        gMap[\"gePath\"],     //targetInstallDir
        projType,           //projType
        makeDynString(),    //subProjs  -- not used yet
        gMap[\"drMannum\"],   //uiMannum
        gMap[\"drDriver\"],   //uiPanel
        gMap[\"geRunnable\"], //runnable
        gMap[\"geRemote\"],   //riable
        true,               //registerProj
        true,               //deleteFirstIfExists
        0  //pmonPort --> use default
        );
  }

  if (iErr<0)  //Error creating project
  {
    paEndWithError(\"errCreate\", iErr);
    return;
  }

  // setting user name password--------------------------------------------
  if ( gMap[\"geUser\"] != \"\" || gMap[\"gePassword\"] != \"\" )
    pmonSetAuth(gMap[\"geProject\"], \"\", \"\", gMap[\"geUser\"], gMap[\"gePassword\"], iErr);
  if ( iErr )
  {
    paEndWithError(\"errSetPwd\", iErr);
    return;
  }

  // OK, I can quit :))
  crMessage.text = getCatStr(\"pmon\", \"projCreated\");
  busyBar.visible = false;

  getChildPanelCentralPosition(\"vision/MessageInfo1\", x, y);
  gParams[1]  = myModuleName();
  gParams[3]  = myPanelName();
  gParams[5]  = x;
  gParams[6]  = y;
  gParams[2]  = \"vision/MessageInfo1\";
  gParams[4]  = \"Information\";
  gParams[9]  = makeDynString(getCatStr(\"pmon\",\"projCreated\"));
  childPanel(gParams, daResult);
  daa[1] = 1;
  daa[2] = gMap[\"geProject\"];

  da[1] = myModuleName();
  da[2] = myPanelName();
  da[3] = daa;
  panelOff(da);
}


//-------------------------------------------------------------------------------
// mapping as parameter for config entries in paCreateProjExtend() function:
//       [filename]        Filename of the config (e.g \"config\" or \"config.level\") in PROJ_PATH+CONFIG_REL_PATH
//       [section]         section in the config file
//       [key]             key to insert
//       [value]           value to insert
//     and following optional:
//       [op]              where the key should be inserted appendent of searchKey:
//                         BEFORE_FIRST_KEY(1), BEFORE_LAST_KEY(2), AFTER_LAST_KEY(3),
//                         AFTER_FIRST_KEY(4),  BEFORE_FIRST_VALUE(5), AFTER_LAST_VALUE(6)
//       [searchKey]       key to search the insertpoint
//       [host]            (optional) hostname to set in e.g.: (host1) key = value
void createConfigParams(dyn_mapping &cp)
{
  int ix = 0;
  string projPath = gMap[\"gePath\"] + gMap[\"geProject\"]; //in projAdmin we have no PROJ_PATH

  // ========== general settings ==============
  if(gMap[\"secCertSetting\"] == 0) //auto generated
  {
    if(gMap[\"ssaUI\"])
    {
      cp[++ix][\"key\"] = \"accessControlPlugin\";
      cp[ix][\"value\"] = \"AccessControlPluginUser\";
    }
    else //ssa certificates are relative to the config folder
    {
      cp[++ix][\"key\"] = \"accessControlPlugin\";
      cp[ix][\"value\"] = \"AccessControlPlugin\";

      cp[++ix][\"key\"] = \"ssaChainFile\";
      cp[ix][\"value\"] = \"root-cert.pem\";

      cp[++ix][\"key\"] = \"ssaCertificate\";
      cp[ix][\"value\"] = \"file:user-cert.pem\";

      cp[++ix][\"key\"] = \"ssaPrivateKey\";
      cp[ix][\"value\"] = \"file:user-key.pem\";
    }
  }
  else if(gMap[\"secCertSetting\"] == 1) //only when filebased the config entry for proxy certs is needed
  {
    //set ssl certificates that are relative to the proj path and config
    cp[++ix][\"key\"] = \"securityMode\";
    cp[ix][\"value\"] = \"CERT\";

    cp[++ix][\"key\"] = \"sslCertificate\";
    cp[ix][\"value\"] = gMap[\"mxProxyHostCertPath\"] + \" \" +
                      gMap[\"mxProxyKeyCertPath\"]  + \" \" +
                      gMap[\"mxProxyRootCertPath\"];

    //set SSA config and certificates if necessary
    if(gMap[\"ssaUI\"])
    {
      cp[++ix][\"key\"] = \"accessControlPlugin\";
      cp[ix][\"value\"] = \"AccessControlPluginUser\";
    }
    else //ssa certificates are relative to the config folder
    {
      cp[++ix][\"key\"] = \"accessControlPlugin\";
      cp[ix][\"value\"] = \"AccessControlPlugin\";

      cp[++ix][\"key\"] = \"ssaChainFile\";
      cp[ix][\"value\"] = gMap[\"ssaManagerUserChainPath\"];

      cp[++ix][\"key\"] = \"ssaCertificate\";
      cp[ix][\"value\"] = \"file:\" + gMap[\"ssaManagerUserCertPath\"];

      cp[++ix][\"key\"] = \"ssaPrivateKey\";
      cp[ix][\"value\"] = \"file:\" + gMap[\"ssaManagerUserKeyPath\"];
    }
  }
  else //set wincert store
  {
    cp[++ix][\"key\"] = \"securityMode\";
    cp[ix][\"value\"] = \"WINCERT\";

    if(gMap[\"thumbprints\"])
    {
      cp[++ix][\"key\"] = \"winCertSearchBy\";
      cp[ix][\"value\"] = \"SHA1\";
    }

    cp[++ix][\"key\"] = \"winCert\";
    cp[ix][\"value\"] = gMap[\"mxProxyHostCertPath\"];

    cp[++ix][\"key\"] = \"winRootCA\";
    cp[ix][\"value\"] = gMap[\"mxProxyRootCertPath\"];

    if(gMap[\"ssaUI\"])
    {
      cp[++ix][\"key\"] = \"accessControlPlugin\";
      cp[ix][\"value\"] = \"AccessControlPluginUser\";
    }
    else
    {
      cp[++ix][\"key\"] = \"accessControlPlugin\";
      cp[ix][\"value\"] = \"AccessControlPlugin\";

      cp[++ix][\"key\"] = \"ssaCertCheck\";
      cp[ix][\"value\"] = \"chainPrefix=\" + gMap[\"ssaManagerUserChainPath\"];

      cp[++ix][\"key\"] = \"ssaCertificate\";
      cp[ix][\"value\"] = \"store:\" + gMap[\"ssaManagerUserCertPath\"];

      cp[++ix][\"key\"] = \"ssaPrivateKey\";
      cp[ix][\"value\"] = \"store:\" + gMap[\"ssaManagerUserCertPath\"];
    }
  }

  for (int i = ix; i > 0; i--)  // section \"general\" for all above
  {
    cp[i][\"section\"] = \"general\";
  }

  // ============ manager settings =============
  if (gMap[\"ssaWebserver\"])
  {
    cp[++ix][\"section\"] = \"httpServer\";
    cp[ix][\"key\"] = \"uiArguments\";
    cp[ix][\"value\"] = \"-p vision/login.pnl -centered -iconBar -menuBar -ssa\";
    cp[++ix][\"section\"] = \"httpServer\";
    cp[ix][\"key\"] = \"uiUsesMainServerAsFileServer\";
    cp[ix][\"value\"] = 0;

    cp[++ix][\"section\"] = \"webClient\";
    cp[ix][\"key\"] = \"httpsPort\";
    int port = gMap[\"ssaPort\"];
    cp[ix][\"value\"] = port;

    cp[++ix][\"section\"] = \"webClient\";
    cp[ix][\"key\"] = \"httpPort\";
    cp[ix][\"value\"] = 0;

    cp[++ix][\"section\"] = \"webClient\";
    cp[ix][\"key\"] = \"clientSideAuth\";
    cp[ix][\"value\"] = 0;
  }

  cp[++ix][\"section\"] = \"ui\";
  cp[ix][\"key\"] = \"httpServer\";
  cp[ix][\"value\"] = \"https://\" + gMap[\"ssaHost\"] + \":\" + gMap[\"ssaPort\"];

  for (int i = dynlen(cp); i > 0; i--)  // project config file for all entries
  {
    cp[i][\"filename\"] = gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/config\";
  }
}

void addConfigParams(dyn_mapping &cp)
{
  int iNum;
  getValue(\"pa_ref_theme.rbTheme\", \"number\", iNum);
  gMap[\"uiTheme\"] = iNum;

  int ix = 0;
  string projPath = gMap[\"gePath\"] + gMap[\"geProject\"]; //in projAdmin we have no PROJ_PATH

  if (gMap[\"uiTheme\"] == 1)
  {
    cp[++ix][\"section\"] = \"ui\";
    cp[ix][\"key\"] = \"activeIconTheme\";
    cp[ix][\"value\"] = \"\";
  }

  for (int i = dynlen(cp); i > 0; i--)  // project config file for all entries
  {
    cp[i][\"filename\"] = gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/config\";
  }
}

//-------------------------------------------------------------------------------
// copy webserver certificates to proj dir because path is hardcoded
void copyWebserverCertificates()
{
  int ok = remove(gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/host-cert.pem\"); //mxproxy default cert
  if(ok == 0)
    ok = remove(gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/host-key.pem\"); //mxproxy default key
  if(ok == 0)
    ok = remove(gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/root-cert.pem\"); //ca default cert
  if(ok == 0)
    ok = remove(gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/certificate.pem\"); //webserver default cert
  if(ok == 0)
    ok = copyFile(gMap[\"wsCertPath\"], gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/certificate.pem\");
  if(ok == 1)
    ok = copyFile(gMap[\"wsKeyPath\"], gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/privkey.pem\");

  if (ok != 1)
    paEndWithError(\"errCopyCertificates\", -1);
}

void copyCertificates()
{
  int ok = remove(gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/host-cert.pem\"); //mxproxy default cert
  if(ok == 0)
    ok = remove(gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/host-key.pem\"); //mxproxy default key
  if(ok == 0)
    ok = remove(gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/root-cert.pem\"); //ca default cert
  if(ok == 0)
    ok = remove(gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/certificate.pem\"); //webserver default cert
  if(ok == 0)
    ok = copyFile(gMap[\"mxProxyRootCertPath\"], gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/\");
  if(ok == 1)
    ok = copyFile(gMap[\"mxProxyHostCertPath\"], gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/\");
  if(ok == 1)
    ok = copyFile(gMap[\"mxProxyKeyCertPath\"], gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/\");
  if(ok == 1)
    ok = copyFile(gMap[\"ssaManagerUserCertPath\"], gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/\");
  if(ok == 1)
    ok = copyFile(gMap[\"ssaManagerUserKeyPath\"], gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/\");
  if(ok == 1)
    ok = copyFile(gMap[\"wsCertPath\"], gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/certificate.pem\");
  if(ok == 1)
    ok = copyFile(gMap[\"wsKeyPath\"], gMap[\"gePath\"] + gMap[\"geProject\"] + \"/config/privkey.pem\");

  if(ok != 1)
    paEndWithError(\"errCopyCertificates\", -1);
}

//-------------------------------------------------------------------------------
// create the root certificates in the given directory
void createRootCertificate()
{
  string country = \"AT\";
  string province = \"Burgenland\";
  string locality = \"Eisenstadt\";
  string organization = \"ETM\";
  string department = \"R&D\";
  string cn = \"root-cert\";

  string keyFile = gMap[\"certificatePath\"] + \"/\" + \"root-privkey.pem\";
  string pemFile = gMap[\"certificatePath\"] + \"/\" + \"root-cert.pem\";

  string setOpenSSLPath = \"set OPENSSL_CONF=\" + getPath(BIN_REL_PATH, \"openssl.cnf\");
  string cmd = setOpenSSLPath + \"&\" + \"openssl genrsa -aes256 -out \\\"\" + keyFile + \"\\\" -passout pass:\" + gMap[\"certificatePassword\"] + \" 4096 \";

  int rc;
  string sOut, sErr;
  rc = system(cmd, sOut, sErr);
  if(rc == 0) //create ca with validity of 40 years
  {
    string param = \"-subj /C=\\\"\"+ country + \"\\\"/ST=\\\"\" + province + \"\\\"/L=\\\"\" + locality +
                   \"\\\"/O=\\\"\" + organization + \"\\\"/OU=\\\"\" + department + \"\\\"/CN=\\\"\" + cn + \"\\\"\";
    cmd = setOpenSSLPath + \"&\" + \"openssl req -new -x509 -days \" + 14609 + \" -key \\\"\" + keyFile +
            \"\\\" -passin pass:\" + gMap[\"certificatePassword\"] + \" -out \\\"\" + pemFile + \"\\\" \" + param;
    rc = system(cmd, sOut, sErr);
  }
  if((rc != 0) && (sErr != \"\")    ||
     (access(keyFile, F_OK) != 0) ||
     (access(pemFile, F_OK) != 0))
  {
    // throw output in logfile
    strreplace(sErr, \"\\n\", \"; \");
    throwError(makeError(\"SSLCerts\", PRIO_WARNING, ERR_CONTROL, 1, sErr));

    paEndWithError(\"errCertCreation\", rc);
  }
}

//-------------------------------------------------------------------------------
// create the host certificates in the given directory with the given name
void createHostCertificate(string pemFileName, string keyFileName)
{
  string country = \"AT\";
  string province = \"Burgenland\";
  string locality = \"Eisenstadt\";
  string organization = \"ETM\";
  string department = \"R&D\";
  string cn = pemFileName;

  string subjectAltName;
  subjectAltName += \"authorityKeyIdentifier=keyid,issuer\\n\";
  subjectAltName += \"basicConstraints=CA:FALSE\\n\";
  subjectAltName += \"keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\\n\";
  subjectAltName += \"subjectAltName = @alt_names\\n\";
  subjectAltName += \"[alt_names]\\n\";
  subjectAltName += \"DNS.1 = localhost\\n\";
  subjectAltName += \"DNS.2 = www.etm.at\\n\";

  file fileSubjectAltName;
  fileSubjectAltName = fopen(gMap[\"certificatePath\"] + \"/\" + \"domains.ext\", \"w+\");
  fputs(subjectAltName, fileSubjectAltName);
  fclose(fileSubjectAltName);

  string pemFile = gMap[\"certificatePath\"] + \"/\" + pemFileName;
  string keyFile = gMap[\"certificatePath\"] + \"/\" + keyFileName;
  string csrFile = pemFile;

  string param = \"-subj /C=\\\"\"+ country + \"\\\"/ST=\\\"\" + province + \"\\\"/L=\\\"\" + locality +
                 \"\\\"/O=\\\"\" + organization + \"\\\"/OU=\\\"\" + department + \"\\\"/CN=\\\"\" + cn + \"\\\"/roleOccupant=\\\"root\\\"\";

  string setOpenSSLPath = \"set OPENSSL_CONF=\" + getPath(BIN_REL_PATH, \"openssl.cnf\");
  string cmd = setOpenSSLPath + \"&\" + \"openssl genrsa -out \\\"\" + keyFile + \"\\\" 4096 \";

  int rc;
  string sOut, sErr;
  rc = system(cmd, sOut, sErr);
  if (rc == 0)
  {
    cmd = setOpenSSLPath + \"&\" + \"openssl req -new -key \\\"\" + keyFile + \"\\\" -out \\\"\" + csrFile + \"\\\" \" + param;
    rc = system(cmd, sOut, sErr);
  }
  if (rc == 0) //create cert with validity of 30 years
  {
    cmd = setOpenSSLPath + \"&\" + \"openssl x509 -req -days \" + 10957 + \" -in \\\"\" + csrFile + \"\\\" -CA \\\"\" + gMap[\"certificatePath\"] + \"/\" + \"root-cert.pem\" +
                   \"\\\" -CAkey \\\"\" + gMap[\"certificatePath\"] + \"/\" + \"root-privkey.pem\" + \"\\\" -CAcreateserial -extfile \" + gMap[\"certificatePath\"] + \"/domains.ext\" +
                   \" -passin pass:\" + gMap[\"certificatePassword\"] + \" -out \\\"\" + pemFile + \"\\\"\";
    rc = system(cmd, sOut, sErr);
  }
  if((rc != 0) && (sErr != \"\")    ||
     (access(keyFile, F_OK) != 0) ||
     (access(pemFile, F_OK) != 0))
  {
    // throw output in logfile
    strreplace(sErr, \"\\n\", \"; \");
    throwError(makeError(\"SSLCerts\", PRIO_WARNING, ERR_CONTROL, 1, sErr));

    paEndWithError(\"errCertCreation\", rc);
  }
}

//-------------------------------------------------------------------------------
paEndWithError(string sErr, int iErr, bool bLog = false, string sProjPath = \"\")
{
  int         x, y;
  dyn_anytype da, daa, daResult;

  busyBar.visible = false;

  if ( sErr != \"\" )
  {
    if ( !bLog )
    {
      pmon_warningOutput(sErr, iErr);
    }
    else
    {
      getChildPanelCentralPosition(\"vision/MessageWarning2\", x, y);
      gParams[1]  = myModuleName();
      gParams[3]  = myPanelName();
      gParams[2]  = \"vision/MessageWarning2\";
      gParams[4]  = getCatStr(\"para\",\"warning\");
      gParams[5]  = x;
      gParams[6]  = y;
      gParams[9]  = makeDynString(getCatStr(\"pmon\", \"errCreateEdit\"),
                                  getCatStr(\"general\", \"yes\"),
                                  getCatStr(\"general\", \"no\"));
      childPanel(gParams, daResult);

      if ( dynlen(daResult) > 0 && daResult[1] != 0 )
      {
        string sFile = sProjPath + \"/log/createDb.log\";

        paEditFile(sFile);
      }
    }
  }

  daa[1] = 0;

  da[1] = myModuleName();
  da[2] = myPanelName();
  da[3] = daa;
  panelOff(da);

  return;
}

paEditFile(string sFile)
{
  fileEditor(sFile);
}

" 0
 E E E
13 22
"cmdCancel"
""
1 474 281 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
4 0 0 0 27 0
E E E
8
4
LANG:10001 31 Discard changes and close panel
LANG:10004 27 放弃更改并关闭面板
LANG:10000 42 Änderungen verwerfen und Panel schliessen
LANG:10027 66 Отменить изменения и закрыть панель

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  472 279 560 307

T 
4
LANG:10001 6 Cancel
LANG:10004 6 取消
LANG:10000 9 Abbrechen
LANG:10027 16 Отменить
"main()
{
  dyn_anytype da, daa;
  
  removeGlobal(\"gMap\");
  removeGlobal(\"geLanguages\");
  removeGlobal(\"geds\");
  removeGlobal(\"geds2\");

  da[1] = myModuleName();
  da[2] = myPanelName();
  daa = makeDynString();
  da[3] = daa;
  panelOff(da);
}" 0
 E E E
13 23
"cmdHelp"
""
1 362 455 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
5 0 0 0 112 0
E E E
8
4
LANG:10001 16 Open online help
LANG:10004 18 打开在线帮助
LANG:10000 20 Online Hilfe öffnen
LANG:10027 29 Открыть справку

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0  263 278 293 308

P 
4294967295
"pictures/StandardIcons/help.svg"
4
LANG:10001 5 Hilfe
LANG:10004 6 帮助
LANG:10000 4 Help
LANG:10027 14 Справка
"main()
{
  std_help(\"project_admin_new\");

}" 0
 E E E
2 120
"stepSSA"
""
1 32 185 E E E 1 E 0 E N "_ButtonShadow" E N "_Transparent" E E
 E E
26 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 0 1 E U  0 E 34 187 82 218
0 2 0 "0s" 0 0 0 192 0 0  34 187 2
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 3 SSA
LANG:10004 3 SSA
LANG:10000 3 SSA
LANG:10027 18 Настройки
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 8 settings
LANG:10004 6 设置
LANG:10000 13 Einstellungen
LANG:10027 22 сертификата
2 121
"stepSSAmanager"
""
1 32 200 E E E 1 E 0 E N "_ButtonShadow" E N "_Transparent" E E
 E E
27 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "1"
E E 0 1 1 0 1 E U  0 E 34 202 94 233
0 2 0 "0s" 0 0 0 192 0 0  34 202 2
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 11 Certificate
LANG:10004 6 证书
LANG:10000 11 Zertifikats
LANG:10027 18 Настройки
4
LANG:10001 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,40,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,40,0,0,0,0,0
0 4
LANG:10001 8 settings
LANG:10004 6 设置
LANG:10000 13 Einstellungen
LANG:10027 22 сертификата
0
LAYER, 1 
4
LANG:10001 6 Layer2
LANG:10004 6 Layer2
LANG:10000 6 Layer2
LANG:10027 6 Layer2
0
LAYER, 2 
4
LANG:10001 6 Layer3
LANG:10004 6 Layer3
LANG:10000 6 Layer3
LANG:10027 6 Layer3
0
LAYER, 3 
4
LANG:10001 6 Layer4
LANG:10004 6 Layer4
LANG:10000 6 Layer4
LANG:10027 6 Layer4
0
LAYER, 4 
4
LANG:10001 6 Layer5
LANG:10004 6 Layer5
LANG:10000 6 Layer5
LANG:10027 6 Layer5
0
LAYER, 5 
4
LANG:10001 6 Layer6
LANG:10004 6 Layer6
LANG:10000 6 Layer6
LANG:10027 6 Layer6
0
LAYER, 6 
4
LANG:10001 6 Layer7
LANG:10004 6 Layer7
LANG:10000 6 Layer7
LANG:10027 6 Layer7
0
LAYER, 7 
4
LANG:10001 6 Layer8
LANG:10004 6 Layer8
LANG:10000 6 Layer8
LANG:10027 6 Layer8
0
3 0 "PANEL_REF0" -1
"layoutAlignment" "AlignCenter"
"" ""
"objects_parts/STD_OBJECTS/ButtonBarBackground.pnl" 0 274 T 25 1.140280561122244 0 1 0 0
0
0

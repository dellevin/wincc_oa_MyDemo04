<?xml version='1.0' encoding='UTF-8'?>
<panel>
 <properties>
  <prop name="Name">
   <prop name="de_AT.utf8"></prop>
   <prop name="en_US.utf8"></prop>
   <prop name="ru_RU.utf8"></prop>
  </prop>
  <prop name="Size">127 33</prop>
  <prop name="BackColor">_3DFace</prop>
  <prop name="RefPoint">15 20</prop>
  <prop name="InitAndTermRef">True</prop>
  <prop name="SendClick">False</prop>
  <prop name="RefFileName"></prop>
  <prop name="layoutType">None</prop>
 </properties>
 <events>
  <script name="Initialize" isEscaped="1"><![CDATA[//[SCRIPT_WIZARD_GENERATED
//[VARIABLE
string _text = &quot;&quot;;
langString dpGetVar1 = 0;
langString dpGetVar2 = 0;
//]
//[FUNCTION main
main()
{
  //[DOLLAR_PARAMETERS
  //$STRING_VALUEDPE 
  //$CONST_BOOL_USEDPEUNIT 
  //$CONST_BOOL_USEDPEDESCRIPTION 
  //]
  //[CONNECT
  if ( getUserPermission(1) )
  {
    //[BADVALUE
    //VALUEBAD_RULE:value_online_bad
    //VALUEBAD_RETURNWHENBAD:TRUE
    //VALUEBAD_RESETCOLORS:TRUE
    //]
    //[DPES
    //float $DP + $DPE_FLOAT_value + &quot;:_online.._value&quot; 
    //bool $DP + $DPE_FLOAT_value + &quot;:_online.._bad&quot; 
    //]
    dyn_string dpeList;
    dyn_string varList;
    string dpe1 = sdCheckDpe($DP + $DPE_FLOAT_value + &quot;:_online.._value&quot;);
    if ( strlen(dpe1) )
    {
      dynAppend(dpeList, dpe1);
      dynAppend(varList, &quot;value_online_value&quot;);
    }
    else
    {
    }

    string dpe2 = sdCheckDpe($DP + $DPE_FLOAT_value + &quot;:_online.._bad&quot;);
    if ( strlen(dpe2) )
    {
      dynAppend(dpeList, dpe2);
      dynAppend(varList, &quot;value_online_bad&quot;);
    }
    else
    {
    }

    if ( dpConnectUserData(&quot;cb_Callback&quot;, varList, true, dpeList) == -1 )    {
      sdShowBadConnect(&quot;txt_value&quot;, 3);
    }
  }
  else
  {
    //sdShowNoUserPermission
    sdShowNoUserPermission(&quot;txt_value&quot;, 3);
  }
  //]
}
//]
//[FUNCTION cb_Callback
void cb_Callback(
dyn_string varList, dyn_string dpeList, dyn_anytype valueList)
{
  //[VAR_LIST
  float value_online_value;
  bool value_online_bad;
  //]
  //[ASSIGN_VARS
  for (int i = 1; i &lt;= dynlen(varList); i++)
  {
    if ( varList[i] == &quot;value_online_value&quot; )
      value_online_value = valueList[i];
    else if ( varList[i] == &quot;value_online_bad&quot; )
      value_online_bad = valueList[i];
  }
  //]
  //[SHOW_BAD_VALUE
  bool statusBad = value_online_bad;
  if ( statusBad )
  {
    sdShowBadValue(&quot;txt_value&quot;, 3);
    return;
  }
  else
  {
    sdResetShowBadValue(&quot;txt_value&quot;, 3);
  }
  //]
  //[CODEBLOCK
  //sdDefineVariable(_text,&quot;string&quot;,&quot;&quot;);
  sdCalculate(1,value_online_value,_text);
  //]
  //[CONDITION_CODE
  //sdCondition($CONST_BOOL_USEDPEUNIT,&quot;showUnit&quot;,&quot;showUnit&quot;,&quot;FALSE&quot;);
  if ($CONST_BOOL_USEDPEUNIT)
    showUnit();
  //]
  //[CONDITION_CODE
  //sdCondition($CONST_BOOL_USEDPEDESCRIPTION,&quot;showDescription&quot;,&quot;showUnit&quot;,&quot;FALSE&quot;);
  if ($CONST_BOOL_USEDPEDESCRIPTION)
    showDescription();
  //]
  //[ANIMATION
  sdShowValue(&quot;txt_value&quot;, $DP + $DPE_FLOAT_value, _text, 0, &quot;&quot;, 0, &quot;&quot;);
  //]
}
//]
//[FUNCTION showUnit
/*

*/
void showUnit(
     )
{
  //[DPGET_CODE
  dyn_mapping sdDpGetParams;
  sdDpGetParams[1][&quot;DP&quot;]=$DP + $DPE_FLOAT_value;
  sdDpGetParams[1][&quot;TYPE&quot;]=5;
  sdDpGet(sdDpGetParams,$DP + $DPE_FLOAT_value,&quot;5&quot;,&quot;dpGetVar1&quot;);
  dpGetVar1 = sdDpGetParams[1][&quot;VALUE&quot;];
  //]
  //[CODEBLOCK
  //sdDefineVariable(&quot;dpGetVar1&quot;,&quot;langString&quot;,&quot;&quot;);
  sdCalculate(1,_text + &quot; &quot; + dpGetVar1,_text);
  //]
}
//]
//[FUNCTION showDescription
/*

*/
void showDescription(
     )
{
  //[DPGET_CODE
  dyn_mapping sdDpGetParams;
  sdDpGetParams[1][&quot;DP&quot;]=$DP + $DPE_FLOAT_value;
  sdDpGetParams[1][&quot;TYPE&quot;]=2;
  sdDpGet(sdDpGetParams,$DP + $DPE_FLOAT_value,&quot;2&quot;,&quot;dpGetVar2&quot;);
  dpGetVar2 = sdDpGetParams[1][&quot;VALUE&quot;];
  //]
  //[CODEBLOCK
  //sdDefineVariable(&quot;dpGetVar2&quot;,&quot;langString&quot;,&quot;&quot;);
  //]
  //[SETVALUE_CODE
  //sdSetValue(&quot;txt_value (TEXT_FIELD)&quot;, &quot;toolTipText&quot;, &quot;toolTipText&quot;, dpGetVar2);
  setValue(&quot;txt_value&quot;, &quot;toolTipText&quot;, dpGetVar2);
  //]
}
//]
//]]]></script>
 </events>
 <shapes>
  <shape Name="txt_value" shapeType="PRIMITIVE_TEXT" layerId="0">
   <properties>
    <prop name="serialId">2</prop>
    <prop name="Type"></prop>
    <prop name="RefPoint">8 8</prop>
    <prop name="Enable">True</prop>
    <prop name="Visible">True</prop>
    <prop name="ForeColor">_WindowText</prop>
    <prop name="BackColor">_Window</prop>
    <prop name="TabOrder">2</prop>
    <prop name="ToolTipText">
     <prop name="de_AT.utf8"></prop>
     <prop name="en_US.utf8"></prop>
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="sizePolicy">
     <sizePolicy vertical="Fixed" horizontal="Fixed"/>
    </prop>
    <prop name="snapMode">Point</prop>
    <prop name="DashBackColor">_Transparent</prop>
    <prop name="AntiAliased">False</prop>
    <prop name="LineType">[solid,oneColor,JoinBevel,CapButt,1]</prop>
    <prop name="FillType">[outline]</prop>
    <prop name="Location">8 8</prop>
    <prop name="Font">
     <prop name="de_AT.utf8">Arial,10,-1,5,50,0,0,0,0,0</prop>
     <prop name="ru_RU.utf8">Arial,10,-1,5,50,0,0,0,0,0</prop>
     <prop name="en_US.utf8">Arial,10,-1,5,50,0,0,0,0,0</prop>
     <prop name="zh_CN.utf8">Arial,10,-1,5,50,0,0,0,0,0</prop>
    </prop>
    <prop name="Text">
     <prop name="de_AT.utf8"></prop>
     <prop name="en_US.utf8"></prop>
     <prop name="ru_RU.utf8"></prop>
    </prop>
    <prop name="Distance">2</prop>
    <prop name="BorderOffset">2</prop>
    <prop name="Bordered">False</prop>
    <prop name="Fit">True</prop>
    <prop name="TextFormat">[0s,,,ALIGNMENT_BEGINNING]</prop>
   </properties>
  </shape>
 </shapes>
</panel>

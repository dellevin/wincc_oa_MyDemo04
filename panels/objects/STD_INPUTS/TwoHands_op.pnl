V 13
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
PANEL,-1 -1 164 86 N "Weiss" 2
"$bActivateChild"
"$sTypeNames"
"main()
{
  //Do NOT delete this! This is for the description of the Panelreference Input Panel.  
  //[DOLLAR_PARAMETERS
  //$bActivateChild DescriptionTwoHandButton_ChildPanel
  //$sTypeNames DescriptionTwoHandButton_TypeName
  //]
}" 0
 E E E E 1 -1 -1 0  16 16
""0  1
E "global dyn_string dsShapes_global, dsShapes_local, dsNames, dsAllModules, dsOpenModules, dsChildPanels;
global string sModuleName_local, sModuleName_global;
global bool bActivateChild;

//--------------------------------------------------------------------------------------------------------
getTwoHandShapes(dyn_string &dsVariable, string ModuleName, string PanelName)
{        
  dynClear(dsVariable);
  for (int i = 1 ; i<= dynlen(dsNames) ; i ++)
  {
    DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"ModuleName\",ModuleName, \"dsNames[\"+i+\"]\",dsNames[i]);  
    dynAppend(dsVariable, getShapes(ModuleName,PanelName,\"type\",dsNames[i]));
  }
  DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"dsVariable\",dsVariable);
}


//--------------------------------------------------------------------------------------------------------
setTwoHandShapes(dyn_string &dsVariable, bool status, string ModuleName, string PanelName)
{
  for (int i = 1 ; i<= dynlen(dsVariable) ; i ++)
  {
    setValue(ModuleName+\".\"+PanelName+\":\"+dsVariable[i],\"enabled\",status);
  }
}


//--------------------------------------------------------------------------------------------------------
//This function reads all Shapes with the defined type names and ste enable true or enable false.
//This works for root panels and child panels.
//--------------------------------------------------------------------------------------------------------
void setAllShapes(bool status)
{        
  DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"status\",status); 
  string ModuleName, PanleName;
  dyn_string dsVariable;
  
  //Set Shapes in Root panels
  for (int i = 1 ; i<=dynlen(dsOpenModules) ; i ++)
  {
    dynClear(dsVariable);
     DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"dsNames\",dsNames);
    for (int j = 1 ; j<= dynlen(dsNames) ; j ++)
    {
      dynAppend(dsVariable, getShapes(dsOpenModules[i],rootPanel(dsOpenModules[i]),\"type\",dsNames[j]));
       DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"dsVariable\",dsVariable,\"dsOpenModules [\"+i+\"]\"+dsOpenModules[i]);
    }
     DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"dsVariable [\"+i+\"]\",dsVariable[i]);
    
    for (int k = 1 ; k<=dynlen(dsVariable) ; k ++)
    {
      setValue(dsOpenModules[i]+\".\"+rootPanel(dsOpenModules[i])+\":\"+dsVariable[k],\"enabled\",status);
       DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,dsOpenModules[i]+\".\"+rootPanel(dsOpenModules[i])+\":\"+dsVariable[k],\"enabled\",status);
    }
  }
  
  
  //Set Shapes in Child Panels
  for (int l = 1 ; l<=dynlen(dsChildPanels) ; l ++)
  {
    dynClear(dsVariable);
    DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"dsNames\",dsNames);
    for (int m = 1 ; m<= dynlen(dsNames) ; m ++)
    {
      dyn_string temp = strsplit(dsChildPanels[l],\".\");
      
      dynAppend(dsVariable, getShapes(temp[1],temp[2],\"type\",dsNames[m]));
       DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"dsVariable in der Schleife\",dsVariable,\"dsOpenModules [\"+l+\"]\"+dsOpenModules[l]);
    }
     DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"dsVariable [\"+l+\"] nach der Schleife\",dsVariable);
    
    for (int n = 1 ; n<=dynlen(dsVariable) ; n ++)
    {
      setValue(dsChildPanels[l]+\":\"+dsVariable[n],\"enabled\",status);
      DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"Set Value(\",dsOpenModules[l]+\":\"+dsVariable[n],\",enabled,\",status+\")\");
    }
  }
  
}

//--------------------------------------------------------------------------------------------------------
void checkOpenModules()
{
  dynClear(dsOpenModules);
   DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"dsAllModules\",dsAllModules);
  
  for (int i=1; i<=dynlen(dsAllModules); i++)
  {
    if (isModuleOpen(dsAllModules[i]))
    dynAppend(dsOpenModules,dsAllModules[i]);
  }
   DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"dsOpenModules\",dsOpenModules);
  dynClear(dsAllModules);
  dsAllModules = dsOpenModules;
}

" 0
 2
"CBRef" "1"
"EClose" E
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
13 0
"ZweihandButton_SecureZone"
"HMIBTN"
1 3 7 E E E 1 E 1 E N {51,51,51} E N "_3DFace" E E
 E E
0 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"sizePolicy" "Preferred Preferred"
4
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
LANG:10004 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
LANG:10000 26 Arial,12,-1,5,50,0,0,0,0,0
LANG:10027 26 Arial,12,-1,5,50,0,0,0,0,0
0  3 5 159 79

P 
4294967295
"pictures/HMI/hand/zweihand_icon_65.png"
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E "main()
{
   checkOpenModules();
   setAllShapes(TRUE);
}

" 0
 "main()
{
    checkOpenModules();
    setAllShapes(FALSE);
}
" 0
 "main()
{
  string ModuleName, PanelName; 
  int ManagerNumber = myManNum();
  //Setzen des Bildes des Buttons
  int a,b;
  getValue(this.name(),\"size\",a,b);
  if(b<71){  
    if(b<51) 
    { 
      setValue (\"ZweihandButton_SecureZone\", \"buttonType\",BT_TEXT);
      setValue (\"ZweihandButton_SecureZone\", \"text\",\"UNLOCK\");      
    } 
    else 
    {      
      setValue (\"ZweihandButton_SecureZone\", \"buttonType\",BT_PIXMAP);
      setValue (\"ZweihandButton_SecureZone\", \"fill\", \"[pattern,[tile,png,HMI/hand/zweihand_icon_45.png]]\");
    }}
  else
  {
    setValue (\"ZweihandButton_SecureZone\", \"buttonType\",BT_PIXMAP);
    setValue (\"ZweihandButton_SecureZone\", \"fill\", \"[pattern,[tile,png,HMI/hand/zweihand_icon_65.png]]\");
  }
  
  if(usesTouchScreen())
  {
    string dp_ui=          \"_Ui_\"+ManagerNumber+\".RootPanelOrigOn.ModuleName\";  //Holt sich den Datenpunkt um zu merken wann im Modul ein neues Panel aufgeschalten wird.
    string dp_child =      \"_Ui_\"+ManagerNumber+\".ChildPanelOn.ModuleName\";
    string dp_childPanel = \"_Ui_\"+ManagerNumber+\".ChildPanelOn.PanelName\";
    string dp_panelOff =   \"_Ui_\"+ManagerNumber+\".PanelOff.PanelName\";
    string dp_ModuleOff =  \"_Ui_\"+ManagerNumber+\".PanelOff.ModuleName\";
  
    if (getDollarValue(\"$sTypeNames\") == \"\" || getDollarValue(\"$sTypeNames\") == \"$sTypeNames\")
    {    
      std_error(\"\", ERR_CONTROL,PRIO_WARNING,0,\"TwoHands_Operation, No type name defined!\");   
      this.enabled(FALSE);
      return;
    }
    else
    {
      dynClear(dsAllModules);
      dsNames=strsplit($sTypeNames,\";\");
      dsAllModules[1] = myModuleName();
      DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"dsAllModules= \"+dsAllModules);
      dpConnect(\"SetShapesCB\", TRUE, dp_ui);
      if ($bActivateChild)
      {
        DebugFTN(\"Zweihand\",__FUNCTION__,\"Childpanel = Jetzt kommt die Verbidung!!!!\"+$bActivateChild);         
        dpConnect(\"SetShapesChildCB\", FALSE, dp_child,dp_childPanel);
        dpConnect(\"ChildPanelOffCB\", FALSE, dp_panelOff,dp_ModuleOff);
      }
    }
  }
  else
  {
    std_error(\"\", ERR_CONTROL, PRIO_INFO,0,\"TwoHands_Operation, No touch mode enabled. To enable toch mode start the ui with \\\"-touch\\\"\");  
    this.enabled(FALSE);
    return;
  }
}
//############# ENDE MAIN ##############

//---------------------------------------------------------------------------------------------------------
void SetShapesCB(string dp, string &sModuleName_global)
{
  string ModuleName, PanelName;
  int ManagerNumber = myManNum();  
  DebugFTN(\"Zweihand\",__FUNCTION__,\"dsAllModules\",dsAllModules,\"sModuleName_global\",sModuleName_global);
  
  if(dynContains(dsAllModules,sModuleName_global) <= 0)
  {
    dyn_string ds = sModuleName_global;    
    dynAppend(dsAllModules,ds);
    DebugFTN(\"Zweihand\",__FUNCTION__,\"dsAllModules\",dsAllModules);
  }
  checkOpenModules();
  while(PanelName == \"\")
  {
    PanelName = rootPanel(sModuleName_global);
    delay(0,100);
  }
  getTwoHandShapes(dsShapes_global,sModuleName_global, PanelName);
  setTwoHandShapes(dsShapes_global,\"FALSE\",sModuleName_global, PanelName);

  DebugFTN(\"Zweihand\",__FUNCTION__,\"sModuleName_global\",sModuleName_global,\"PanelName\",PanelName);
}


//----------------------------------------------------------------------------------------------------------
void SetShapesChildCB(string dp, string &sModuleName_global, string dp2, string PanelName)
{
  int ManagerNumber = myManNum();  
  DebugFTN(\"Zweihand\",__FUNCTION__,\"dsAllModules\",dsAllModules,\"sModuleName_global\",sModuleName_global);

  if(dynContains(dsAllModules,sModuleName_global) <= 0)
  {
    dyn_string ds = sModuleName_global;
    dynAppend(dsAllModules,ds);
    DebugFTN(\"Zweihand\",__FUNCTION__,\"dsAllModules\",dsAllModules);
    
  }
    checkOpenModules();
    string s = sModuleName_global+\".\"+PanelName;
    if(dynContains(dsChildPanels,s) <= 0)
    {   
      dynAppend(dsChildPanels,s);
      DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"dsChildPanels\",dsChildPanels);
      DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"PanelNameX\",s);
    }
    getTwoHandShapes(dsShapes_global,sModuleName_global, PanelName);
    setTwoHandShapes(dsShapes_global,\"FALSE\",sModuleName_global, PanelName);
    DebugFTN(\"Zweihand\",__FUNCTION__,\"sModuleName_global\",sModuleName_global,\"PanelName\",PanelName);
}


//---------------------------------------------------------------------------------------------------------

void ChildPanelOffCB(string dp, string PanelName, string dp2, string ModulName)
{
  DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"Vor geschlossenem Panel\",\"dsChildPanels\",dsChildPanels);
  string s = ModulName+\".\"+PanelName;  
  if(dynContains(dsChildPanels,s)>=1)
  {
    int pos = dynContains(dsChildPanels,s);
    dynRemove(dsChildPanels,pos);
    DebugFTN(\"Zweihand\",__FUNCTION__,__LINE__,\"Nach geschlossenem Panel\",\"dsChildPanels\",dsChildPanels);
  }
}

" 0

0
LAYER, 1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 2 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 3 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 4 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 5 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 6 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 7 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
0

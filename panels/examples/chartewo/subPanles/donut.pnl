V 14
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
PANEL,-1 -1 835 554 N "white" 0
"main()
{
  //define colorscheme for the chart
  g_chartColors = makeDynString(\"SiemensNaturalGreenDark\",
                                  \"SiemensNaturalBlueLight\",
                                  \"SiemensNaturalBlueDark\",
                                  \"SiemensNaturalYellowLight\",
                                  \"SiemensNaturalRedLight\",
                                  \"SiemensNaturalGrayLight\");

  //define labels
  g_chartLabels = makeDynString(\"ON\", \"RAMPING\", \"OFF\", \"WARNING\", \"ERROR\", \"MAINTENANCE\");

  //define values
  g_serie1Values = makeDynFloat(3280, 160, 400, 220, 70, 350);

  //initialize and draw a chart name 'Chart_ewo2'
  initChart(\"Chart_ewo2\");

  //set title global font if exist
  if ( globalExists(\"g_chartTitleFont\") )
    title.font(g_chartTitleFont);

  //call randomization function for the chart name 'Chart_ewo2'
  randChart(\"Chart_ewo2\");
}
" 0
 E E E E 1 -1 -1 0  10 10
""0  1
E "dyn_string g_chartColors, g_chartLabels;
dyn_float g_serie1Values;

/*
  @authors Grygorii Sokhrannyi, Martin Koller
  Initialize and draw the chart for the given chart name
  @param sChartName Is the chart name which will be drawn
*/
initChart(string sChartName)
{
  //get shape of the chart
  shape shChart = getShape(sChartName);

  //set global fonts for the chart if exist
  if ( globalExists(\"g_chartLabelsFont\") )
  {
    shChart.font(g_chartLabelsFont);
    shChart.legendFont(g_chartLabelsFont);
    shChart.axesFont(g_chartLabelsFont);
    shChart.axesLabelFont(g_chartLabelsFont);
  }

  //remove axes if chart is redrawn
  shChart.removeAxes();

  //define some default colors for the case when user did not
  dyn_string dsColors = makeDynString(\"SiemensNaturalYellowLight\",
                                      \"SiemensNaturalYellowDark\",
                                      \"SiemensNaturalRedLight\",
                                      \"SiemensNaturalRedDark\",
                                      \"SiemensNaturalGreenLight\",
                                      \"SiemensNaturalGreenDark\",
                                      \"SiemensNaturalGrayLight\",
                                      \"SiemensNaturalGrayDark\",
                                      \"SiemensNaturalBlueLight\",
                                      \"SiemensNaturalBlueDark\");

  //check users values and attributes, if not found then generate random ones
  int iCount = 6;   //default number of variables

  if ( dynlen(g_serie1Values) > 0 )
    iCount = dynlen(g_serie1Values);   //found users variables -> redefine

  if ( dynlen(g_chartColors) <= 0 )
    g_chartColors = dsColors;

  for (int i = 1; i <= iCount; i++)
  {
    if ( dynlen(g_serie1Values) <= 0 )
      g_serie1Values[i] = rand();

    if ( dynlen(g_chartLabels) <= 0 )
      g_chartLabels[i] = \"value \" + (string)i;
  }

  //set values and labels for the chart
  shChart.setSeries(0, g_serie1Values, g_chartLabels);

  //set colors for all items
  for (int i = 1; i <= iCount; i++)
  {
    shChart.setItemFillColor(0, i-1, g_chartColors[i]);
  }
}

/*
  @author Grygorii Sokhrannyi
  Function that randomize the given chart with the given delay in seconds
  @param sChartName Is the chart name which will be drawn
*/
randChart(string sChartName)
{
  //randomize period in seconds
  const int iDelay = 3;

  //get the maximum value of serie
  float fMaxVal = getDynMax(g_serie1Values);

  //infinite loop for an infinite animation
  while ( 1 )
  {
    delay(iDelay);

    //regenerate all values
    for (int i = 1; i <= dynlen(g_serie1Values); ++i)
    {
      //generate random value
      int val = (int)(rand() * 0.001);

      //redefine chart values
      if ( val % 2 == 0 )
        g_serie1Values[i] = g_serie1Values[i] + val * i;
      else
      {
        g_serie1Values[i] = abs(g_serie1Values[i] - val * i);

        //the value is too small (< 2%) to decrease it, keep it initial
        if ( g_serie1Values[i] < fMaxVal * 0.02 )
          g_serie1Values[i] = g_serie1Values[i] + val * i;
      }
    }

    //redraw the chart with the generated values
    initChart(sChartName);
  }
}

/*
  @author Grygorii Sokhrannyi
  Function that return the maximum value of the given dynamic array
  @param dynValue Is the dynamic array to be examined
  @return maximum value in the array, if the array is an empty return 0
*/
anytype getDynMax(dyn_anytype dynValue)
{
  //check if array is not empty
  if ( dynlen(dynValue) <= 0 )
    return 0;

  anytype val = 0;

  //get the maximum value
  for (int i = 1; i <= dynlen(dynValue); ++i)
  {
    if ( dynValue[i] > val )
      val = dynValue[i];
  }
  return val;
}
" 0
 3
"CBRef" "1"
"EClose" E
"dpi" "96"
3 0 1 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
2 41
"title"
""
1 20 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
40 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

5
"sizePolicy" "Preferred Fixed"
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 0 1 3 2 1 E 1.068395125745398 0 5.300000000000001 -10.35805029815919 -42.00000000000001 0 E 20 10 780 20
0 2 2 "0s" 0 0 0 65 0 0  20 10 1
4
LANG:10001 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
LANG:10004 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
LANG:10000 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
LANG:10027 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
0 4
LANG:10001 25 Operational modes in 2017
LANG:10004 22 2018年的运营模式
LANG:10000 25 Operational modes in 2017
LANG:10027 25 Operational modes in 2017
29 5
"Chart_ewo2"
""
1 10.00672472715246 73.7863105175292 E E E 1 E 1 E N {0,0,0} E N "_Transparent" E E
 E E
4 0 0 0 0 0
E E E
0
4
LANG:10001 16 values chart-ewo
LANG:10004 16 values chart-ewo
LANG:10000 15 Werte Chart-Ewo
LANG:10027 16 values chart-ewo

29
"holeSize" "float 0.2"
"chartType" "enum 0"
"legendPosition" "enum 3"
"frameShape" "enum 1"
"startAngle" "float 0"
"axesColor" "color Yellow"
"showGrid" "bool TRUE"
"seriesSpacing" "int 20"
"defaultItemPen" "pen [none,oneColor,JoinBevel,CapProjecting,1]"
"defaultItemBrush" "fill [solid]"
"orientation" "enum 1"
"selectionBrush" "fill [gradient,[linear,pad,0,0,0.639,0.602,0,{0,0,0},1,{255,255,255}]]"
"animateValueChange" "bool TRUE"
"shownValueText" "enum 2"
"valueTextPosition" "enum 3"
"gridColor" "color {124,124,124,70}"
"stopAngle" "float 360"
"explosionOffset" "uint 0"
"animateHoverItem" "bool TRUE"
"holeFactor" "float 0.5"
"itemsSelectable" "bool TRUE"
"axesFont" "font Arial,-1,17,5,50,0,0,0,0,0,Regular"
"legendFont" "font Arial,-1,17,5,50,0,0,0,0,0,Regular"
"axesLabelFont" "font Arial,-1,17,5,50,0,0,0,0,0,Regular"
"segmentSpacing" "int 10"
"defaultLineType" "pen [none,oneColor,JoinBevel,CapProjecting,1]"
"lineWidth" "int 0"
"sizePolicy" "Preferred Preferred"
"layoutAlignment" "AlignNone"
4
LANG:10001 34 Arial,-1,17,5,50,0,0,0,0,0,Regular
LANG:10004 34 Arial,-1,17,5,50,0,0,0,0,0,Regular
LANG:10000 32 DejaVu Sans,-1,16,5,50,0,0,0,0,0
LANG:10027 32 DejaVu Sans,-1,15,5,50,0,0,0,0,0
0  9 73 825.0000000000001 544.0000000000001
9 Chart.ewo
0
E0
LAYER, 1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 2 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 3 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 4 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 5 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 6 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 7 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
4 0 "LAYOUT_GROUP0" -1
2 0 
5 41 

"S 5" "1 0 1 1"
"S 41" "0 0 1 1"
"" ""
0 3 0 0
0

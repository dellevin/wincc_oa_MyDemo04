V 14
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
PANEL,-1 -1 835 542 N "white" 0
"main()
{
 //X-axis title
  g_chartXaxes = \"Number of passengers\";

  //define variable attributes
  g_serie1Name = \"Blue line        \";
  g_serie1Values = makeDynInt(10456, 11653, 12074, 12013, 10896, 8195, 7098);
  g_serie1Color = \"SiemensNaturalBlueLight\";

  //define other variable attributes
  g_serie2Name = \"Red line\";
  g_serie2Values = makeDynInt(8456, 9752, 9900, 9927, 8957, 6456, 5051);
  g_serie2Color = \"SiemensNaturalRedLight\";

  //define axes labels
  g_chartLabels = makeDynString(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\");

  //initialize and draw a chart name 'Chart_ewo2'
  initChart(\"Chart_ewo2\");

  //set title global font if exist
  if ( globalExists(\"g_chartTitleFont\") )
    title.font(g_chartTitleFont);

  //call randomization function for the chart name 'Chart_ewo2'
  randChart(\"Chart_ewo2\");
}
" 0
 E E E E 1 -1 -1 0  10 10
""0  1
E "dyn_float g_serie1Values, g_serie2Values;
dyn_string g_chartLabels;
string g_serie1Color, g_serie2Color;
string g_serie1Name, g_serie2Name, g_chartXaxes;

/*
  @authors Grygorii Sokhrannyi, Martin Koller
  Initialize and draw the chart for the given chart name
  @param sChartName Is the chart name which will be drawn
*/
initChart(string sChartName)
{
  //get shape of the chart
  shape shChart = getShape(sChartName);

  //set global fonts for the chart if exist
  if ( globalExists(\"g_chartLabelsFont\") )
  {
    shChart.font(g_chartLabelsFont);
    shChart.legendFont(g_chartLabelsFont);
    shChart.axesFont(g_chartLabelsFont);
    shChart.axesLabelFont(g_chartLabelsFont);
  }

  //remove axes if chart is redrawn
  shChart.removeAxes();

  //define some default colors for the case when user did not
  dyn_string dsColors = makeDynString(\"SiemensNaturalYellowLight\",
                                      \"SiemensNaturalYellowDark\",
                                      \"SiemensNaturalRedLight\",
                                      \"SiemensNaturalRedDark\",
                                      \"SiemensNaturalGreenLight\",
                                      \"SiemensNaturalGreenDark\",
                                      \"SiemensNaturalGrayLight\",
                                      \"SiemensNaturalGrayDark\",
                                      \"SiemensNaturalBlueLight\",
                                      \"SiemensNaturalBlueDark\");

  //check users values and attributes, if not found then generate random ones
  int iCount = 6;   //default number of variables
  bool bNoValues = false;   //if users variables provided
  float fMax = 0;   //maximum axis value

  //check users values and define max axes value
  if ( dynlen(g_serie1Values) <= 0 )
    bNoValues = true;
  else
  {
    iCount = dynlen(g_serie1Values);

    //get maximum value of a series if its not set, needed for axes length
    fMax = getDynMax(g_serie1Values);

    if ( fMax < getDynMax(g_serie2Values) )
      fMax = getDynMax(g_serie2Values);

  }

  //define values and axis labels for the chart
  for (int i = 1; i <= iCount; i++)
  {
    //if no values provided, they would be generated
    if ( bNoValues )
      g_serie1Values[i] = rand();

    //if no axis labels provided -> generate
    if ( bNoValues )
      g_chartLabels[i] = \"value \" + (string)i;

    //set axis labels and maximum
    shChart.addAxis(0, fMax + 0.1 * fMax, g_chartXaxes);
  }

  //set values for the chart
  shChart.setSeries(0, g_serie1Values, g_chartLabels);

  if ( dynlen(g_serie2Values) <= 0 )
    bNoValues = true;

  //do series 2
  {
    for (int i = 1; i <= iCount; i++)
    {
      //if no values provided -> generate some
      if ( bNoValues )
        g_serie2Values[i] = rand();
    }

    //set values of series 2 for the chart
    shChart.setSeries(1, g_serie2Values, g_chartLabels);

    //set serieses labels
    if ( g_serie1Name != \"\" )
      shChart.setSeriesName(0, g_serie1Name);
    if ( g_serie2Name != \"\" )
      shChart.setSeriesName(1, g_serie2Name);

   //set serieses colors
   if ( g_serie1Color == \"\" )
     g_serie1Color = dsColors[1];
   shChart.setSeriesFillColor(0,  g_serie1Color); //siemens yellow semi-transpearent
   if ( g_serie2Color == \"\" )
     g_serie2Color = dsColors[5];
   shChart.setSeriesFillColor(1, g_serie2Color); //siemens green semi-trnaspearent
  }

  //set single items color
  for (int i = 1; i <= iCount; i++)
  {
    shChart.setItemFillColor(0, i-1, g_serie1Color);
    shChart.setItemFillColor(1, i-1, g_serie2Color);
  }
}

/*
  @author Grygorii Sokhrannyi
  Function that randomize the given chart with the given delay in seconds
  @params
    - sChartName Is the chart name which will be drawn
    - iDelay Is the delay value in seconds, it specify how frequently randomization is executed
*/
randChart(string sChartName, int iDelay = 3)
{
  //get shape of the chart
  shape shChart = getShape(sChartName);

  int iCounter = 1;
  //infinite loop for an infinite animation
  while ( 1 )
  {
    ++iCounter;
    delay(iDelay);

    //swap values periodically
    if ( iCounter % 2 == 0)
    {
      shChart.setSeries(0, g_serie2Values, g_chartLabels);
      shChart.setSeries(1, g_serie1Values, g_chartLabels);
    }
    else
    {
      shChart.setSeries(0, g_serie1Values, g_chartLabels);
      shChart.setSeries(1, g_serie2Values, g_chartLabels);
    }
  }
}

/*
  @author Grygorii Sokhrannyi
  Function that returns the maximum value of the given dynamic array
  @param dynValue Is the dynamic array to be examined
  @return maximum value in the array, if it is an empty arrey then return 0
*/
anytype getDynMax(dyn_anytype dynValue)
{
  //check if array is not empty
  if ( dynlen(dynValue) <= 0 )
    return 0;

  anytype val = 0;

  //get the maximum value
  for (int i = 1; i <= dynlen(dynValue); ++i)
  {
    if ( dynValue[i] > val )
      val = dynValue[i];
  }
  return val;
}
" 0
 3
"CBRef" "1"
"EClose" E
"dpi" "96"
3 0 1 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
29 5
"Chart_ewo2"
""
1 9 83 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
4 0 0 0 0 0
E E E
0
4
LANG:10001 16 values chart-ewo
LANG:10004 16 values chart-ewo
LANG:10000 15 Werte Chart-Ewo
LANG:10027 48 Значения виджет-диаграммы

30
"holeSize" "float 0.2"
"chartType" "enum 3"
"legendPosition" "enum 3"
"frameShape" "enum 0"
"startAngle" "float 0"
"axesColor" "color Yellow"
"showGrid" "bool TRUE"
"seriesSpacing" "int 20"
"defaultItemPen" "pen [none,oneColor,JoinBevel,CapProjecting,1]"
"defaultItemBrush" "fill [solid]"
"orientation" "enum 1"
"selectionBrush" "fill [gradient,[linear,pad,0,0,0.639,0.602,0,{0,0,0},1,{255,255,255}]]"
"animateValueChange" "bool TRUE"
"shownValueText" "enum 2"
"valueTextPosition" "enum 3"
"gridColor" "color {124,124,124,70}"
"stopAngle" "float 360"
"explosionOffset" "uint 0"
"animateHoverItem" "bool TRUE"
"holeFactor" "float 0.5"
"itemsSelectable" "bool TRUE"
"axesFont" "font Arial,-1,17,5,50,0,0,0,0,0,Regular"
"legendFont" "font Arial,-1,17,5,50,0,0,0,0,0,Regular"
"axesLabelFont" "font Arial,-1,17,5,50,0,0,0,0,0,Regular"
"segmentSpacing" "int 10"
"lineWidth" "int 0"
"bubbleMinSize" "uint 10"
"midLineWidth" "int 0"
"layoutAlignment" "AlignNone"
"snapMode" "None"
4
LANG:10001 34 Arial,-1,17,5,50,0,0,0,0,0,Regular
LANG:10004 34 Arial,-1,17,5,50,0,0,0,0,0,Regular
LANG:10000 32 DejaVu Sans,-1,16,5,50,0,0,0,0,0
LANG:10027 32 DejaVu Sans,-1,15,5,50,0,0,0,0,0
0  9 83 825.0000000000001 532
9 Chart.ewo
0
E2 14
"title"
""
1 20 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
13 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

5
"sizePolicy" "Preferred Fixed"
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 0 1 3 2 1 E 1.068395125745398 0 6.3 -10.35805029815919 -52 0 E 20 10 780 20
0 2 2 "0s" 0 0 0 65 0 0  20 10 1
4
LANG:10001 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
LANG:10004 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
LANG:10000 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
LANG:10027 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
0 4
LANG:10001 32 Daily ridership for a metro line
LANG:10004 27 地铁线的每日乘客量
LANG:10000 32 Daily ridership for a metro line
LANG:10027 76 Ежедневный пассажиропоток на линии метро
0
LAYER, 1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 2 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 3 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 4 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 5 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 6 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 7 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
4 0 "LAYOUT_GROUP0" -1
2 0 
5 14 

"S 5" "1 0 1 1"
"S 14" "0 0 1 1"
"" ""
0 3 0 0
0

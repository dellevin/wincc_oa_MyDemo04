V 14
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
PANEL,-1 -1 835 554 N "White" 0
"main()
{
  //define colorscheme for the chart
  g_chartColors = makeDynString(\"SiemensNaturalGreenDark\",
                                \"SiemensNaturalBlueLight\",
                                \"SiemensNaturalBlueDark\",
                                \"SiemensNaturalYellowLight\",
                                \"SiemensNaturalRedLight\",
                                \"SiemensNaturalGrayLight\");

  //define labels
  g_chartLabels = makeDynString(\"Line 1\", \"Line 2\", \"Line 3\", \"Line 4\", \"Line 5\", \"Line 6\");

  //define values
  g_series1Values = makeDynFloat(4016, 5520, 4336, 5312, 5152, 5792);

  //initialize and draw a chart name 'Chart_ewo2'
  initChart(\"Chart_ewo2\");

  //set title global font if exist
  if ( globalExists(\"g_chartTitleFont\") )
    title.font(g_chartTitleFont);

  //call randomization function for the chart name 'Chart_ewo2'
  randChart(\"Chart_ewo2\");
}
" 0
 E E E E 1 -1 -1 0  10 10
""0  1
E "dyn_string g_chartColors, g_chartLabels;
dyn_float g_series1Values;

/*
  @authors Grygorii Sokhrannyi, Martin Koller
  Initialize and draw the chart for the given chart name
  @param sChartName Is the chart name which will be drawn
*/
initChart(string sChartName)
{
  //get shape of the chart
  shape shChart = getShape(sChartName);

  //set global fonts for the chart if exist
  if ( globalExists(\"g_chartLabelsFont\") )
  {
    shChart.font(g_chartLabelsFont);
    shChart.legendFont(g_chartLabelsFont);
    shChart.axesFont(g_chartLabelsFont);
  }

  //remove axes if chart is redrawn
  shChart.removeAxes();

  //define some default colors for the case when user did not
  dyn_string dsColors = makeDynString(\"SiemensNaturalYellowLight\",
                                      \"SiemensNaturalYellowDark\",
                                      \"SiemensNaturalRedLight\",
                                      \"SiemensNaturalRedDark\",
                                      \"SiemensNaturalGreenLight\",
                                      \"SiemensNaturalGreenDark\",
                                      \"SiemensNaturalGrayLight\",
                                      \"SiemensNaturalGrayDark\",
                                      \"SiemensNaturalBlueLight\",
                                      \"SiemensNaturalBlueDark\");

  int iCount = 6;   //default number of variables

  //check users values and attributes, if not found then generate random ones
  if ( dynlen(g_series1Values) > 0 )
    iCount = dynlen(g_series1Values);   //found users variables -> redefine

  if ( dynlen(g_chartColors) <= 0 )
    g_chartColors = dsColors;

  for (int i = 1; i <= iCount; i++)
  {
    if ( dynlen(g_series1Values) <= 0 )
      g_series1Values[i] = rand();

    if ( dynlen(g_chartLabels) <= 0 )
      g_chartLabels[i] = \"value \" + (string)i;
  }

  //set values and labels for the chart
  shChart.setSeries(0, g_series1Values, g_chartLabels);

  //set colors for all items
  for (int i = 1; i <= iCount; i++)
  {
    shChart.setItemFillColor(0, i - 1, g_chartColors[i]);
  }
}

/*
  @author Grygorii Sokhrannyi
  Function that randomize the given chart with the given delay in seconds
  @param sChartName Is the chart name which will be drawn
*/
randChart(string sChartName)
{
  //randomization period
  const int iDelay = 3;

  //infinite loop for an infinite animation
  while ( 1 )
  {
    delay(iDelay);

    //regenerate all values
    for (int i = 1; i <= dynlen(g_series1Values); ++i)
    {
      //generate random value
      int val = (int)(rand() * 0.01);

      //redefine chart values
      if ( val % 2 == 0 )
          g_series1Values[i] = g_series1Values[i] + val * i;
      else
          g_series1Values[i] = abs(g_series1Values[i] - val * i);
    }

    //redraw the chart with the generated values
    initChart(sChartName);
  }
}
" 0
 3
"CBRef" "1"
"EClose" E
"dpi" "96"
3 0 1 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
29 1
"Chart_ewo2"
""
1 9 77 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
0 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"chartType" "enum 1"
"legendPosition" "enum 3"
"lineWidth" "int 0"
"layoutAlignment" "AlignNone"
4
LANG:10001 34 Arial,-1,17,5,50,0,0,0,0,0,Regular
LANG:10004 34 Arial,-1,17,5,50,0,0,0,0,0,Regular
LANG:10000 35 MS Shell Dlg 2,-1,13,5,50,0,0,0,0,0
LANG:10027 35 MS Shell Dlg 2,-1,13,5,50,0,0,0,0,0
0  9 77 825.0000000000001 544
9 Chart.ewo
0
E2 10
"title"
""
1 20 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
9 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

5
"sizePolicy" "Preferred Fixed"
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 0 1 3 2 1 E 1.068395125745398 0 5.7 -10.35805029815919 -46 0 E 20 10 780 20
0 2 2 "0s" 0 0 0 65 0 0  20 10 1
4
LANG:10001 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
LANG:10004 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
LANG:10000 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
LANG:10027 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
0 4
LANG:10001 33 Production line (Operating Hours)
LANG:10004 23 生产线(营业时间)
LANG:10000 33 Production line (Operating Hours)
LANG:10027 33 Production line (Operating Hours)
0
LAYER, 1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 2 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 3 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 4 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 5 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 6 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 7 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
4 0 "LAYOUT_GROUP0" -1
2 0 
1 10 

"S 1" "1 0 1 1"
"S 10" "0 0 1 1"
"" ""
0 3 0 0
0

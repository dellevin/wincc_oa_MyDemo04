V 14
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
PANEL,-1 -1 835 554 N "White" 0
"main()
{
  //Y-axis title
  g_chartYaxis = \"Efficiency [ % ]\";

  //define a some random values
  float val1 = rand() * 0.00001;
  float val2 = rand() * 0.00001;

  //define chart series 1 name, values and color
  g_serie1Name = \"Delivered\";
  g_serie1Values = makeDynInt(150 - 100 * val1,
                              150 - 100 * val2,
                              150 + 100 * val1,
                              150 + 100 * val2,
                              150 + 100 * val2 * val1,
                              150 - 150 * val1,
                              150 - 150 * val2,
                              150 + 150 * val1,
                              150 + 150 * val2,
                              150 + 105 * val2 * val1);
  g_serie1Color = \"{255,185,0,150}\";

  //define chart series 2 name, values and color
  g_serie2Name = \"Generated\";
  g_serie2Values = makeDynInt(500 - 100 * val1,
                              500 - 100 * val2,
                              500 + 100 * val1,
                              500 + 100 * val2,
                              500 + 100 * val2 * val1,
                              500 - 150 * val1,
                              500 - 150 * val2,
                              500 + 150 * val1,
                              500 + 150 * val2,
                              500 + 105 * val2 * val1);
  g_serie2Color = \"{15,25,35,150}\"; //grey

  //define variables names
  g_chartLabels = makeDynString(\"L1\", \"L2\", \"L3\", \"L4\", \"L5\", \"R1\", \"R2\", \"R3\", \"R4\", \"R5\");

  //initialize and draw a chart name 'Chart_ewo2'
  initChart(\"Chart_ewo2\");

  //set title global font if exist
  if ( globalExists(\"g_chartTitleFont\") )
    title.font(g_chartTitleFont);

  //set Xaxis label and its global font
  label.text(\"Turbines\");
  if ( globalExists(\"g_chartLabelsFont\") )
    label.font(g_chartLabelsFont);

  //call randomization function for the chart name 'Chart_ewo2'
  randChart(\"Chart_ewo2\");
}
" 0
 E E E E 1 -1 -1 0  10 10
""0  1
E "dyn_float g_serie1Values, g_serie2Values;
dyn_string g_chartLabels;
string g_serie1Color, g_serie2Color;
string g_serie1Name, g_serie2Name, g_chartYaxis;

/*
  @authors Grygorii Sokhrannyi, Martin Koller
  Initialize and draw the chart for the given chart name
  @param sChartName Is the chart name which will be drawn
*/
initChart(string sChartName)
{
  //get shape of the chart
  shape shChart = getShape(sChartName);

  //set global fonts for the chart if exist
  if ( globalExists(\"g_chartLabelsFont\") )
  {
    shChart.font(g_chartLabelsFont);
    shChart.legendFont(g_chartLabelsFont);
    shChart.axesFont(g_chartLabelsFont);
    shChart.axesLabelFont(g_chartLabelsFont);
  }

  //remove axes if chart is redrawn
  shChart.removeAxes();

  int iCount = 6;   //default number of variables
  bool bNoValues = false;   //if users variables provided
  float fMax = 0;   //maximum axis value

  //define some default colors for the case when user did not
  dyn_string dsColors = makeDynString(\"SiemensNaturalYellowLight\",
                                      \"SiemensNaturalYellowDark\",
                                      \"SiemensNaturalRedLight\",
                                      \"SiemensNaturalRedDark\",
                                      \"SiemensNaturalGreenLight\",
                                      \"SiemensNaturalGreenDark\",
                                      \"SiemensNaturalGrayLight\",
                                      \"SiemensNaturalGrayDark\",
                                      \"SiemensNaturalBlueLight\",
                                      \"SiemensNaturalBlueDark\");

  //check users values and define max axes value
  if ( dynlen(g_serie1Values) <= 0 )
    bNoValues = true;
  else
  {
    iCount = dynlen(g_serie1Values);

    fMax = getDynMax(g_serie1Values);

    if ( fMax < getDynMax(g_serie2Values) )
      fMax = getDynMax(g_serie2Values);
  }

  //define values and axis labels for the chart
  for (int i = 1; i <= iCount; i++)
  {
    if ( bNoValues )
      g_serie1Values[i] = rand();

    if ( bNoValues )
      g_chartLabels[i] = \"value \" + (string)i;

    shChart.addAxis(0, fMax + 0.1 * fMax, g_chartYaxis);
    shChart.addAxis(0, 0, g_chartYaxis);
  }

  //set values for the chart
  shChart.setSeries(0, g_serie1Values, g_chartLabels);

  //check if any variables provided for series 2
  if ( dynlen(g_serie2Values) <= 0 )
    bNoValues = true;

  //do series 2
  {
    for (int i = 1; i <= iCount; i++)
    {
      //if no values provided -> generate
      if ( bNoValues )
        g_serie2Values[i] = g_serie1Values[i] - 3.0 * rand() * 0.001;
    }

    //set values for the chart
    shChart.setSeries(1, g_serie2Values, g_chartLabels);
  }

  //set serieses labels
  if ( g_serie1Name != \"\" )
    shChart.setSeriesName(0, g_serie1Name);

  if ( g_serie2Name != \"\" )
    shChart.setSeriesName(1, g_serie2Name);

  //set series colors
  if ( g_serie1Color == \"\" )
    g_serie1Color = dsColors[1];
  shChart.setSeriesFillColor(0,  g_serie1Color); //siemens Yellow semi-transpearent

  if ( g_serie2Color == \"\" )
    g_serie2Color = dsColors[5];
  shChart.setSeriesFillColor(1, g_serie2Color); //siemens green semi-trnaspearent

  //set itmes fill colors
  for (int i = 1; i <= iCount; i++)
  {
    if ( g_serie1Color != \"\" )
      shChart.setItemFillColor(0, i-1, g_serie1Color);

    if ( g_serie2Color != \"\" )
      shChart.setItemFillColor(1, i-1, g_serie2Color);
  }
}

/*
  @author Grygorii Sokhrannyi
  Function that randomize the given chart with the given delay in seconds
  @param sChartName Is the chart name which will be drawn
*/
randChart(string sChartName)
{
  const int iDelay = 3;

  //get shape of the chart
  shape shChart = getShape(sChartName);

  //infinite loop for an infinite animation
  while ( 1 )
  {
    delay(iDelay);

    //regenerate all values
    for (int i = 1; i <= dynlen(g_serie1Values); ++i)
    {
      //generate random value
      int val = (int)(rand() * 0.001);

      //redefine chart values
      if ( val % 2 == 0 )
      {
        g_serie1Values[i] = g_serie1Values[i] + val;
        g_serie2Values[i] = g_serie2Values[i] + val;
      }
      else
      {
        g_serie1Values[i] = abs(g_serie1Values[i] - val);
        g_serie2Values[i] = abs(g_serie2Values[i] - val);
      }
    }

    initChart(\"Chart_ewo2\");
  }
}

/*
  @author Grygorii Sokhrannyi
  Function that returns the maximum value of the given dynamic array
  @param dynValue Is the dynamic array to be examined
  @return maximum value in the array, if it is an empty arrey then return 0
*/
anytype getDynMax(dyn_anytype dynValue)
{
  //check if array is not empty
  if ( dynlen(dynValue) <= 0 )
    return 0;

  anytype val = 0;

  //get the maximum value
  for (int i = 1; i <= dynlen(dynValue); ++i)
  {
    if ( dynValue[i] > val )
      val = dynValue[i];
  }

  return val;
}
" 0
 3
"CBRef" "1"
"EClose" E
"dpi" "96"
3 0 1 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
29 1
"Chart_ewo2"
""
1 9 83 E E E 1 E 1 E N "_3DText" E N "_Transparent" E E
 E E
0 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

6
"chartType" "enum 5"
"legendPosition" "enum 3"
"lineWidth" "int 0"
"frameShape" "enum 0"
"legendFont" "font Arial,-1,17,5,50,0,0,0,0,0,Regular"
"layoutAlignment" "AlignNone"
4
LANG:10001 34 Arial,-1,17,5,50,0,0,0,0,0,Regular
LANG:10004 34 Arial,-1,17,5,50,0,0,0,0,0,Regular
LANG:10000 35 MS Shell Dlg 2,-1,13,5,50,0,0,0,0,0
LANG:10027 35 MS Shell Dlg 2,-1,13,5,50,0,0,0,0,0
0  9 83 825.0000000000001 501
9 Chart.ewo
0
E2 10
"title"
""
1 20 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
9 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

5
"sizePolicy" "Preferred Fixed"
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 0 1 3 2 1 E 1.068395125745398 0 6.3 -10.35805029815919 -52 0 E 20 10 780 20
0 2 2 "0s" 0 0 0 65 0 0  20 10 1
4
LANG:10001 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
LANG:10004 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
LANG:10000 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
LANG:10027 31 Arial,-1,33,5,75,0,0,0,0,0,Bold
0 4
LANG:10001 24 Output electricity (kWh)
LANG:10004 17 输出电量(kWh)
LANG:10000 24 Output electricity (kWh)
LANG:10027 24 Output electricity (kWh)
2 11
"label"
""
1 20 10 E E E 1 E 1 E N "_WindowText" E N "_Transparent" E E
 E E
10 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

5
"sizePolicy" "Preferred Fixed"
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 0 1 3 2 1 E 1.068395125745398 0 3.200000000000002 -10.35805029815919 478 0 E 20 10 780 20
0 2 2 "0s" 0 0 0 65 0 0  20 10 1
4
LANG:10001 34 Arial,-1,17,5,50,0,0,0,0,0,Regular
LANG:10004 34 Arial,-1,17,5,50,0,0,0,0,0,Regular
LANG:10000 34 Arial,-1,17,5,50,0,0,0,0,0,Regular
LANG:10027 34 Arial,-1,17,5,50,0,0,0,0,0,Regular
0 4
LANG:10001 5 title
LANG:10004 5 title
LANG:10000 5 title
LANG:10027 5 title
0
LAYER, 1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 2 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 3 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 4 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 5 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 6 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 7 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
4 0 "LAYOUT_GROUP0" -1
3 0 
11 1 10 

"S 11" "2 0 1 1"
"S 1" "1 0 1 1"
"S 10" "0 0 1 1"
"" ""
0 3 0 0
0

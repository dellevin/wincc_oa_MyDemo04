V 14
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
PANEL,-1 -1 682 512 N "_3DFace" 0
"main()
{
  m_ui = new OaAuthUI();

  shared_ptr<LoginFrameworkChildView> view = new LoginFrameworkLoginStd(self, \"txt_username\", \"txt_password\", \"txt_domain\", \"chkBx_userLang\",
                                                                        \"chkBx_monitor\");
  m_loginFrameworkController.setLoginFrameworkChildView(view);
  m_loginFrameworkController.setOaAuthUI(m_ui); //if there is a system use notification after the login we need to handle the starting of the UI from the Controller
  setFrameworkView();

  txt_domain.text(m_ui.getDomainFromUser());
  if(txt_domain.text() != \"\")
  {
    txt_domain.visible(TRUE);
  }

  m_loginFrameworkController.setOpenMonitorConfiguration(chkBx_monitor.state(0));

  m_isInitialized = TRUE;
  txt_username.enabled(m_isInitialized);
}
" 0
 E E E E 1 -1 -1 0  0 0
""0  1
E "#uses \"classes/loginFramework/LoginFrameworkLoginStd\"

shared_ptr<OaAuthUI> m_ui;
//initialize boolean
bool m_isInitialized = FALSE;

shared_ptr<LoginFrameworkController> m_loginFrameworkController = LoginFrameworkController::getInstance();

// get server address
private string getServerAddress()
{
  string serverAddress = getActiveHttpServerUrl();
  if (serverAddress == \"\")
  {
    serverAddress = getConfigActiveHttpServerUrl();
  }

  return serverAddress;
}

// options for netGet()
private mapping generateSslOptions(bool ignoreSslErrors, string serverAddress)
{
  mapping options;
  string base64auth = base64Encode(txt_username.text() + \":\" + txt_password.text());

  options[\"headers\"] = makeMapping(\"Authorization\", \"Basic \" + base64auth,
                                   \"Host\", serverAddress);
  if (ignoreSslErrors)
  {
    options[\"ignoreSslErrors\"] = \"\";
  }

  return options;
}

// return a formatted string with all errors
private string getSslErrorString(mapping netGetResult)
{
  string sslErrorsStr;

  if (mappingHasKey(netGetResult, \"sslErrors\"))
  {
    mapping sslErrors = netGetResult[\"sslErrors\"];

    for (int i = 1; i <= dynlen(mappingKeys(sslErrors)); ++i)
    {
      sslErrorsStr += \"• \" + mappingGetValue(sslErrors, i) + \"\\n\";
    }
  }

  return sslErrorsStr;
}

// return the http error string
private string getHttpErrorString(mapping netGetResult)
{
  string errorStr;

  if (mappingHasKey(netGetResult, \"errorString\"))
  {
    errorStr = netGetResult[\"errorString\"];
  }

  return errorStr;
}

// return the http error code
private string getHttpErrorCode(mapping netGetResult)
{
  string errorCode;

  if (mappingHasKey(netGetResult, \"error\"))
  {
    errorCode = netGetResult[\"error\"];
  }

  return errorCode;
}

// get certificate data
private void getSslCertData(mapping netGetResult, string& digest, string& text)
{
  if (mappingHasKey(netGetResult, \"sslErrors2\"))
  {
    mapping sslErrors2 = netGetResult[\"sslErrors2\"];

    if (mappinglen(sslErrors2) > 0)
    {
      mapping error = mappingGetValue(sslErrors2, 1);

      if (mappingHasKey(error, \"certificate\"))
      {
        mapping certificate = error[\"certificate\"];

        if (mappingHasKey(certificate, \"digest\"))
        {
          digest = certificate[\"digest\"];
        }

        if (mappingHasKey(certificate, \"text\"))
        {
          text = certificate[\"text\"];
        }
      }
    }
  }
}

// get the session token
private string getSslSessionToken(mapping netGetResult)
{
  string sessionToken;

  if(mappingHasKey(netGetResult, \"content\"))
  {
    mapping content = jsonDecode(netGetResult[\"content\"]);

    if(mappingHasKey(content, \"sessionToken\") && content[\"sessionToken\"] != \"\")
    {
      sessionToken = content[\"sessionToken\"];
    }
  }

  return sessionToken;
}

private bool authenticateInternal(bool ignoreSslErrors)
{
  mapping result;
  string serverAddress = getServerAddress();

  if (serverAddress == \"\") // system is misconfigured
  {
    return false;
  }

  string serverAddressToken = serverAddress + \"/_info?sessionToken=active\";
  mapping options = generateSslOptions(ignoreSslErrors, serverAddress);

  int err = netGet(serverAddressToken, result, options);
  if (err == -1) // there was an error
  {
    string certDigest;
    string certText;
    string sslErrors = getSslErrorString(result);
    string errCode = getHttpErrorCode(result);
    string errStr = getHttpErrorString(result);
    getSslCertData(result, certDigest, certText);

    if ((errCode == \"SslHandshakeFailedError\") && (sslErrors != \"\")) // certificate error
    {
      if (!certificateIsPermanentlyAccepted(certDigest))
      {
        dyn_string ds;
        dyn_float df;
        ChildPanelOnCentralModalReturn(\"vision/loginFramework/login_CertificateError\",
                            \"Security Problem\",
                            makeDynString(serverAddress, sslErrors),
                            df, ds);

        if (ds[1] == \"cancel\")
        {
          return false;
        }

        if (ds[1] == \"permanent\")
        {
          certificateAcceptPermanently(certDigest);
        }
      }
      return authenticateInternal(true); // retry request, ignoring the SSL errors
    }
    else // some other error
    {
      if (mappingHasKey(result, \"httpStatusCode\"))
      {
        int httpError = result[\"httpStatusCode\"];
        if (httpError == 401)
        {
          m_loginFrameworkController.displayFailedLogin(getCatStr(\"OaLogin\", \"password_invalid\"));
        }
        else if (httpError == 403)
        {
          m_loginFrameworkController.displayFailedLogin(getCatStr(\"OaLogin\", \"permission_login\"));
        }
      }

      return false;
    }
  }

  string token = getSslSessionToken(result);
  if (token == \"\")
  {
    return false;
  }

  setSessionToken(token);
  return ssaRelogin();
}

public bool authenticate()
{
  bool authResult = authenticateInternal(false);

  if (!authResult)
  {
    m_loginFrameworkController.setState(LoginFrameworkState::LOGIN); //rollback state in case of authentication error
    txt_password.text(\"\");
  }

  return authResult;
}

void setFrameworkView()
{
  m_loginFrameworkController.setBtnAcceptEnabled(TRUE);
  m_loginFrameworkController.setBtnAcceptVisible(TRUE);
  m_loginFrameworkController.setBtnCancelVisible(TRUE);

  m_loginFrameworkController.setTxtPlatformVisible(TRUE);
  m_loginFrameworkController.setTxtVersionVisible(TRUE);
  m_loginFrameworkController.setTxtWelcomeVisible(TRUE);
}
" 0
 4
"CBRef" "1"
"EClose" E
"LangSwitchMode" "1"
"dpi" "96"
0 0 0
"login_background.png" -1 -1 682 512
-1
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
14 3
"txt_username"
"login"
1 305.2919547006574 211.74 E E E 0 E 1 E N {45,55,60} E N "_Window" E E
 E E
3 0 0 0 0 0
E "main()
{
  m_ui.setUsername(this.text());
}
" 0
 E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignNone"
4
LANG:10001 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10004 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10000 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10027 30 Noto Sans,-1,13,5,50,0,0,0,0,0
0  348 203 658 246
3 "0s" 0 0 0 0 0 -1  E "main()
{
  this.placeholderText(getCatStr(\"general\", \"loginUsername\"));
}
" 0
 "main()
{
  setInputFocus(myModuleName(), myPanelName(), txt_password.name());
}
" 0

14 4
"txt_password"
"login"
1 305.2919547006574 170.34 E E E 1 E 1 E N {45,55,60} E N "_Window" E E
 E E
4 0 0 0 0 0
E "main()
{
  //
}
" 0
 E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"layoutAlignment" "AlignNone"
"textChangedCB" "main(string newText)
{
  m_ui.setPassword(this.text());
}
"
4
LANG:10001 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10004 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10000 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10027 30 Noto Sans,-1,13,5,50,0,0,0,0,0
0  348 254 658 297
3 "0S" 0 0 0 0 0 -1  E "main()
{
  this.placeholderText(getCatStr(\"general\", \"loginPassword\"));
}
" 0
 "main()
{
  m_loginFrameworkController.doContinue();
}
" 0

14 6
"txt_domain"
"login"
1 305.2919547006574 143.39 E E E 1 E 0 E N {45,55,60} E N "WF_PanelBackground" E E
 E E
6 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

2
"hoverbclr" "N \"WF_PanelBackground\""
"layoutAlignment" "AlignNone"
4
LANG:10001 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10004 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10000 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10027 30 Noto Sans,-1,13,5,50,0,0,0,0,0
0  348 152 658 195
2 "0s" 0 0 0 0 0 -1  E E E
20 7
"chkBx_userLang"
"login"
1 305.2919547006574 289.75 E E E 1 E 1 E N {45,55,60} E N "_Transparent" E E
 E E
7 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10004 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10000 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10027 30 Noto Sans,-1,13,5,50,0,0,0,0,0
0  348 292 661 335
1
T 
4
LANG:10001 35 Load user-specific project language
LANG:10004 33 加载用户定义的项目语言
LANG:10000 40 Benutzerspezifische Projektsprache laden
LANG:10027 75 Загрузить пользовательский язык проекта

1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E E
0 0 0 0 0
1
E E
E"main(int button, int state)
{
  m_loginFrameworkController.setUseUserLanguage(state);
}
" 0
20 15
"chkBx_monitor"
"login"
1 305.2919547006574 313 E E E 1 E 1 E N {45,55,60} E N "_Transparent" E E
 E E
15 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10004 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10000 30 Noto Sans,-1,13,5,50,0,0,0,0,0
LANG:10027 30 Noto Sans,-1,13,5,50,0,0,0,0,0
0  348 315 661 359
1
T 
4
LANG:10001 48 Change user-specific multi-monitor configuration
LANG:10004 33 更改用户定义的多屏配置
LANG:10000 49 Benutzerspezifische Monitor-Konfiguration ändern
LANG:10027 74 Изменить мультимониторную конфигурацию

0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E E
0 0 0 0 0
1
E E
E"main(int button, int state)
{
  m_loginFrameworkController.setOpenMonitorConfiguration(state);
}
" 0
0
LAYER, 1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 2 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 3 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 4 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 5 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 6 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 7 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
0

V 13
4
LANG:10001 18 Property selection
LANG:10004 12 属性选择
LANG:10000 20 Eigenschaftenauswahl
LANG:10027 27 Выбор свойства
PANEL,-1 -1 478 457 N "_3DFace" 4
"$DATATYPE"
"$DPE"
"$DPSET"
"$PROPS"
"bool bDpSet;

main()
{
  sDataType = $DATATYPE;
  bDpSet = (bool)$DPSET;
  sDpe = $DPE;
  updateTree(loadFromFile(getPath(DATA_REL_PATH,\"ScriptWizard/connectConfigs.xml\")));
  dyn_string dsProps = stringToDynString($PROPS);
  
  for(int i = 1; i <= dynlen(dsProps); i++)
  {
    if ( strpos(dsProps[i], \" \") != -1 )
      dsProps[i] = strsplit(dsProps[i], \" \")[1];
    
    if ( tree.itemExists(dsProps[i]) )
    {
      tree.setChecked(dsProps[i], true);
      tree.ensureItemVisible(dsProps[i]);
    }
  }

  
}

mapping loadFromFile(string sFile)
{
  mapping mConfig;
  
  string errMsg;
  mapping mEmpty;
  int errLine, errColumn;
  int docId = xmlDocumentFromFile(sFile, errMsg, errLine, errColumn);//get the xmlDocumentId from the file
  int settingId = xmlFirstChild(docId);                  //get the nodeId from the connection list

  int configID = xmlFirstChild(docId, settingId);           //get the nodeId from the config node

  if (configID >= 1)
  {
    do                                                   //foreach element of dpt's
    {
      mapping mAttr = xmlElementAttributes(docId, configID);//get the attributes from the dpt node
      string sConfig = mAttr[\"name\"];
      
      if ( bDpSet && mappingHasKey(mAttr, \"dpSet\") && (bool)mAttr[\"dpSet\"] == false )
      {
        configID = xmlNextSibling(docId, configID);
        continue;
      }
      
      if ( !mappingHasKey(mConfig, mAttr[\"name\"]) )
        mConfig[mAttr[\"name\"]] = mEmpty;
      
      if ( mappingHasKey(mAttr, \"shortTextKey\") )
      {
        if ( !mappingHasKey(mConfig[sConfig], \"shortTextKey\") )
          mConfig[sConfig][\"shortTextKey\"] = mAttr[\"shortTextKey\"];
      }
      if ( mappingHasKey(mAttr, \"toolTipKey\") )
      {
        if ( !mappingHasKey(mConfig[sConfig], \"toolTipKey\") )
          mConfig[sConfig][\"toolTipKey\"] = mAttr[\"toolTipKey\"];
      }

      int attributeID = xmlFirstChild(docId, configID);       //get the nodeId from the \"element\" element
      
      if (attributeID >= 1)
      {
        do                                               //foreach element of \"elements\"
        {
          mapping mAttr = xmlElementAttributes(docId, attributeID);//get the attributes from the element node

          if ( bDpSet && mappingHasKey(mAttr, \"dpSet\") && (bool)mAttr[\"dpSet\"] == false )
          {
            attributeID = xmlNextSibling(docId, attributeID);
            continue;
          }
          
          if ( !mappingHasKey(mConfig[sConfig], mAttr[\"name\"]) )
            mConfig[sConfig][mAttr[\"name\"]] = mEmpty;
          
          if ( mappingHasKey(mAttr, \"shortTextKey\") )
          {
            if ( !mappingHasKey(mConfig[sConfig][mAttr[\"name\"]], mAttr[\"shortTextKey\"]) )
              mConfig[sConfig][mAttr[\"name\"]][\"shortTextKey\"] = mAttr[\"shortTextKey\"];
          }
          if ( mappingHasKey(mAttr, \"toolTipKey\") )
          {
            if ( !mappingHasKey(mConfig[sConfig][mAttr[\"name\"]], mAttr[\"toolTipKey\"]) )
              mConfig[sConfig][mAttr[\"name\"]][\"toolTipKey\"] = mAttr[\"toolTipKey\"];
          }
          
          attributeID = xmlNextSibling(docId, attributeID);            //get the next nodeId from the \"element\" element
        }
        while(attributeID >= 0);
      }
      configID = xmlNextSibling(docId, configID);                        //get the next nodeId from the dpt element
    }
    while(configID >= 0);
  }
  
  xmlCloseDocument(docId);                                         //close xmlDocument
  return mConfig;                                                  //return the mapping of the file
}" 0
 E E E E 1 -1 -1 0  4 8
""0  1
E "#uses \"CtrlXml\"

string sDataType;
string sDpe;

int getTypeId(string sDataType)
{
  string sScript = \"anytype main(){ return DPEL_\"+strtoupper(sDataType)+\"; }\";
  anytype aRet;
  evalScript(aRet, sScript, makeDynString());
  return aRet;
}

void updateTree(mapping mConfigs)
{
  tree.clear();//clear tree  
  
  tree.appendItem(\"\", sDataType, sDataType);
  
  string sType = sDataType;
  
  if(sType == \"bool\")
    sType = \"bit\";
  else if(sType == \"bit32\")
    sType = \"32bit\";
  else if(sType == \"bit64\")
    sType = \"32bit\";
  else if(sType == \"anytype\")
    sType = \"text\";
  else if(sType == \"string\")
    sType = \"text\";
  else if(sType == \"langString\")
    sType = \"langtext\";
  else if(sType == \"double\")
    sType = \"float\";
  else if(sType == \"long\")
    sType = \"int\";
  else if(sType == \"ulong\")
    sType = \"uint\";
  else if(sType == \"unsigned\")
    sType = \"uint\";
  else if(sType == \"mapping\")
    sType = \"text\";
  else if(sType == \"mixed\")
    sType = \"text\";

    
  tree.setIcon(sDataType, 0, \"dptree/\" + sType + \".png\");
  
  dyn_string dsKonfigsInMapping = mappingKeys(mConfigs);
  dyn_string dsKonfigs =  dpGetAllConfigs(getTypeId(sDataType));
  
  for(int i = 1; i <= dynlen(dsKonfigs); i++)
  {    
    if ( dynContains(dsKonfigsInMapping, dsKonfigs[i]) < 1 )
        continue;
    
    string sKonfig = dsKonfigsInMapping[dynContains(dsKonfigsInMapping, dsKonfigs[i])];
    
    if ( sKonfig == \"shortTextKey\" || sKonfig == \"toolTipKey\" )
        continue;
    
    bool bEnabled = true;
    int iType;
    
    if ( sDpe != \"\" && sKonfig != \"_online\" )
    {
      dpGet(sDpe+\":\"+sKonfig+\".._type\", iType);

      if ( iType == DPCONFIG_NONE )
        bEnabled = false;
    }
    
    if ( mappingHasKey(mConfigs[sKonfig], \"shortTextKey\") )
      tree.appendItem(sDataType, sKonfig, sKonfig + \" (\" + getCatStr(\"ScriptWizard\", mConfigs[sKonfig][\"shortTextKey\"]) + \")\");
    else
      tree.appendItem(sDataType, sKonfig, sKonfig);

    if ( !bEnabled )
      tree.setEnabled(sKonfig, false);
    
    tree.setIcon(sKonfig, 0, \"dptree/config.png\");

    if ( mappingHasKey(mConfigs[sKonfig], \"toolTipKey\") )
      tree.setToolTip(sKonfig, 0 , getCatStr(\"ScriptWizard\", mConfigs[sKonfig][\"toolTipKey\"]));

      
    
    dyn_string dsAttributesInMapping = mappingKeys(mConfigs[dsKonfigs[i]]);
    dyn_string dsAttributes = dpGetAllAttributes(dsKonfigs[i]);
    
    string sLastAttr = \"\";
    
    for(int z = 1; z <= dynlen(dsAttributes); z++)
    {
      if ( dynContains(dsAttributesInMapping, dsAttributes[z]) < 1 )
        continue;
      
      string sAttribute =  dsAttributesInMapping[dynContains(dsAttributesInMapping, dsAttributes[z])];
                           
      if ( sAttribute == \"shortTextKey\" || sAttribute == \"toolTipKey\" )
        continue;
      
      if ( strpos(sAttribute, \"_userbit\") != -1 && !tree.itemExists(dsKonfigs[i]+\"_userbit\") )
      {
        tree.appendItem(dsKonfigs[i], dsKonfigs[i]+\"_userbit\", \"_userbit, _userbyte, _userword\");
        tree.setIcon(dsKonfigs[i]+\"_userbit\", 0, \"dptree/struct.png\");
        sLastAttr = dsKonfigs[i]+\"_userbit\";
        
        if ( !bEnabled )
          tree.setEnabled(dsKonfigs[i]+\"_userbit\", false);
      }
      
      if ( mappingHasKey(mConfigs[dsKonfigs[i]][sAttribute], \"shortTextKey\") )
      {
        if ( strpos(sAttribute, \"_userbit\") != -1 || strpos(sAttribute, \"_userbyte\") != -1 || strpos(sAttribute, \"_userword\") != -1 || strpos(sAttribute, \"_userbits\") != -1 )
        {
          tree.appendItem(dsKonfigs[i]+\"_userbit\", dsKonfigs[i]+\"..\"+sAttribute, sAttribute + \" (\" + getCatStr(\"ScriptWizard\", mConfigs[dsKonfigs[i]][sAttribute][\"shortTextKey\"]) + \")\");
          
          if ( !bEnabled )
            tree.setEnabled(dsKonfigs[i]+\"..\"+sAttribute, false);  
        }
        else
        {
          tree.appendItem(dsKonfigs[i], dsKonfigs[i]+\"..\"+sAttribute, sAttribute + \" (\" + getCatStr(\"ScriptWizard\", mConfigs[dsKonfigs[i]][sAttribute][\"shortTextKey\"]) + \")\");
          sLastAttr = dsKonfigs[i]+\"..\"+sAttribute;
          
          if ( !bEnabled )
            tree.setEnabled(dsKonfigs[i]+\"..\"+sAttribute, false);
        }
      }
      else
      {
        if ( strpos(sAttribute, \"_userbit\") != -1 || strpos(sAttribute, \"_userbyte\") != -1 || strpos(sAttribute, \"_userword\") != -1 || strpos(sAttribute, \"_userbits\") != -1 )
        {
          tree.appendItem(dsKonfigs[i]+\"_userbit\", dsKonfigs[i]+\"..\"+sAttribute, sAttribute);
          
          if ( !bEnabled )
            tree.setEnabled(dsKonfigs[i]+\"..\"+sAttribute, false);
        }
        else
        {          
          tree.appendItem(dsKonfigs[i], dsKonfigs[i]+\"..\"+sAttribute, sAttribute);
          sLastAttr = dsKonfigs[i]+\"..\"+sAttribute;
          
          if ( !bEnabled )
            tree.setEnabled(dsKonfigs[i]+\"..\"+sAttribute, false);
        }
      }
      
      tree.setIcon(dsKonfigs[i]+\"..\"+sAttribute, 0, \"dptree/configattr.png\");
        
      tree.setCheckable(dsKonfigs[i]+\"..\"+sAttribute, true);
      
      if ( mappingHasKey(mConfigs[dsKonfigs[i]][sAttribute], \"toolTipKey\") )
        tree.setToolTip(dsKonfigs[i]+\"..\"+sAttribute, 0 , getCatStr(\"ScriptWizard\", mConfigs[dsKonfigs[i]][sAttribute][\"toolTipKey\"]));
      else if ( mappingHasKey(mConfigs[dsKonfigs[i]][sAttribute], \"shortTextKey\") )
        tree.setToolTip(dsKonfigs[i]+\"..\"+sAttribute, 0 , getCatStr(\"ScriptWizard\", mConfigs[dsKonfigs[i]][sAttribute][\"shortTextKey\"]));
    }
    
    if ( tree.itemExists(dsKonfigs[i]+\"_userbit\") && sLastAttr != dsKonfigs[i]+\"_userbit\" ) //move userbits to last position
      tree.moveItem(dsKonfigs[i]+\"_userbit\", sLastAttr);
  } 
}


" 0
 2
"CBRef" "1"
"EClose" E
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
29 0
"tree"
""
1 523.5878962536021 -192.8823529411764 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
0 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"alternatingRowColors" "bool TRUE"
"midLineWidth" "int 0"
"lineWidth" "int 1"
"treeStepSize" "int 21"
4
LANG:10001 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
LANG:10004 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
LANG:10000 37 MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0
LANG:10027 26 Arial,10,-1,5,50,0,0,0,0,0
0  7 9 469 405
10 TreeWidget
0
"main()
{
  this.addColumn(\"elements\");
  this.showHeader(false);
}" 0
13 1
"BUTTON_OK"
""
1 155 294 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
2 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,10,-1,5,50,0,0,0,0,0
LANG:10004 26 Arial,10,-1,5,50,0,0,0,0,0
LANG:10000 26 Arial,10,-1,5,50,0,0,0,0,0
LANG:10027 26 Arial,10,-1,5,50,0,0,0,0,0
0  293 422 381 450

T 
4
LANG:10001 2 OK
LANG:10004 6 确定
LANG:10000 2 OK
LANG:10027 2 OK
"main()
{
  dyn_float df;
  dyn_string ds;
  
  ds = tree.getCheckedItems();
  dynAppend(df, 1);
  
  PanelOffReturn(df, ds);
}
" 0
 E E E
13 2
"BUTTON_CANCEL"
""
1 85 294 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

0
4
LANG:10001 26 Arial,10,-1,5,50,0,0,0,0,0
LANG:10004 26 Arial,10,-1,5,50,0,0,0,0,0
LANG:10000 26 Arial,10,-1,5,50,0,0,0,0,0
LANG:10027 26 Arial,10,-1,5,50,0,0,0,0,0
0  383 422 471 450

T 
4
LANG:10001 6 Cancel
LANG:10004 6 取消
LANG:10000 9 Abbrechen
LANG:10027 16 Отменить
"main()
{
  panelOff(makeDynAnytype(myModuleName(), myPanelName(), makeDynAnytype()));
}" 0
 E E E
1 3 0 "" 0
0
0
LAYER, 1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 2 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 3 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 4 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 5 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 6 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 7 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
3 0 "PANEL_REF1" -1
"" ""
"objects_parts/STD_OBJECTS/ButtonBarBackground.pnl" 0 485 T 1 1.302605210420842 0 1 -103 -71
0
0

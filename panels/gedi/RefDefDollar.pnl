V 14
4
LANG:10001 6 dollar
LANG:10004 6 dollar
LANG:10000 6 dollar
LANG:10027 6 dollar
PANEL,-1 -1 678 189 N "_3DFace" 7
"$DPTs"
"$dp"
"$edit"
"$optional"
"$paramFile"
"$paramFileExists"
"$refFilename"
"main()
{
  string sPath=$refFilename;
  
  if(strpos(sPath,\"/symbols_\")>0)  //the reference is an ElementarySymbol, so $DPE doesn't include DP-Name
    bElementarySymbol=TRUE;
}
" 0
 E E E E 1 -1 -1 0  0 0
""0  1
E "#uses \"sdScriptWizard.ctl\"

bool bElementarySymbol=FALSE;

" 0
 3
"CBRef" "1"
"EClose" E
"dpi" "96"
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
2 4
"Text6"
""
1 21 -27 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
9 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E U  1 E 430 12 464 27
0 2 2 "0s" 0 0 0 192 0 0  430 12 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 4
LANG:10001 5 Value
LANG:10004 6 数值
LANG:10000 4 Wert
LANG:10027 16 Значение
25 0
"tab1"
""
1 9 29 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
1 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,11,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,11,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,11,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,11,5,50,0,0,0,0,0
0  7 27 673 177
"main()
{
  //counter
  int i, j;
  //bool bOptionalParameters = ($optional==\"TRUE\")?TRUE:FALSE;
  int iOptionalParameters=$optional;
  bool b=FALSE,bRuleSort=FALSE;
  //arguments of \"getDollarParams\"
  string  refName;
  dyn_string dollars, values,dsSort,dsSorted,dsRuleValues,dsSortValues;
  //displays value of $parameter
  dyn_string valueDisplay;

  //searchpattern for predefined types of $parameter
  dyn_string pattern = makeDynString(\"$dpe\", \"$dpa\", \"$dpt\",
                                     \"$dp\",  \"$tp\",  \"$td\", \"$tt\", \"$ti\",
                                     \"$i\",   \"$f\",   \"$s\",  \"$u\",  \"$c\",  \"$b\",
                                     \"$BOOL\", \"$COLOR\", \"$PANEL\",\"$DPE\",\"$DP\",
                                     \"$INT\", \"$FLOAT\", \"$STRING\", \"$FONT\", \"$RULE\",
                                     \"$MSGC\", \"$MSGT\",\"$IMAGE\");

  //localized name of $parameter
  string  dpType;

  //show marking
  bool  dpSel, panelSel, colSel;



  //show warning if parametrization panel is not found
  if ($paramFileExists == \"0\")
    ChildPanelOnCentralModal(\"vision/MessageWarning\", \"\",
                             makeDynString(\"$1:\"+$paramFile
                                                +getCatStr(\"gedi\",\"paramFileNotFound\") ) );


  //gets the values of the reference
  getDollarParams(refName,dollars,values);

  //if references exist use them (with system names)
  for (int i = 1; i <= dynlen(dollars); i++)
  {
    if ( (strtolower(dollars[i]) == \"$dpe\") && ($dp != \"\") ) //DATAPOINT-ELEMENT case
      values[i] = dpSubStr($dp, DPSUB_SYS_DP_EL);
    else if ( (strtolower(dollars[i]) == \"$dpt\") && ($DPTs != \"\") ) //DATAPOINT-TYPE case
      values[i] = $DPTs;
    else if ( (strtolower(dollars[i]) == \"$dp\") && ($dp != \"\") ) //DATAPOINT case
      values[i] = dpSubStr($dp, DPSUB_SYS_DP);
  }

  //shows the name of the refrence
  setValue(myModuleName()+\".\"+myPanelName()+\":\"+\"refNameBox\",\"text\",refName);
  //shows the $-parameters and the corresponding values
  for (i = 1; i <= dynlen(dollars); i++)
  {
//     if((iOptionalParameters==4)&&(dollars[i][1]==\"_\")&&((strpos(dollars[i],\"IMAGE\")!=-1)||(strpos(dollars[i],\"COLOR\")>-1)||(strpos(dollars[i],\"UseDirection\")!=-1)))
//     {
      //checking for certain namepatterns
//       for (j = 1; j <= dynlen(pattern) && (strpos(dollars[i], \"$\"+paCutDollarString(pattern[j])) != 0); j++) ;
//         dpType = ( j > dynlen(pattern) ) ? getCatStr(\"gedi\", \"unknown\") : getCatStr(\"gedi\", \"$\"+paCutDollarString(pattern[j]));
//
//       this.name(\"description\");
//
//       valueDisplay = makeDynString(\"\",\"_Window\");
      //building up tabel
//       setValue(\"description\",\"appendLine\",    \"dollarParams\",    dollars[i],
//                                        \"dpTyps\",          dpType,
//                                        \"Selector\",      \"...\", // dpSel    ? \" ...\" : \"  x\", // disabled off!!
//                                        \"value\",           valueDisplay  );
//
//     }
    if((iOptionalParameters==2)&&(dollars[i][1]==\"_\")&&(dollars[i][2]!=\"_\")&&(strpos(dollars[i],\"RULE\")<1)&&(strpos(dollars[i],\"DPE_En\")<1)&&(strpos(dollars[i],\"DPE_Vi\")<1)&&(strpos(dollars[i],\"DPE_Hi\")<1))
    {
      //checking for certain namepatterns
      this.name(\"optional\");
      for (j = 1; j <= dynlen(pattern) && (strpos(dollars[i], \"$_\"+paCutDollarString(pattern[j])) != 0); j++) ;
      dpType = (j <= dynlen(pattern) && paDollarTypeGet(dollars[i]) == 0) ? getCatStr(\"gedi\", \"$\"+paCutDollarString(pattern[j])) : getCatStr(\"gedi\", \"unknown\");

      int iPos;
      iPos=dynContains(values,\"$DP\");

      if ( (values[i][0] == \"$\") && !(bool)$edit )  // value is dollar param and panel is not called from property editor (double click)
        valueDisplay = makeDynString(\"\",\"_Window\");
      else
        valueDisplay = makeDynString(values[i],\"_Window\");
      if(strpos(dollars[i],\"DIRECTION_2\")>-1)
      {

        if (valueDisplay[1] == \"\") // default setting when nothing selected
          valueDisplay[1] = \"horizontal\";

        setValue(\"optional\",\"appendLine\",\"dollarParams\",    dollars[i],
                                         \"info\",            \"?\",
                                         \"dpTyps\",          dpType,
                                         \"Selector\",        \"\",
                                         \"value\",           valueDisplay
                                         );
        int iAnz;
        getValue(\"optional\",\"lineCount\",iAnz);
        setValue(\"optional\",\"cellWidgetRC\",iAnz-1,\"value\",\"ComboBox\",makeDynString(false, \"vertical\", \"horizontal\"));

      }
      else
      {
        if(strpos(dollars[i],\"DIRECTION_4\")>-1)
        {
          if (valueDisplay[1] == \"\") // default setting when nothing selected
            valueDisplay[1] = \"up\";
           setValue(\"optional\",\"appendLine\",\"dollarParams\",    dollars[i],
                               \"info\",                         \"?\",
                               \"dpTyps\",                       dpType,
                               \"Selector\",                     \"\",
                               \"value\",                        valueDisplay
                                         );
        int iAnz;
        getValue(\"optional\",\"lineCount\",iAnz);
        setValue(\"optional\",\"cellWidgetRC\",iAnz-1,\"value\",\"ComboBox\",makeDynString(false, \"up\", \"down\",\"left\",\"right\"));

        }
        else
        {
          //building up tabel
          setValue(\"optional\",\"appendLine\",\"dollarParams\",    dollars[i],
                                           \"info\",            \"?\",
                                           \"dpTyps\",          dpType,
                                           \"Selector\",        \"...\", // dpSel    ? \" ...\" : \"  x\", // disabled off!!
                                           \"value\",           valueDisplay
                                           );
        }
      }

    }
    if((iOptionalParameters==1)&&(dollars[i][1]!=\"_\")&&(strpos(dollars[i],\"RULE\")<1))
    {
      //checking for certain namepatterns
      for (j = 1; j <= dynlen(pattern) && (strpos(dollars[i], \"$\"+paCutDollarString(pattern[j])) != 0); j++) ;
      dpType = (j <= dynlen(pattern) && paDollarTypeGet(dollars[i]) == 0) ? getCatStr(\"gedi\", \"$\"+paCutDollarString(pattern[j])) : getCatStr(\"gedi\", \"unknown\");

      this.name(\"need\");

      if( dpType == getCatStr(\"gedi\", \"$\"+paCutDollarString(\"$BOOL\")) )
      {
        dyn_anytype dabool;
        b = values[i];
        dabool[1]=b;
        dabool[2]=\"_Window\";
        setValue(\"need\",\"appendLine\",    \"dollarParams\",    dollars[i],
                                         \"info\",            \"?\",
                                         \"dpTyps\",          dpType,
                                         \"Selector\",        \"\", // dpSel    ? \" ...\" : \"  x\", // disabled off!!
                                         \"value\",           dabool
                                         );

      }
      else
      {
        valueDisplay = makeDynString(values[i],\"_Window\");
        //building up tabel
        if (!globalExists(\"objwDraggingDollarValues\")||!globalExists(\"objwDraggingDollars\"))
        {
          setValue(\"need\",\"appendLine\",    \"dollarParams\",    dollars[i],
                                           \"info\",            \"?\",
                                           \"dpTyps\",          dpType,
                                           \"Selector\",      \"...\", // dpSel    ? \" ...\" : \"  x\", // disabled off!!
                                           \"value\",           valueDisplay  );
        }
        else
        {
          // needed to support simple Symbols
          // the global objwDraggingDollarValues is filled with the DP name the $DP should have
          int iPos=dynContains(objwDraggingDollars,dollars[i]);
          if (iPos!=0)
          {
            setValue(\"need\",\"appendLine\",    \"dollarParams\",    dollars[i],
                                             \"info\",            \"?\",
                                             \"dpTyps\",          dpType,
                                             \"Selector\",      \"...\", // dpSel    ? \" ...\" : \"  x\", // disabled off!!
                                             \"value\",           objwDraggingDollarValues[iPos] );
          }
          else
          {
            setValue(\"need\",\"appendLine\",    \"dollarParams\",    dollars[i],
            							     \"info\",            \"?\",
                                             \"dpTyps\",          dpType,
                                             \"Selector\",      \"...\", // dpSel    ? \" ...\" : \"  x\", // disabled off!!
                                             \"value\",           valueDisplay );
          }
        }
      }
    }
    if((iOptionalParameters==3)&&((strpos(dollars[i],\"RULE\")>0)||(strpos(dollars[i],\"DPE_En\")>0)||(strpos(dollars[i],\"DPE_Vi\")>0)||(strpos(dollars[i],\"DPE_Hi\")>0)))
    {
      //checking for certain namepatterns
      this.name(\"rule\");
      for (j = 1; j <= dynlen(pattern) && (strpos(dollars[i], \"$_\"+paCutDollarString(pattern[j])) != 0); j++) ;
      dpType = (j <= dynlen(pattern) && paDollarTypeGet(dollars[i]) == 0) ? getCatStr(\"gedi\", \"$\"+paCutDollarString(pattern[j])) : getCatStr(\"gedi\", \"unknown\");

      if(values[i][0]==\"$\")
        valueDisplay = makeDynString(\"\",\"_Window\");
      else
        valueDisplay = makeDynString(values[i],\"_Window\");

      //building up tabel
      setValue(\"rule\" ,   \"appendLine\",\"dollarParams\",    dollars[i],
                                       \"info\",            \"?\",
                                       \"dpTyps\",          dpType,
                                       \"Selector\",        \"...\", // dpSel    ? \" ...\" : \"  x\", // disabled off!!
                                       \"value\",           valueDisplay
                                       );
      bRuleSort=TRUE;
    }
  }
  if (globalExists(\"objwDraggingDollarValues\"))
  {
    removeGlobal(\"objwDraggingDollarValues\");
  }
  if (globalExists(\"objwDraggingDollars\"))
  {
    removeGlobal(\"objwDraggingDollars\");
  }
  if(bRuleSort)
  {
    dsSort=rule.getColumnN(0);
    dsRuleValues=rule.getColumnN(4);
    for(int i=1;i<=dynlen(dsSort);i++)
    {
      if(strpos(dsSort[i], \"_En\")>0)
      {
        dynAppend(dsSorted,dsSort[i]);
        dynAppend(dsSortValues,dsRuleValues[i]);
      }
    }
    for(int i=1;i<=dynlen(dsSort);i++)
    {
      if(strpos(dsSort[i], \"_Vis\")>0)
      {
        dynAppend(dsSorted,dsSort[i]);
        dynAppend(dsSortValues,dsRuleValues[i]);
      }
    }
    for(int i=1;i<=dynlen(dsSort);i++)
    {
      if(strpos(dsSort[i], \"_Hig\")>0)
      {
        dynAppend(dsSorted,dsSort[i]);
        dynAppend(dsSortValues,dsRuleValues[i]);
      }
    }
    rule.deleteAllLines();
    for(int i=1;i<=dynlen(dsSort);i++)
    {
      this.name(\"rule\");
      for (j = 1; j <= dynlen(pattern) && (strpos(dsSorted[i], \"$_\"+paCutDollarString(pattern[j])) != 0); j++) ;
      dpType = (j <= dynlen(pattern) && paDollarTypeGet(dsSorted[i]) == 0) ? getCatStr(\"gedi\", \"$\"+paCutDollarString(pattern[j])) : getCatStr(\"gedi\", \"unknown\");

      if(dsSortValues[i][0]==\"$\")
        valueDisplay = makeDynString(\"\",\"_Window\");
      else
        valueDisplay = makeDynString(dsSortValues[i],\"_Window\");

      //building up tabel
      setValue(\"rule\" ,   \"appendLine\",\"dollarParams\", dsSorted[i],
                                       \"info\",         \"?\",
                                       \"dpTyps\",       dpType,
                                       \"Selector\",     \"...\", // dpSel    ? \" ...\" : \"  x\", // disabled off!!
                                       \"value\",        valueDisplay
                                       );
    }
  }

}




















" 0
"string sMsgCatPath,sImage;
anytype aValue;
dyn_anytype daLineN;
main(int row, string column, string value)
{
  int iDollarType=0,iPos=0,iAnswer;
  dyn_float dfResult,dfRule;
  string dpSel,panelSel,colSel,sCell,sDP,sDPE,sMsgCat,sFont,sFilter,sMsgCatText,sKeyword,sText,sState,sPanelName,sText1;
  dyn_string dsLine,dsMsg,dsRow,dsRow1,filePath,fileNames,dsResult,dsMenueEntry,dsRule;
  dyn_int diMsgPos;
  langString lsLang;
  bool bTest,bMsgText=FALSE;
  sPanelName=getCatStr(\"stdlib\",\"warning\");
  sText=getCatStr(\"stdlib\",\"deleteDP\");
  sText1=getCatStr(\"stdlib\",\"cancel\");
  if(value==\"...\")
  {
    sState=getCatStr(\"gedi\",\"unknown\");
    dsLine=this.getLineN(row);
    iDollarType=paDollarTypeGet(dsLine[1]);
    if(iDollarType==0)
    {
      dsRow=this.getColumnN(0); 
      for(int i=1;i<=dynlen(dsRow);i++)
      {
        if((strpos(dsRow[i],\"$MSGC\")!=-1)||(strpos(dsRow[i],\"$_MSGC\")!=-1))
          iPos=i;
      }
      dsRow=this.getColumnN(4);   
      if(iPos!=0)
        if((strpos(dsRow[iPos],\"$\")==-1)&&(dsRow[iPos]!=\"\"))
          bMsgText=TRUE;
      dsRow1=this.getColumnN(2);
      if(sState==dsRow1[row+1])
        ChildPanelOnCentralReturn(\"gedi/default_menu\", \"menu\", makeDynString(\"$MSG:\"+bMsgText), dfResult, dsResult);
      if(dynlen(dfResult)>0)
        iDollarType=dfResult[1];
    }    
    switch (iDollarType)
    {
      case 0          : 
                       break;
                       
      case DOLLARDPE  :dpSelector(dpSel,true);
                       if(dpSel!=\"\") 
                       {                          
                         dyn_string dsSystems;
                         dyn_uint dui;
                         getSystemNames(dsSystems, dui);
                         bool bWithSysName = FALSE;
                         //check if Systemname was selected in the dpSelector                        
                         for(int k = 1; k <= dynlen(dsSystems); k++)
                         {
                           if(strpos(dpSel, dsSystems[k]+\":\") == 0)//IM 109657
                           {
                             bWithSysName = TRUE;
                             break;
                           }
                         }
                         
                         if (bWithSysName)
                         { 
                           sDPE=dpSubStr(dpSel,DPSUB_SYS_DP_EL_CONF_DET_ATT); //IM 102203
                           sDP=dpSubStr(dpSel,DPSUB_SYS_DP);
                         }
                         else
                         { 
                           sDPE=dpSubStr(dpSel,DPSUB_DP_EL_CONF_DET_ATT); //IM 102203
                           sDP=dpSubStr(dpSel,DPSUB_DP);
                         } 
                         if(bElementarySymbol)
                         {
                           strreplace(sDPE, sDP,\"\"); 
                           if(strpos(sDPE,\".\")<1)
                             sDPE+=\".\";
                           if(sDPE[strlen(sDPE)-1]==\".\")
                             sDPE=substr(sDPE, 1, strlen(sDPE)-2);
                         }
                         setValue(\"\",\"cellValueRC\",row,\"value\",sDPE);
                       } 
                       break;
                       
      case DOLLARDP  : sText=getCatStr(\"stdlib\",\"deleteDP\");
                       sPanelName=getCatStr(\"stdlib\",\"warning\");
                       sText1=getCatStr(\"stdlib\",\"cancel\");
                       if(bElementarySymbol)
                         ChildPanelOnCentralModalReturn (\"vision/MessageWarning2\", sPanelName, makeDynString(\"$1:\"+sText,\"$2:OK\",\"$3:\"+sText1)
                                                                                 , dfResult, dsResult);
                       else
                         dfResult=makeDynFloat(1);                                                                        
                       if(dfResult[1]==0)
                         break;
                       
                       dyn_string dsDpts;
                       string sSymbol = $refFilename;
                       dptsGetDptsForSymbol(sSymbol,dsDpts); //get info which DPTs can use the symbol

                       string sDptFilter; //if the symbol is configurated for DPTs, open dpSelector filtered
                       
                       if (dynlen(dsDpts)>1)
                         sDptFilter=\"{\";
                       
                       for (int k=1; k<=dynlen(dsDpts); k++)
                       {
                         if (k>1)
                           sDptFilter+=\",\";
                         
                         sDptFilter+=dsDpts[k];
                       }
                       
                       if (dynlen(dsDpts)>1)
                         sDptFilter+=\"}\";
                       
                       dpSelector(dpSel,true, \"ALL_SYSTEM_NAME_SYS\", \"\", sDptFilter);
                       if(dpSel!=\"\") 
                       { 
                         dyn_string dsSystems;
                         dyn_uint dui;
                         getSystemNames(dsSystems, dui);
                         bool bWithSysName = FALSE;
                         //check if Systemname was selected in the dpSelector                                                 
                         for(int k = 1; k <= dynlen(dsSystems); k++)
                         {
                           if(strpos(dpSel, dsSystems[k]+\":\") == 0)//IM 109657
                           {
                             bWithSysName = TRUE;
                             break;
                           }
                         } 
                         if (bWithSysName)
                         { 
                           sDP=dpSubStr(dpSel,DPSUB_SYS_DP);
                         }
                         else
                         { 
                           sDP=dpSubStr(dpSel,DPSUB_DP);
                         } 
                         setValue(\"\",\"cellValueRC\",row,\"value\",sDP);
                       } 
                       break;
                       
      case DOLLARPNL  :panelSelector(panelSel); 
 
                       if(panelSel!=\"\") 
                         setValue(\"\",\"cellValueRC\",row,\"value\",panelSel);
                       break;
                                              
      case DOLLARCOLOR:colorEditor(colSel);
                       if(colSel!=\"\")   
                         setValue(\"\",\"cellValueRC\",row,\"value\",colSel);
                       break;
                       
      case DOLLARRULE :aValue=this.cellValueRC(row, \"value\");
                       ChildPanelOnCentralReturn(\"gedi/RuleCheck.pnl\",\"MsgCat\",makeDynString(\"$Rule:\"+aValue),dfRule,dsRule);
                       if(dynlen(dsRule)>0)
                       {               
                         setValue(\"\",\"cellValueRC\",row,\"value\",dsRule[1]);
                       }
                       break;
        
      case DOLLARMSGC :sMsgCatText=getCatStr(\"stdlib\",\"MsgCat\");
                       ChildPanelOnCentralReturn(\"gedi/RefDefMsg.pnl\",sMsgCatText,makeDynString(),diMsgPos,dsMsg);
                       if(dynlen(dsMsg)>0)
                       {
                         dsRow=this.getColumnN(0);
                         sCell=dsRow[row+1];
                         paGetMessageCatFiles(fileNames, filePath);
                         MSGCATPATH[sCell]=filePath[diMsgPos[1]];
                         sMsgCatPath=filePath[diMsgPos[1]];
                         setValue(\"\",\"cellValueRC\",row,\"value\",dsMsg[1]);
                       } 
                       break;
                       
      case DOLLARMSGT :sKeyword=getCatStr(\"stdlib\",\"keyword\");
                       dsRow=this.getColumnN(0); 
                       for(int i=1;i<=dynlen(dsRow);i++)
                       {
                         if((strpos(dsRow[i],\"$MSGC\")!=-1)||(strpos(dsRow[i],\"$_MSGC\")!=-1))
                           iPos=i;
                       }
                       dsRow=this.getColumnN(4);
                       if((strpos(dsRow[iPos],\"$\")==-1)&&(dsRow[iPos]!=\"\"))
                       {
                         sMsgCat=dsRow[iPos]+\".cat\";
                         if(sMsgCatPath==\"\")
                         {
                           sMsgCatPath=getPath(MSG_REL_PATH,sMsgCat);
                           sMsgCatPath=strrtrim(sMsgCatPath, sMsgCat);
                         }
                         ChildPanelOnCentralReturn(\"gedi/Msg.pnl\",sKeyword,makeDynString(\"$MsgCat:\"+sMsgCat,\"$MsgCatPath:\"+sMsgCatPath),dfResult,dsResult); 
                         if(dynlen(dsResult)>0)
                           setValue(\"\",\"cellValueRC\",row,\"value\",dsResult[1]);
                       } 
                       break;
                       
      case DOLLARFONT :fontSelector(sFont);
                       if(sFont!=\"\") 
                         setValue(\"\",\"cellValueRC\",row,\"value\",sFont);
                       break;
                         
      
    }
  }
  else if (value == \"?\")
  {
    string descr = sdGetDollarDescription($refFilename, this.cellValueRC(row, \"dollarParams\"));
    if (descr != \"\")
      ChildPanelOnCentral(\"vision/MessageInfo1\", \"Info\", makeDynString(descr));
    else 
      ChildPanelOnCentral(\"vision/MessageInfo1\", \"Info\", makeDynString(getCatStr(\"ScriptWizard\", \"no_description_available\")));
  }
  else
  {
    string sDollarDp;
    dyn_string dsDollars;
    if(shapeExists(\"need\"))
    {
      getValue(\"need\",\"getColumnN\",0,dsDollars);
      int iPositionDp;
      iPositionDp=dynContains(dsDollars,\"$DP\");
      if((iPositionDp!=0)&&(column==\"value\")&&(row==iPositionDp-1))
      {
        getValue (\"need\", \"getLineN\", iPositionDp-1, daLineN);
        if((bElementarySymbol)&&(daLineN[4]!=\"$DP\"))
          ChildPanelOnCentralModalReturn (\"vision/MessageWarning2\", sPanelName, makeDynString(\"$1:\"+sText,\"$2:OK\",\"$3:\"+sText1) ,dfResult, dsResult);
        else
          dynAppend(dfResult,1);

        if(dfResult[1]!=1)
          setValue(\"need\", \"updateLine\", row+1,\"dollarParams\",\"$DP\",\"value\", daLineN[1]); 
        else 
          setValue(\"need\", \"updateLine\", row+1,\"dollarParams\",\"$DP\",\"value\", value);
          //setValue(\"need\", \"updateLine\", row,\"value\", value);

      }
    }
  }
}






" 0
 0 0 1 5 6 "dollarParams" 24 1 0 "s" 4
LANG:10001 10 $Parameter
LANG:10004 8 $-参数
LANG:10000 10 $Parameter
LANG:10027 18 $-параметр
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

200 "info" 1 1 0 "s" 3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

19 "dpTyps" 19 1 0 "s" 4
LANG:10001 4 Type
LANG:10004 6 类型
LANG:10000 3 Typ
LANG:10027 6 Тип
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

161 "Selector" 2 1 0 "s" 4
LANG:10001 3 Dpe
LANG:10004 3 DPE
LANG:10000 3 Dpe
LANG:10027 3 DPE
"main()
{
}
" 0

3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

29 "value" 28 1 1 "s" 4
LANG:10001 5 Value
LANG:10004 6 数值
LANG:10000 4 Wert
LANG:10027 16 Значение
E
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

234 
24 24 "" 1 4
LANG:10001 2 #1
LANG:10004 2 #1
LANG:10000 2 #1
LANG:10027 2 #1
"" 1 4
LANG:10001 2 #2
LANG:10004 2 #2
LANG:10000 2 #2
LANG:10027 2 #2
"" 1 4
LANG:10001 2 #3
LANG:10004 2 #3
LANG:10000 2 #3
LANG:10027 2 #3
"" 1 4
LANG:10001 2 #4
LANG:10004 2 #4
LANG:10000 2 #4
LANG:10027 2 #4
"" 1 4
LANG:10001 2 #5
LANG:10004 2 #5
LANG:10000 2 #5
LANG:10027 2 #5
"" 1 4
LANG:10001 2 #6
LANG:10004 2 #6
LANG:10000 2 #6
LANG:10027 2 #6
8 78
4
LANG:10001 26 Arial,-1,11,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,11,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,11,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,11,5,50,0,0,0,0,0
0 0 2 0 1 7
1 0
6 1
"Border3"
""
1 26 66 E E E 1 E 1 E N "Schwarz" E N "_Transparent" E E
 E E
3 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

3
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E 1 0 1 -1 0 0 E 10 10 672 33
2 2
"Text4"
""
1 25 -24 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
5 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E U  1 E 22 14 91 29
0 2 2 "0s" 0 0 0 192 0 0  22 14 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 4
LANG:10001 10 $Parameter
LANG:10004 8 $-参数
LANG:10000 10 $Parameter
LANG:10027 18 $-параметр
2 3
"Text5"
""
1 59 -25 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
7 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E U  1 E 235 13 293 28
0 2 2 "0s" 0 0 0 192 0 0  235 13 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 Arial,-1,13,5,50,0,0,0,0,0
0 4
LANG:10001 9 Data type
LANG:10004 12 数据类型
LANG:10000 8 Datentyp
LANG:10027 19 Тип данных
0
LAYER, 1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 2 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 3 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 4 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 5 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 6 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 7 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
0

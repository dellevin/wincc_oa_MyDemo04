V 14
4
LANG:10001 20 Reference Definition
LANG:10004 15 定义子面板
LANG:10000 19 Referenz Definition
LANG:10027 56 Определение параметров ссылок
PANEL,-1 -1 709 316 N "_3DFace" 5
"$DPTs"
"$dp"
"$paramFile"
"$paramFileExists"
"$refFilename"
"main()
{
  dyn_string dollars,values;
  string refName=refNameBox.text();
  getDollarParams(refName,dollars,values); 
  for (int i = 1; i <= dynlen(dollars); i++) 
  {    
    string sRot;    
    if(strpos(dollars[i],\"DIRECTION_\")!=-1)
    {
      sRot=values[i];
      if(sRot==\"vertical\") fRotationActual=90;
      else if (sRot==\"horizontal\") fRotationActual=0;
      else if (sRot==\"up\") fRotationActual=0;
      else if (sRot==\"down\") fRotationActual=180;
      else if (sRot==\"left\") fRotationActual=90;
      else if (sRot==\"right\") fRotationActual=270;
    }
  } 
  for (int i = 1; i <= dynlen(dollars); i++) 
  {    
    string sRot;    
    if(strpos(dollars[i],\"ENUM_UseDirection\")!=-1)
    {
      sRot=values[i];
      if(sRot==\"vertical\") fRotationActual=90;
      else if (sRot==\"horizontal\") fRotationActual=0;
      else if (sRot==\"up\") fRotationActual=0;
      else if (sRot==\"down\") fRotationActual=180;
      else if (sRot==\"left\") fRotationActual=90;
      else if (sRot==\"right\") fRotationActual=270;
    }
  }
  for (int i = 1; i <= dynlen(dollars); i++) 
  {    
    string sRot;    
    if(strpos(dollars[i],\"ROTATION\")!=-1)
    {
      if(values[i]!=\"\");      
        fRotationActual=values[i];
    }
  }
}
" 0
 E E E E 1 -1 -1 0  0 0
""0  1
E "string sRefName;
float fRotationActual;" 0
 3
"CBRef" "1"
"EClose" E
"dpi" "96"
0 0 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
13 0
"Button1"
""
1 498 278 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
1 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 arial,-1,13,5,50,0,0,0,0,0
0  498 278 588 308

T 
4
LANG:10001 2 OK
LANG:10004 6 确定
LANG:10000 2 OK
LANG:10027 2 OK
"main()
{
  //counter
  int iLines, iLines1,iLines2, n;
  //arguments for \"setDollarParams\"
  string  sDollar,sValue; 
  string sColor,sImage,sStates,sDirection,sUseDirection,sShapeForm,sImageDirection,sShapeDirection,sImageDef;
  dyn_string dsDollars; 
  dyn_string dsValues,dollars,values;
  bool bError=FALSE; 
    
  //gets the assigned values for the reference
  getValue(\"refNameBox\", \"text\", sRefName);
  if(shapeExists(\"need\"))
    getValue(\"need\", \"lineCount\", iLines);
  if(shapeExists(\"optional\"))
    getValue(\"optional\", \"lineCount\", iLines1);
  if(shapeExists(\"rule\"))
    getValue(\"rule\", \"lineCount\", iLines2);
  //if(iLines>0) IM 110713
  {
    for ( n=1; n<=iLines; n++ )
    {
      getValue(\"need\", \"cellValueRC\", n-1, \"dollarParams\", dsDollars[n]);
      getValue(\"need\", \"cellValueRC\", n-1, \"value\", dsValues[n]);
    }
    for ( n=1; n<=iLines1; n++ )
    {
      getValue(\"optional\", \"cellValueRC\", n-1, \"dollarParams\", sDollar);
      getValue(\"optional\", \"cellValueRC\", n-1, \"value\", sValue);
      dynAppend(dsDollars,sDollar);
      dynAppend(dsValues,sValue);      
    }
    for ( n=1; n<=iLines2; n++ )
    {
      getValue(\"rule\", \"cellValueRC\", n-1, \"dollarParams\", sDollar);
      getValue(\"rule\", \"cellValueRC\", n-1, \"value\", sValue);
      dynAppend(dsDollars,sDollar);
      dynAppend(dsValues,sValue);
    }
    //neu
    bool bVisibleRegTab;
    bVisibleRegTab=TAB1.registerVisible(1);
    if(bVisibleRegTab)
    {
      string sColorError=getCatStr(\"gedi\",\"colorError\");
      string sColorError2=getCatStr(\"gedi\",\"colorError2\");
      string sImageError=getCatStr(\"gedi\",\"imageError\");
      string sImageError2=getCatStr(\"gedi\",\"imageError2\");
      string sValueError=getCatStr(\"gedi\",\"valueError\");
      string sNotSelected=getCatStr(\"gedi\",\"nothingSelected\");
      string sWarnung=getCatStr(\"gedi\",\"warning\");
      string sBothError=getCatStr(\"gedi\",\"bothError\");
      string sValue;
      int iColorPos,iImagePos,iSelectionDir;
      int iValueActive;
      getValue(\"colorField\",\"text\",sColor);
      getValue(\"imageField\",\"text\",sImage);
      getValue(\"valuesField\",\"text\",sValue);
      getValue(\"spinstate\",\"text\",sStates);
      getValue(\"selectDirection\",\"selectedPos\",iSelectionDir);
      getValue(\"direction\",\"text\",sImageDirection);
      getValue(\"shapeDirection\",\"text\",sShapeDirection);
      getValue(\"shapeFormField\",\"text\",sShapeForm);
      getValue(\"colorCount\",\"selectedPos\",iColorPos);
      getValue(\"imageCount\",\"selectedPos\",iImagePos);
      getValue(\"selectionValue\",\"number\",iValueActive);
      getValue(\"imgdef\",\"text\",sImageDef);

      if(iColorPos==1&&iImagePos==1)
      {
        ChildPanelOnCentralModal(\"/vision/MessageWarning\",sWarnung,makeDynString(\"$1:\"+sNotSelected));
        bError=TRUE;
      } 
      else  if(iColorPos==2&&iImagePos==2)
            {
              ChildPanelOnCentralModal(\"/vision/MessageWarning\",sWarnung,makeDynString(\"$1:\"+sBothError));
              bError=TRUE;
            } 
      else  if(iColorPos==1&&iImagePos==2)
            {
              ChildPanelOnCentralModal(\"/vision/MessageWarning\",sWarnung,makeDynString(\"$1:\"+sColorError2));
              bError=TRUE;
            }  
      else  if(iColorPos==2&&iImagePos==1)
            {
              ChildPanelOnCentralModal(\"/vision/MessageWarning\",sWarnung,makeDynString(\"$1:\"+sImageError2));
              bError=TRUE;
            }
      else  if(iColorPos>1&&(strlen(sColor)==0))
            {
              ChildPanelOnCentralModal(\"/vision/MessageWarning\",sWarnung,makeDynString(\"$1:\"+sColorError));
              bError=TRUE;
            }
      else  if(iImagePos>1&&(strlen(sImage)==0))
            {
              ChildPanelOnCentralModal(\"/vision/MessageWarning\",sWarnung,makeDynString(\"$1:\"+sImageError));
              bError=TRUE;
            }
      else  if(iValueActive==1&&(strlen(sValue)==0))
            {
              ChildPanelOnCentralModal(\"/vision/MessageWarning\",sWarnung,makeDynString(\"$1:\"+sValueError));
              bError=TRUE;
            }
      dynAppend(dsDollars,makeDynString(\"$__ENUM_Color\",\"$__ENUM_Image\",\"$__ENUM_Value\",\"$__ENUM_ActState\", \"$__ENUM_ShapeForm\", \"$__ENUM_ImageDirection\", \"$__ENUM_ShapeDirection\", \"$__ENUM_ImageDef\"));
      dynAppend(dsValues,makeDynString(sColor,sImage,sValue,sStates,sShapeForm,sImageDirection,sShapeDirection,sImageDef));
/*
      if(sUseDirection==\"$_DIRECTION_2\")
      {
         dynAppend(dsDollars,makeDynString(\"$__ENUM_UseDirection\"));
         dynAppend(dsValues,makeDynString(\"$_DIRECTION_2\"));
      }
      else if(sUseDirection==\"$_DIRECTION_4\")
          {
             dynAppend(dsDollars,makeDynString(\"$__ENUM_UseDirection\"));
             dynAppend(dsValues,makeDynString(\"$_DIRECTION_4\"));
          }
      else  if(sUseDirection==\"up\")
            {
              dynAppend(dsDollars,makeDynString(\"$__ENUM_UseDirection\"));
              dynAppend(dsValues,makeDynString(\"up\"));
            }
      else  if(sUseDirection==\"down\")
            {
              dynAppend(dsDollars,makeDynString(\"$__ENUM_UseDirection\"));
              dynAppend(dsValues,makeDynString(\"down\"));
            }
      else  if(sUseDirection==\"left\")
            {
              dynAppend(dsDollars,makeDynString(\"$__ENUM_UseDirection\"));
              dynAppend(dsValues,makeDynString(\"left\"));
            }
      else  if(sUseDirection==\"right\")
            {
              dynAppend(dsDollars,makeDynString(\"$__ENUM_UseDirection\"));
              dynAppend(dsValues,makeDynString(\"right\"));
            }
      else  if(sUseDirection==\"\")
            {
              dynAppend(dsDollars,makeDynString(\"$__ENUM_UseDirection\"));
              dynAppend(dsValues,makeDynString(\"\"));
            }
*/

      // speichert die Bilder in einem unsichtbaren Textfeld damit später die Bilder zur Verfügung stehen.
      shape shapeInfo = getConstructShape(\"IMAGES_INFO\");
      
      if (imageCount.selectedPos() > 3)
      {
        setValue(shapeInfo, \"text\", sImage);
      }
      else
      {
        setValue(shapeInfo, \"text\", \"\");
      }
      
      // rotation mechanism start
      float fRotation=0,fRotationKomp;
      dyn_anytype dsShapes;
      dyn_string dsNames;   
      if(sUseDirection==\"up\"||sDirection==\"horizontal\")
        fRotation=0;
      if(sUseDirection==\"down\")
        fRotation=180;
      if(sUseDirection==\"left\"||sDirection==\"vertical\")
        fRotation=90;
      if(sUseDirection==\"right\")
        fRotation=270;
      if(sUseDirection!=\"\")
      {    
        dsShapes=getConstructRefShapes();
        for(int i=1;i<=dynlen(dsShapes);i++)
        {
          shape s=dsShapes[i];        
          string name;        
          getValue(s,\"name\",name);
          dynAppend(dsNames,name);
        }
        for(int i=dynlen(dsNames);i>=1;i--)
        {
          if(strpos(dsNames[i],\"symbol\")==-1)
            dynRemove(dsShapes,i);
        }  
        fRotationKomp=0;      
        for(int i=1;i<=dynlen(dsShapes);i++)
        {   
          shape sShape=dsShapes[i];
          float fRot;
          getValue(sShape,\"rotation\",fRot);
          fRotationKomp=fRotation+fRot-fRotationActual;  
          setValue(sShape,\"rotation\",fRotationKomp);
        }
      }
      else
      {
        dsShapes=getConstructRefShapes();
        for(int i=1;i<=dynlen(dsShapes);i++)
        {
          shape s=dsShapes[i];        
          string name;        
          getValue(s,\"name\",name);
          dynAppend(dsNames,name);
        }
        for(int i=dynlen(dsNames);i>=1;i--)
        {
          if(strpos(dsNames[i],\"symbol\")==-1)
            dynRemove(dsShapes,i);
        }  
        fRotationKomp=0;      
        for(int i=1;i<=dynlen(dsShapes);i++)
        {   
          shape sShape=dsShapes[i];
          float fRot;
          getValue(sShape,\"rotation\",fRot);  
          setValue(sShape,\"rotation\",fRot-fRotationActual);
        }
      }
      // rotation mechanism end
    }
    // wird AUCH ausgeführt, wenn symbol als Referenz verwendet wird
    if(!bError)
    {
      if(sColor!=\"\")
      {      
        shape sRect=getConstructShape(\"symbol_rect\");
        dyn_string dsSplit=strsplit(sColor,\"|\");
        for(int i=1;i<=dynlen(dsSplit);i++)
          if(dsSplit[i]!=\"\")
          {
            setValue(sRect,\"backCol\",dsSplit[i]);
            break;
          }
      }
      if(sImage!=\"\")
      {
        shape sRect=getConstructShape(\"symbol_image\");
        dyn_string dsSplit=strsplit(sImage,\"|\");
        for(int i=1;i<=dynlen(dsSplit);i++)
          if(dsSplit[i]!=\"\")
          {
            setValue(sRect,\"fill\",\"[pattern,[fit,any,\"+dsSplit[i]+\"]]\");
            break;
          }
      }      
      setDollarParams(sRefName, dsDollars, dsValues);
      dyn_anytype dsShapes;
      dyn_string dsNames;
      float fRotation=0;
      string sRotation;
      shape Shape;
      int iPos;  
      getDollarParams(sRefName,dollars,values);  
      if(dynContains(dollars,\"$_ROTATION\")>0)
      {
        iPos=dynContains(dollars,\"$_ROTATION\");
        fRotation=values[iPos];        
 //       if(fRotation!=0)
 //       {    
          dsShapes=getConstructRefShapes();
          for(int i=1;i<=dynlen(dsShapes);i++)
          {
            shape s=dsShapes[i];        
            string name;        
            getValue(s,\"name\",name);
            dynAppend(dsNames,name);
          }
          for(int i=dynlen(dsNames);i>=1;i--)
          {
            if(strpos(dsNames[i],\"symbol\")==-1)
              dynRemove(dsShapes,i);
          }
          for(int i=1;i<=dynlen(dsShapes);i++)
          { 
            fRotation=dsValues[dynContains(dollars,\"$_ROTATION\")];  
            shape sShape=dsShapes[i];
            float fRot;
            getValue(sShape,\"rotation\",fRot);       
            setValue(sShape,\"rotation\",fRotation+fRot-fRotationActual);
          }
      }  

      
      int idxDir4 = dynContains(dollars,\"$_DIRECTION_4\");
      int idxDir2 = dynContains(dollars,\"$_DIRECTION_2\");

      if(idxDir4 || idxDir2)
      {
        int idx = idxDir4 > 0 ? idxDir4 : idxDir2;
        sRotation=dsValues[idx];
        if(sRotation!=\"\")
        {    
          dsShapes=getConstructRefShapes();
          for(int i=1;i<=dynlen(dsShapes);i++)
          {
            shape s=dsShapes[i];        
            string name;        
            getValue(s,\"name\",name);
            dynAppend(dsNames,name);
          }
          for(int i=dynlen(dsNames);i>=1;i--)
          {
            if(strpos(dsNames[i],\"symbol\")==-1)
            {
              dynRemove(dsShapes,i);
            }
          }
          
          int idxImg;
          if((sRotation==\"up\") || (sRotation==\"horizontal\"))
          {
            fRotation=0;
            if (idxDir4)
              idxImg = 1;
            else
              idxImg = 2;
            
          }
          if(sRotation==\"down\")
          {
            fRotation=180;
            idxImg = 2;
          }
          if((sRotation==\"left\") || (sRotation==\"vertical\")) // wenn hier ändern, dann auch fRotationActual berücksichtigen (aktuell auf 90)
          {
            fRotation=90;
            if (idxDir4)
              idxImg = 3;
            else
              idxImg = 1;
          }
          if(sRotation==\"right\")
          {
            fRotation=270;
            idxImg = 4;
          }
          
          // image austauschen wenn vorhanden
          bool bRotateImage = true;
          shape shapeImageInfo;
          if (findRefShape(\"IMAGES_INFO\", shapeImageInfo))
          {
            string info = shapeImageInfo.text();
            if (info != \"\")
            {
              bRotateImage = false;
              dyn_string strDirs = strsplit(info, \"|\");
              dynRemove(strDirs,1); // löscht 1. leeres Item
              
              setValue(getConstructShape(\"symbol_image\"),\"fill\",\"[pattern,[fit,any,pictures/\"+ strDirs[idxImg] +\"]]\");
            }
          }
          for(int i=1;i<=dynlen(dsShapes);i++)
          {   
            shape sShape=dsShapes[i];
            float fRot;
            if ((sShape.name == \"symbol_image\") && (bRotateImage == false))
              continue;
            getValue(sShape,\"rotation\",fRot);
            setValue(sShape,\"rotation\",fRotation+fRot-fRotationActual);
          }
      }
      }
      closeDialog();
    }
  }
}
  
bool findRefShape(string shapeName, shape &retShape)
{
  dyn_anytype allShapes = getConstructRefShapes();
  string name;        

  for(int i=1;i<=dynlen(allShapes);i++)
  {
    shape s=allShapes[i];        
    getValue(s,\"name\",name);
    if (name == shapeName)
    {
      retShape = s;
      return true;
    }
  }
  
  return false;
  
}
  






" 0
 E E E
13 1
"Button2"
""
1 590 278 E E E 1 E 1 E N "_ButtonText" E N "_Button" E E
 E E
3 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 arial,-1,13,5,50,0,0,0,0,0
0  590 278 680 308

T 
4
LANG:10001 6 Cancel
LANG:10004 6 取消
LANG:10000 9 Abbrechen
LANG:10027 16 Отменить
"main()
{
  closeDialog();
}" 0
 E E E
14 4
"refFileNameBox"
""
1 67.8955223880597 14 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
9 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 arial,-1,13,5,50,0,0,0,0,0
0  68 14 354 40
2 "0s" 0 0 0 0 0 -1  E "main()
{
  this.text($refFilename);
}" 0
 E
28 6
"TAB1"
""
1 9.999999999999989 56 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
12 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 arial,-1,13,5,50,0,0,0,0,0
0  8 54 700 272
"main()
{
  dyn_string dsDollars,dsValues,dsCutString;
  string sPath=refFileNameBox.text();
  dsCutString=strsplit(sPath,\"/\");
  sPath=dsCutString[dynlen(dsCutString)];
  TAB1.registerVisible(1,FALSE);
  TAB1.registerVisible(2,FALSE);
  TAB1.registerVisible(3,FALSE);
  if(strpos(sPath,\"enumObject\")!=-1||strpos(sPath,\"boolObject\")!=-1)
    TAB1.registerVisible(1,TRUE);
  getDollarParams(sRefName,dsDollars,dsValues);
  for(int i=1;i<=dynlen(dsDollars);i++)
  {
    if((dsDollars[i][1]==\"_\")&&(strpos(dsDollars[i],\"RULE\")==-1)&&(strpos(dsDollars[i],\"DPE_En\")==-1)&&(strpos(dsDollars[i],\"DPE_Hi\")==-1)&&(strpos(dsDollars[i],\"DPE_Vi\")==-1))
      TAB1.registerVisible(2,TRUE);
    if(strpos(dsDollars[i],\"RULE\")>0)
      TAB1.registerVisible(3,TRUE);
  }
}" 0
4 "needed" 4
LANG:10001 9 mandatory
LANG:10004 12 强制性的
LANG:10000 13 Verpflichtend
LANG:10027 24 Обязательные
1 "gedi/RefDefDollar.pnl" 3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
6
"$DPTs""$DPTs"
"$dp""$dp"
"$optional""1"
"$paramFile""$paramFile"
"$paramFileExists""$paramFileExists"
"$refFilename""$refFilename"

"description" 4
LANG:10001 14 representation
LANG:10004 13 表现形式 
LANG:10000 11 Darstellung
LANG:10027 22 Отображение
1 "gedi/representation.pnl" 3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
1
"$refFilename""$refFilename"

"optional" 4
LANG:10001 8 optional
LANG:10004 9 可选项
LANG:10000 8 Optional
LANG:10027 28 Дополнительные
1 "gedi/RefDefDollar.pnl" 3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
6
"$DPTs""$DPTs"
"$dp""$dp"
"$optional""2"
"$paramFile""$paramFile"
"$paramFileExists""$paramFileExists"
"$refFilename""$refFilename"

"rule" 4
LANG:10001 4 rule
LANG:10004 6 规则
LANG:10000 6 Regeln
LANG:10027 14 Правило
1 "gedi/RefDefDollar.pnl" 3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
6
"$DPTs""$DPTs"
"$dp""$dp"
"$optional""3"
"$paramFile""$paramFile"
"$paramFileExists""$paramFileExists"
"$refFilename""$refFilename"


2 16
"Text2"
""
1 21 15 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
17 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E U  1 E 10 20 49 35
0 2 2 "0s" 0 0 0 192 0 0  10 20 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 arial,-1,13,5,50,0,0,0,0,0
0 4
LANG:10001 6  Panel
LANG:10004 6 面板
LANG:10000 6  Panel
LANG:10027 12 Панель
2 18
"Text1"
""
1 36 14 E E E 1 E 1 E N "_3DText" E N "_3DFace" E E
 E E
21 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignCenter"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 1 0 1 E U  1 E 380 20 416 35
0 2 2 "0s" 0 0 0 192 0 0  380 20 1
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 arial,-1,13,5,50,0,0,0,0,0
0 4
LANG:10001 4 Name
LANG:10004 6 名称
LANG:10000 4 Name
LANG:10027 6 Имя
14 19
"refNameBox"
""
1 429.8888888888889 14 E E E 1 E 1 E N "_WindowText" E N "_3DFace" E E
 E E
23 0 0 0 0 0
E E E
0
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 

1
"layoutAlignment" "AlignCenter"
4
LANG:10001 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10004 26 Arial,-1,13,5,50,0,0,0,0,0
LANG:10000 26 arial,-1,13,5,50,0,0,0,0,0
LANG:10027 26 arial,-1,13,5,50,0,0,0,0,0
0  430 14 700 40
2 "0s" 0 0 0 0 0 -1  E E E
0
LAYER, 1 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 2 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 3 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 4 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 5 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 6 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
LAYER, 7 
3
LANG:10000 0 
LANG:10001 0 
LANG:10027 0 
0
0
